function empty() {}
;/*! jQuery v1.7.1 jquery.com | jquery.org/license */
(function(a, b) {
    function cy(a) {
        return f.isWindow(a) ? a : a.nodeType === 9 ? a.defaultView || a.parentWindow : !1
    }
    function cv(a) {
        if (!ck[a]) {
            var b = c.body
              , d = f("<" + a + ">").appendTo(b)
              , e = d.css("display");
            d.remove();
            if (e === "none" || e === "") {
                cl || (cl = c.createElement("iframe"),
                cl.frameBorder = cl.width = cl.height = 0),
                b.appendChild(cl);
                if (!cm || !cl.createElement)
                    cm = (cl.contentWindow || cl.contentDocument).document,
                    cm.write((c.compatMode === "CSS1Compat" ? "<!doctype html>" : "") + "<html><body>"),
                    cm.close();
                d = cm.createElement(a),
                cm.body.appendChild(d),
                e = f.css(d, "display"),
                b.removeChild(cl)
            }
            ck[a] = e
        }
        return ck[a]
    }
    function cu(a, b) {
        var c = {};
        f.each(cq.concat.apply([], cq.slice(0, b)), function() {
            c[this] = a
        });
        return c
    }
    function ct() {
        cr = b
    }
    function cs() {
        setTimeout(ct, 0);
        return cr = f.now()
    }
    function cj() {
        try {
            return new a.ActiveXObject("Microsoft.XMLHTTP")
        } catch (b) {}
    }
    function ci() {
        try {
            return new a.XMLHttpRequest
        } catch (b) {}
    }
    function cc(a, c) {
        a.dataFilter && (c = a.dataFilter(c, a.dataType));
        var d = a.dataTypes, e = {}, g, h, i = d.length, j, k = d[0], l, m, n, o, p;
        for (g = 1; g < i; g++) {
            if (g === 1)
                for (h in a.converters)
                    typeof h == "string" && (e[h.toLowerCase()] = a.converters[h]);
            l = k,
            k = d[g];
            if (k === "*")
                k = l;
            else if (l !== "*" && l !== k) {
                m = l + " " + k,
                n = e[m] || e["* " + k];
                if (!n) {
                    p = b;
                    for (o in e) {
                        j = o.split(" ");
                        if (j[0] === l || j[0] === "*") {
                            p = e[j[1] + " " + k];
                            if (p) {
                                o = e[o],
                                o === !0 ? n = p : p === !0 && (n = o);
                                break
                            }
                        }
                    }
                }
                !n && !p && f.error("No conversion from " + m.replace(" ", " to ")),
                n !== !0 && (c = n ? n(c) : p(o(c)))
            }
        }
        return c
    }
    function cb(a, c, d) {
        var e = a.contents, f = a.dataTypes, g = a.responseFields, h, i, j, k;
        for (i in g)
            i in d && (c[g[i]] = d[i]);
        while (f[0] === "*")
            f.shift(),
            h === b && (h = a.mimeType || c.getResponseHeader("content-type"));
        if (h)
            for (i in e)
                if (e[i] && e[i].test(h)) {
                    f.unshift(i);
                    break
                }
        if (f[0]in d)
            j = f[0];
        else {
            for (i in d) {
                if (!f[0] || a.converters[i + " " + f[0]]) {
                    j = i;
                    break
                }
                k || (k = i)
            }
            j = j || k
        }
        if (j) {
            j !== f[0] && f.unshift(j);
            return d[j]
        }
    }
    function ca(a, b, c, d) {
        if (f.isArray(b))
            f.each(b, function(b, e) {
                c || bE.test(a) ? d(a, e) : ca(a + "[" + (typeof e == "object" || f.isArray(e) ? b : "") + "]", e, c, d)
            });
        else if (!c && b != null && typeof b == "object")
            for (var e in b)
                ca(a + "[" + e + "]", b[e], c, d);
        else
            d(a, b)
    }
    function b_(a, c) {
        var d, e, g = f.ajaxSettings.flatOptions || {};
        for (d in c)
            c[d] !== b && ((g[d] ? a : e || (e = {}))[d] = c[d]);
        e && f.extend(!0, a, e)
    }
    function b$(a, c, d, e, f, g) {
        f = f || c.dataTypes[0],
        g = g || {},
        g[f] = !0;
        var h = a[f], i = 0, j = h ? h.length : 0, k = a === bT, l;
        for (; i < j && (k || !l); i++)
            l = h[i](c, d, e),
            typeof l == "string" && (!k || g[l] ? l = b : (c.dataTypes.unshift(l),
            l = b$(a, c, d, e, l, g)));
        (k || !l) && !g["*"] && (l = b$(a, c, d, e, "*", g));
        return l
    }
    function bZ(a) {
        return function(b, c) {
            typeof b != "string" && (c = b,
            b = "*");
            if (f.isFunction(c)) {
                var d = b.toLowerCase().split(bP), e = 0, g = d.length, h, i, j;
                for (; e < g; e++)
                    h = d[e],
                    j = /^\+/.test(h),
                    j && (h = h.substr(1) || "*"),
                    i = a[h] = a[h] || [],
                    i[j ? "unshift" : "push"](c)
            }
        }
    }
    function bC(a, b, c) {
        var d = b === "width" ? a.offsetWidth : a.offsetHeight
          , e = b === "width" ? bx : by
          , g = 0
          , h = e.length;
        if (d > 0) {
            if (c !== "border")
                for (; g < h; g++)
                    c || (d -= parseFloat(f.css(a, "padding" + e[g])) || 0),
                    c === "margin" ? d += parseFloat(f.css(a, c + e[g])) || 0 : d -= parseFloat(f.css(a, "border" + e[g] + "Width")) || 0;
            return d + "px"
        }
        d = bz(a, b, b);
        if (d < 0 || d == null)
            d = a.style[b] || 0;
        d = parseFloat(d) || 0;
        if (c)
            for (; g < h; g++)
                d += parseFloat(f.css(a, "padding" + e[g])) || 0,
                c !== "padding" && (d += parseFloat(f.css(a, "border" + e[g] + "Width")) || 0),
                c === "margin" && (d += parseFloat(f.css(a, c + e[g])) || 0);
        return d + "px"
    }
    function bp(a, b) {
        b.src ? f.ajax({
            url: b.src,
            async: !1,
            dataType: "script"
        }) : f.globalEval((b.text || b.textContent || b.innerHTML || "").replace(bf, "/*$0*/")),
        b.parentNode && b.parentNode.removeChild(b)
    }
    function bo(a) {
        var b = c.createElement("div");
        bh.appendChild(b),
        b.innerHTML = a.outerHTML;
        return b.firstChild
    }
    function bn(a) {
        var b = (a.nodeName || "").toLowerCase();
        b === "input" ? bm(a) : b !== "script" && typeof a.getElementsByTagName != "undefined" && f.grep(a.getElementsByTagName("input"), bm)
    }
    function bm(a) {
        if (a.type === "checkbox" || a.type === "radio")
            a.defaultChecked = a.checked
    }
    function bl(a) {
        return typeof a.getElementsByTagName != "undefined" ? a.getElementsByTagName("*") : typeof a.querySelectorAll != "undefined" ? a.querySelectorAll("*") : []
    }
    function bk(a, b) {
        var c;
        if (b.nodeType === 1) {
            b.clearAttributes && b.clearAttributes(),
            b.mergeAttributes && b.mergeAttributes(a),
            c = b.nodeName.toLowerCase();
            if (c === "object")
                b.outerHTML = a.outerHTML;
            else if (c !== "input" || a.type !== "checkbox" && a.type !== "radio") {
                if (c === "option")
                    b.selected = a.defaultSelected;
                else if (c === "input" || c === "textarea")
                    b.defaultValue = a.defaultValue
            } else
                a.checked && (b.defaultChecked = b.checked = a.checked),
                b.value !== a.value && (b.value = a.value);
            b.removeAttribute(f.expando)
        }
    }
    function bj(a, b) {
        if (b.nodeType === 1 && !!f.hasData(a)) {
            var c, d, e, g = f._data(a), h = f._data(b, g), i = g.events;
            if (i) {
                delete h.handle,
                h.events = {};
                for (c in i)
                    for (d = 0,
                    e = i[c].length; d < e; d++)
                        f.event.add(b, c + (i[c][d].namespace ? "." : "") + i[c][d].namespace, i[c][d], i[c][d].data)
            }
            h.data && (h.data = f.extend({}, h.data))
        }
    }
    function bi(a, b) {
        return f.nodeName(a, "table") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a
    }
    function U(a) {
        var b = V.split("|")
          , c = a.createDocumentFragment();
        if (c.createElement)
            while (b.length)
                c.createElement(b.pop());
        return c
    }
    function T(a, b, c) {
        b = b || 0;
        if (f.isFunction(b))
            return f.grep(a, function(a, d) {
                var e = !!b.call(a, d, a);
                return e === c
            });
        if (b.nodeType)
            return f.grep(a, function(a, d) {
                return a === b === c
            });
        if (typeof b == "string") {
            var d = f.grep(a, function(a) {
                return a.nodeType === 1
            });
            if (O.test(b))
                return f.filter(b, d, !c);
            b = f.filter(b, d)
        }
        return f.grep(a, function(a, d) {
            return f.inArray(a, b) >= 0 === c
        })
    }
    function S(a) {
        return !a || !a.parentNode || a.parentNode.nodeType === 11
    }
    function K() {
        return !0
    }
    function J() {
        return !1
    }
    function n(a, b, c) {
        var d = b + "defer"
          , e = b + "queue"
          , g = b + "mark"
          , h = f._data(a, d);
        h && (c === "queue" || !f._data(a, e)) && (c === "mark" || !f._data(a, g)) && setTimeout(function() {
            !f._data(a, e) && !f._data(a, g) && (f.removeData(a, d, !0),
            h.fire())
        }, 0)
    }
    function m(a) {
        for (var b in a) {
            if (b === "data" && f.isEmptyObject(a[b]))
                continue;
            if (b !== "toJSON")
                return !1
        }
        return !0
    }
    function l(a, c, d) {
        if (d === b && a.nodeType === 1) {
            var e = "data-" + c.replace(k, "-$1").toLowerCase();
            d = a.getAttribute(e);
            if (typeof d == "string") {
                try {
                    d = d === "true" ? !0 : d === "false" ? !1 : d === "null" ? null : f.isNumeric(d) ? parseFloat(d) : j.test(d) ? f.parseJSON(d) : d
                } catch (g) {}
                f.data(a, c, d)
            } else
                d = b
        }
        return d
    }
    function h(a) {
        var b = g[a] = {}, c, d;
        a = a.split(/\s+/);
        for (c = 0,
        d = a.length; c < d; c++)
            b[a[c]] = !0;
        return b
    }
    var c = a.document
      , d = a.navigator
      , e = a.location
      , f = function() {
        function J() {
            if (!e.isReady) {
                try {
                    c.documentElement.doScroll("left")
                } catch (a) {
                    setTimeout(J, 1);
                    return
                }
                e.ready()
            }
        }
        var e = function(a, b) {
            return new e.fn.init(a,b,h)
        }, f = a.jQuery, g = a.$, h, i = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/, j = /\S/, k = /^\s+/, l = /\s+$/, m = /^<(\w+)\s*\/?>(?:<\/\1>)?$/, n = /^[\],:{}\s]*$/, o = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, p = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, q = /(?:^|:|,)(?:\s*\[)+/g, r = /(webkit)[ \/]([\w.]+)/, s = /(opera)(?:.*version)?[ \/]([\w.]+)/, t = /(msie) ([\w.]+)/, u = /(mozilla)(?:.*? rv:([\w.]+))?/, v = /-([a-z]|[0-9])/ig, w = /^-ms-/, x = function(a, b) {
            return (b + "").toUpperCase()
        }, y = d.userAgent, z, A, B, C = Object.prototype.toString, D = Object.prototype.hasOwnProperty, E = Array.prototype.push, F = Array.prototype.slice, G = String.prototype.trim, H = Array.prototype.indexOf, I = {};
        e.fn = e.prototype = {
            constructor: e,
            init: function(a, d, f) {
                var g, h, j, k;
                if (!a)
                    return this;
                if (a.nodeType) {
                    this.context = this[0] = a,
                    this.length = 1;
                    return this
                }
                if (a === "body" && !d && c.body) {
                    this.context = c,
                    this[0] = c.body,
                    this.selector = a,
                    this.length = 1;
                    return this
                }
                if (typeof a == "string") {
                    a.charAt(0) !== "<" || a.charAt(a.length - 1) !== ">" || a.length < 3 ? g = i.exec(a) : g = [null, a, null];
                    if (g && (g[1] || !d)) {
                        if (g[1]) {
                            d = d instanceof e ? d[0] : d,
                            k = d ? d.ownerDocument || d : c,
                            j = m.exec(a),
                            j ? e.isPlainObject(d) ? (a = [c.createElement(j[1])],
                            e.fn.attr.call(a, d, !0)) : a = [k.createElement(j[1])] : (j = e.buildFragment([g[1]], [k]),
                            a = (j.cacheable ? e.clone(j.fragment) : j.fragment).childNodes);
                            return e.merge(this, a)
                        }
                        h = c.getElementById(g[2]);
                        if (h && h.parentNode) {
                            if (h.id !== g[2])
                                return f.find(a);
                            this.length = 1,
                            this[0] = h
                        }
                        this.context = c,
                        this.selector = a;
                        return this
                    }
                    return !d || d.jquery ? (d || f).find(a) : this.constructor(d).find(a)
                }
                if (e.isFunction(a))
                    return f.ready(a);
                a.selector !== b && (this.selector = a.selector,
                this.context = a.context);
                return e.makeArray(a, this)
            },
            selector: "",
            jquery: "1.7.1",
            length: 0,
            size: function() {
                return this.length
            },
            toArray: function() {
                return F.call(this, 0)
            },
            get: function(a) {
                return a == null ? this.toArray() : a < 0 ? this[this.length + a] : this[a]
            },
            pushStack: function(a, b, c) {
                var d = this.constructor();
                e.isArray(a) ? E.apply(d, a) : e.merge(d, a),
                d.prevObject = this,
                d.context = this.context,
                b === "find" ? d.selector = this.selector + (this.selector ? " " : "") + c : b && (d.selector = this.selector + "." + b + "(" + c + ")");
                return d
            },
            each: function(a, b) {
                return e.each(this, a, b)
            },
            ready: function(a) {
                e.bindReady(),
                A.add(a);
                return this
            },
            eq: function(a) {
                a = +a;
                return a === -1 ? this.slice(a) : this.slice(a, a + 1)
            },
            first: function() {
                return this.eq(0)
            },
            last: function() {
                return this.eq(-1)
            },
            slice: function() {
                return this.pushStack(F.apply(this, arguments), "slice", F.call(arguments).join(","))
            },
            map: function(a) {
                return this.pushStack(e.map(this, function(b, c) {
                    return a.call(b, c, b)
                }))
            },
            end: function() {
                return this.prevObject || this.constructor(null)
            },
            push: E,
            sort: [].sort,
            splice: [].splice
        },
        e.fn.init.prototype = e.fn,
        e.extend = e.fn.extend = function() {
            var a, c, d, f, g, h, i = arguments[0] || {}, j = 1, k = arguments.length, l = !1;
            typeof i == "boolean" && (l = i,
            i = arguments[1] || {},
            j = 2),
            typeof i != "object" && !e.isFunction(i) && (i = {}),
            k === j && (i = this,
            --j);
            for (; j < k; j++)
                if ((a = arguments[j]) != null)
                    for (c in a) {
                        d = i[c],
                        f = a[c];
                        if (i === f)
                            continue;
                        l && f && (e.isPlainObject(f) || (g = e.isArray(f))) ? (g ? (g = !1,
                        h = d && e.isArray(d) ? d : []) : h = d && e.isPlainObject(d) ? d : {},
                        i[c] = e.extend(l, h, f)) : f !== b && (i[c] = f)
                    }
            return i
        }
        ,
        e.extend({
            noConflict: function(b) {
                a.$ === e && (a.$ = g),
                b && a.jQuery === e && (a.jQuery = f);
                return e
            },
            isReady: !1,
            readyWait: 1,
            holdReady: function(a) {
                a ? e.readyWait++ : e.ready(!0)
            },
            ready: function(a) {
                if (a === !0 && !--e.readyWait || a !== !0 && !e.isReady) {
                    if (!c.body)
                        return setTimeout(e.ready, 1);
                    e.isReady = !0;
                    if (a !== !0 && --e.readyWait > 0)
                        return;
                    A.fireWith(c, [e]),
                    e.fn.trigger && e(c).trigger("ready").off("ready")
                }
            },
            bindReady: function() {
                if (!A) {
                    A = e.Callbacks("once memory");
                    if (c.readyState === "complete")
                        return setTimeout(e.ready, 1);
                    if (c.addEventListener)
                        c.addEventListener("DOMContentLoaded", B, !1),
                        a.addEventListener("load", e.ready, !1);
                    else if (c.attachEvent) {
                        c.attachEvent("onreadystatechange", B),
                        a.attachEvent("onload", e.ready);
                        var b = !1;
                        try {
                            b = a.frameElement == null
                        } catch (d) {}
                        c.documentElement.doScroll && b && J()
                    }
                }
            },
            isFunction: function(a) {
                return e.type(a) === "function"
            },
            isArray: Array.isArray || function(a) {
                return e.type(a) === "array"
            }
            ,
            isWindow: function(a) {
                return a && typeof a == "object" && "setInterval"in a
            },
            isNumeric: function(a) {
                return !isNaN(parseFloat(a)) && isFinite(a)
            },
            type: function(a) {
                return a == null ? String(a) : I[C.call(a)] || "object"
            },
            isPlainObject: function(a) {
                if (!a || e.type(a) !== "object" || a.nodeType || e.isWindow(a))
                    return !1;
                try {
                    if (a.constructor && !D.call(a, "constructor") && !D.call(a.constructor.prototype, "isPrototypeOf"))
                        return !1
                } catch (c) {
                    return !1
                }
                var d;
                for (d in a)
                    ;
                return d === b || D.call(a, d)
            },
            isEmptyObject: function(a) {
                for (var b in a)
                    return !1;
                return !0
            },
            error: function(a) {
                throw new Error(a)
            },
            parseJSON: function(b) {
                if (typeof b != "string" || !b)
                    return null;
                b = e.trim(b);
                if (a.JSON && a.JSON.parse)
                    return a.JSON.parse(b);
                if (n.test(b.replace(o, "@").replace(p, "]").replace(q, "")))
                    return (new Function("return " + b))();
                e.error("Invalid JSON: " + b)
            },
            parseXML: function(c) {
                var d, f;
                try {
                    a.DOMParser ? (f = new DOMParser,
                    d = f.parseFromString(c, "text/xml")) : (d = new ActiveXObject("Microsoft.XMLDOM"),
                    d.async = "false",
                    d.loadXML(c))
                } catch (g) {
                    d = b
                }
                (!d || !d.documentElement || d.getElementsByTagName("parsererror").length) && e.error("Invalid XML: " + c);
                return d
            },
            noop: function() {},
            globalEval: function(b) {
                b && j.test(b) && (a.execScript || function(b) {
                    a.eval.call(a, b)
                }
                )(b)
            },
            camelCase: function(a) {
                return a.replace(w, "ms-").replace(v, x)
            },
            nodeName: function(a, b) {
                return a.nodeName && a.nodeName.toUpperCase() === b.toUpperCase()
            },
            each: function(a, c, d) {
                var f, g = 0, h = a.length, i = h === b || e.isFunction(a);
                if (d) {
                    if (i) {
                        for (f in a)
                            if (c.apply(a[f], d) === !1)
                                break
                    } else
                        for (; g < h; )
                            if (c.apply(a[g++], d) === !1)
                                break
                } else if (i) {
                    for (f in a)
                        if (c.call(a[f], f, a[f]) === !1)
                            break
                } else
                    for (; g < h; )
                        if (c.call(a[g], g, a[g++]) === !1)
                            break;
                return a
            },
            trim: G ? function(a) {
                return a == null ? "" : G.call(a)
            }
            : function(a) {
                return a == null ? "" : (a + "").replace(k, "").replace(l, "")
            }
            ,
            makeArray: function(a, b) {
                var c = b || [];
                if (a != null) {
                    var d = e.type(a);
                    a.length == null || d === "string" || d === "function" || d === "regexp" || e.isWindow(a) ? E.call(c, a) : e.merge(c, a)
                }
                return c
            },
            inArray: function(a, b, c) {
                var d;
                if (b) {
                    if (H)
                        return H.call(b, a, c);
                    d = b.length,
                    c = c ? c < 0 ? Math.max(0, d + c) : c : 0;
                    for (; c < d; c++)
                        if (c in b && b[c] === a)
                            return c
                }
                return -1
            },
            merge: function(a, c) {
                var d = a.length
                  , e = 0;
                if (typeof c.length == "number")
                    for (var f = c.length; e < f; e++)
                        a[d++] = c[e];
                else
                    while (c[e] !== b)
                        a[d++] = c[e++];
                a.length = d;
                return a
            },
            grep: function(a, b, c) {
                var d = [], e;
                c = !!c;
                for (var f = 0, g = a.length; f < g; f++)
                    e = !!b(a[f], f),
                    c !== e && d.push(a[f]);
                return d
            },
            map: function(a, c, d) {
                var f, g, h = [], i = 0, j = a.length, k = a instanceof e || j !== b && typeof j == "number" && (j > 0 && a[0] && a[j - 1] || j === 0 || e.isArray(a));
                if (k)
                    for (; i < j; i++)
                        f = c(a[i], i, d),
                        f != null && (h[h.length] = f);
                else
                    for (g in a)
                        f = c(a[g], g, d),
                        f != null && (h[h.length] = f);
                return h.concat.apply([], h)
            },
            guid: 1,
            proxy: function(a, c) {
                if (typeof c == "string") {
                    var d = a[c];
                    c = a,
                    a = d
                }
                if (!e.isFunction(a))
                    return b;
                var f = F.call(arguments, 2)
                  , g = function() {
                    return a.apply(c, f.concat(F.call(arguments)))
                };
                g.guid = a.guid = a.guid || g.guid || e.guid++;
                return g
            },
            access: function(a, c, d, f, g, h) {
                var i = a.length;
                if (typeof c == "object") {
                    for (var j in c)
                        e.access(a, j, c[j], f, g, d);
                    return a
                }
                if (d !== b) {
                    f = !h && f && e.isFunction(d);
                    for (var k = 0; k < i; k++)
                        g(a[k], c, f ? d.call(a[k], k, g(a[k], c)) : d, h);
                    return a
                }
                return i ? g(a[0], c) : b
            },
            now: function() {
                return (new Date).getTime()
            },
            uaMatch: function(a) {
                a = a.toLowerCase();
                var b = r.exec(a) || s.exec(a) || t.exec(a) || a.indexOf("compatible") < 0 && u.exec(a) || [];
                return {
                    browser: b[1] || "",
                    version: b[2] || "0"
                }
            },
            sub: function() {
                function a(b, c) {
                    return new a.fn.init(b,c)
                }
                e.extend(!0, a, this),
                a.superclass = this,
                a.fn = a.prototype = this(),
                a.fn.constructor = a,
                a.sub = this.sub,
                a.fn.init = function(d, f) {
                    f && f instanceof e && !(f instanceof a) && (f = a(f));
                    return e.fn.init.call(this, d, f, b)
                }
                ,
                a.fn.init.prototype = a.fn;
                var b = a(c);
                return a
            },
            browser: {}
        }),
        e.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(a, b) {
            I["[object " + b + "]"] = b.toLowerCase()
        }),
        z = e.uaMatch(y),
        z.browser && (e.browser[z.browser] = !0,
        e.browser.version = z.version),
        e.browser.webkit && (e.browser.safari = !0),
        j.test(" ") && (k = /^[\s\xA0]+/,
        l = /[\s\xA0]+$/),
        h = e(c),
        c.addEventListener ? B = function() {
            c.removeEventListener("DOMContentLoaded", B, !1),
            e.ready()
        }
        : c.attachEvent && (B = function() {
            c.readyState === "complete" && (c.detachEvent("onreadystatechange", B),
            e.ready())
        }
        );
        return e
    }()
      , g = {};
    f.Callbacks = function(a) {
        a = a ? g[a] || h(a) : {};
        var c = [], d = [], e, i, j, k, l, m = function(b) {
            var d, e, g, h, i;
            for (d = 0,
            e = b.length; d < e; d++)
                g = b[d],
                h = f.type(g),
                h === "array" ? m(g) : h === "function" && (!a.unique || !o.has(g)) && c.push(g)
        }, n = function(b, f) {
            f = f || [],
            e = !a.memory || [b, f],
            i = !0,
            l = j || 0,
            j = 0,
            k = c.length;
            for (; c && l < k; l++)
                if (c[l].apply(b, f) === !1 && a.stopOnFalse) {
                    e = !0;
                    break
                }
            i = !1,
            c && (a.once ? e === !0 ? o.disable() : c = [] : d && d.length && (e = d.shift(),
            o.fireWith(e[0], e[1])))
        }, o = {
            add: function() {
                if (c) {
                    var a = c.length;
                    m(arguments),
                    i ? k = c.length : e && e !== !0 && (j = a,
                    n(e[0], e[1]))
                }
                return this
            },
            remove: function() {
                if (c) {
                    var b = arguments
                      , d = 0
                      , e = b.length;
                    for (; d < e; d++)
                        for (var f = 0; f < c.length; f++)
                            if (b[d] === c[f]) {
                                i && f <= k && (k--,
                                f <= l && l--),
                                c.splice(f--, 1);
                                if (a.unique)
                                    break
                            }
                }
                return this
            },
            has: function(a) {
                if (c) {
                    var b = 0
                      , d = c.length;
                    for (; b < d; b++)
                        if (a === c[b])
                            return !0
                }
                return !1
            },
            empty: function() {
                c = [];
                return this
            },
            disable: function() {
                c = d = e = b;
                return this
            },
            disabled: function() {
                return !c
            },
            lock: function() {
                d = b,
                (!e || e === !0) && o.disable();
                return this
            },
            locked: function() {
                return !d
            },
            fireWith: function(b, c) {
                d && (i ? a.once || d.push([b, c]) : (!a.once || !e) && n(b, c));
                return this
            },
            fire: function() {
                o.fireWith(this, arguments);
                return this
            },
            fired: function() {
                return !!e
            }
        };
        return o
    }
    ;
    var i = [].slice;
    f.extend({
        Deferred: function(a) {
            var b = f.Callbacks("once memory"), c = f.Callbacks("once memory"), d = f.Callbacks("memory"), e = "pending", g = {
                resolve: b,
                reject: c,
                notify: d
            }, h = {
                done: b.add,
                fail: c.add,
                progress: d.add,
                state: function() {
                    return e
                },
                isResolved: b.fired,
                isRejected: c.fired,
                then: function(a, b, c) {
                    i.done(a).fail(b).progress(c);
                    return this
                },
                always: function() {
                    i.done.apply(i, arguments).fail.apply(i, arguments);
                    return this
                },
                pipe: function(a, b, c) {
                    return f.Deferred(function(d) {
                        f.each({
                            done: [a, "resolve"],
                            fail: [b, "reject"],
                            progress: [c, "notify"]
                        }, function(a, b) {
                            var c = b[0], e = b[1], g;
                            f.isFunction(c) ? i[a](function() {
                                g = c.apply(this, arguments),
                                g && f.isFunction(g.promise) ? g.promise().then(d.resolve, d.reject, d.notify) : d[e + "With"](this === i ? d : this, [g])
                            }) : i[a](d[e])
                        })
                    }).promise()
                },
                promise: function(a) {
                    if (a == null)
                        a = h;
                    else
                        for (var b in h)
                            a[b] = h[b];
                    return a
                }
            }, i = h.promise({}), j;
            for (j in g)
                i[j] = g[j].fire,
                i[j + "With"] = g[j].fireWith;
            i.done(function() {
                e = "resolved"
            }, c.disable, d.lock).fail(function() {
                e = "rejected"
            }, b.disable, d.lock),
            a && a.call(i, i);
            return i
        },
        when: function(a) {
            function m(a) {
                return function(b) {
                    e[a] = arguments.length > 1 ? i.call(arguments, 0) : b,
                    j.notifyWith(k, e)
                }
            }
            function l(a) {
                return function(c) {
                    b[a] = arguments.length > 1 ? i.call(arguments, 0) : c,
                    --g || j.resolveWith(j, b)
                }
            }
            var b = i.call(arguments, 0)
              , c = 0
              , d = b.length
              , e = Array(d)
              , g = d
              , h = d
              , j = d <= 1 && a && f.isFunction(a.promise) ? a : f.Deferred()
              , k = j.promise();
            if (d > 1) {
                for (; c < d; c++)
                    b[c] && b[c].promise && f.isFunction(b[c].promise) ? b[c].promise().then(l(c), j.reject, m(c)) : --g;
                g || j.resolveWith(j, b)
            } else
                j !== a && j.resolveWith(j, d ? [a] : []);
            return k
        }
    }),
    f.support = function() {
        var b, d, e, g, h, i, j, k, l, m, n, o, p, q = c.createElement("div"), r = c.documentElement;
        q.setAttribute("className", "t"),
        q.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",
        d = q.getElementsByTagName("*"),
        e = q.getElementsByTagName("a")[0];
        if (!d || !d.length || !e)
            return {};
        g = c.createElement("select"),
        h = g.appendChild(c.createElement("option")),
        i = q.getElementsByTagName("input")[0],
        b = {
            leadingWhitespace: q.firstChild.nodeType === 3,
            tbody: !q.getElementsByTagName("tbody").length,
            htmlSerialize: !!q.getElementsByTagName("link").length,
            style: /top/.test(e.getAttribute("style")),
            hrefNormalized: e.getAttribute("href") === "/a",
            opacity: /^0.55/.test(e.style.opacity),
            cssFloat: !!e.style.cssFloat,
            checkOn: i.value === "on",
            optSelected: h.selected,
            getSetAttribute: q.className !== "t",
            enctype: !!c.createElement("form").enctype,
            html5Clone: c.createElement("nav").cloneNode(!0).outerHTML !== "<:nav></:nav>",
            submitBubbles: !0,
            changeBubbles: !0,
            focusinBubbles: !1,
            deleteExpando: !0,
            noCloneEvent: !0,
            inlineBlockNeedsLayout: !1,
            shrinkWrapBlocks: !1,
            reliableMarginRight: !0
        },
        i.checked = !0,
        b.noCloneChecked = i.cloneNode(!0).checked,
        g.disabled = !0,
        b.optDisabled = !h.disabled;
        try {
            delete q.test
        } catch (s) {
            b.deleteExpando = !1
        }
        !q.addEventListener && q.attachEvent && q.fireEvent && (q.attachEvent("onclick", function() {
            b.noCloneEvent = !1
        }),
        q.cloneNode(!0).fireEvent("onclick")),
        i = c.createElement("input"),
        i.value = "t",
        i.setAttribute("type", "radio"),
        b.radioValue = i.value === "t",
        i.setAttribute("checked", "checked"),
        q.appendChild(i),
        k = c.createDocumentFragment(),
        k.appendChild(q.lastChild),
        b.checkClone = k.cloneNode(!0).cloneNode(!0).lastChild.checked,
        b.appendChecked = i.checked,
        k.removeChild(i),
        k.appendChild(q),
        q.innerHTML = "",
        a.getComputedStyle && (j = c.createElement("div"),
        j.style.width = "0",
        j.style.marginRight = "0",
        q.style.width = "2px",
        q.appendChild(j),
        b.reliableMarginRight = (parseInt((a.getComputedStyle(j, null) || {
            marginRight: 0
        }).marginRight, 10) || 0) === 0);
        if (q.attachEvent)
            for (o in {
                submit: 1,
                change: 1,
                focusin: 1
            })
                n = "on" + o,
                p = n in q,
                p || (q.setAttribute(n, "return;"),
                p = typeof q[n] == "function"),
                b[o + "Bubbles"] = p;
        k.removeChild(q),
        k = g = h = j = q = i = null,
        f(function() {
            var a, d, e, g, h, i, j, k, m, n, o, r = c.getElementsByTagName("body")[0];
            !r || (j = 1,
            k = "position:absolute;top:0;left:0;width:1px;height:1px;margin:0;",
            m = "visibility:hidden;border:0;",
            n = "style='" + k + "border:5px solid #000;padding:0;'",
            o = "<div " + n + "><div></div></div>" + "<table " + n + " cellpadding='0' cellspacing='0'>" + "<tr><td></td></tr></table>",
            a = c.createElement("div"),
            a.style.cssText = m + "width:0;height:0;position:static;top:0;margin-top:" + j + "px",
            r.insertBefore(a, r.firstChild),
            q = c.createElement("div"),
            a.appendChild(q),
            q.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",
            l = q.getElementsByTagName("td"),
            p = l[0].offsetHeight === 0,
            l[0].style.display = "",
            l[1].style.display = "none",
            b.reliableHiddenOffsets = p && l[0].offsetHeight === 0,
            q.innerHTML = "",
            q.style.width = q.style.paddingLeft = "1px",
            f.boxModel = b.boxModel = q.offsetWidth === 2,
            typeof q.style.zoom != "undefined" && (q.style.display = "inline",
            q.style.zoom = 1,
            b.inlineBlockNeedsLayout = q.offsetWidth === 2,
            q.style.display = "",
            q.innerHTML = "<div style='width:4px;'></div>",
            b.shrinkWrapBlocks = q.offsetWidth !== 2),
            q.style.cssText = k + m,
            q.innerHTML = o,
            d = q.firstChild,
            e = d.firstChild,
            h = d.nextSibling.firstChild.firstChild,
            i = {
                doesNotAddBorder: e.offsetTop !== 5,
                doesAddBorderForTableAndCells: h.offsetTop === 5
            },
            e.style.position = "fixed",
            e.style.top = "20px",
            i.fixedPosition = e.offsetTop === 20 || e.offsetTop === 15,
            e.style.position = e.style.top = "",
            d.style.overflow = "hidden",
            d.style.position = "relative",
            i.subtractsBorderForOverflowNotVisible = e.offsetTop === -5,
            i.doesNotIncludeMarginInBodyOffset = r.offsetTop !== j,
            r.removeChild(a),
            q = a = null,
            f.extend(b, i))
        });
        return b
    }();
    var j = /^(?:\{.*\}|\[.*\])$/
      , k = /([A-Z])/g;
    f.extend({
        cache: {},
        uuid: 0,
        expando: "jQuery" + (f.fn.jquery + Math.random()).replace(/\D/g, ""),
        noData: {
            embed: !0,
            object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            applet: !0
        },
        hasData: function(a) {
            a = a.nodeType ? f.cache[a[f.expando]] : a[f.expando];
            return !!a && !m(a)
        },
        data: function(a, c, d, e) {
            if (!!f.acceptData(a)) {
                var g, h, i, j = f.expando, k = typeof c == "string", l = a.nodeType, m = l ? f.cache : a, n = l ? a[j] : a[j] && j, o = c === "events";
                if ((!n || !m[n] || !o && !e && !m[n].data) && k && d === b)
                    return;
                n || (l ? a[j] = n = ++f.uuid : n = j),
                m[n] || (m[n] = {},
                l || (m[n].toJSON = f.noop));
                if (typeof c == "object" || typeof c == "function")
                    e ? m[n] = f.extend(m[n], c) : m[n].data = f.extend(m[n].data, c);
                g = h = m[n],
                e || (h.data || (h.data = {}),
                h = h.data),
                d !== b && (h[f.camelCase(c)] = d);
                if (o && !h[c])
                    return g.events;
                k ? (i = h[c],
                i == null && (i = h[f.camelCase(c)])) : i = h;
                return i
            }
        },
        removeData: function(a, b, c) {
            if (!!f.acceptData(a)) {
                var d, e, g, h = f.expando, i = a.nodeType, j = i ? f.cache : a, k = i ? a[h] : h;
                if (!j[k])
                    return;
                if (b) {
                    d = c ? j[k] : j[k].data;
                    if (d) {
                        f.isArray(b) || (b in d ? b = [b] : (b = f.camelCase(b),
                        b in d ? b = [b] : b = b.split(" ")));
                        for (e = 0,
                        g = b.length; e < g; e++)
                            delete d[b[e]];
                        if (!(c ? m : f.isEmptyObject)(d))
                            return
                    }
                }
                if (!c) {
                    delete j[k].data;
                    if (!m(j[k]))
                        return
                }
                f.support.deleteExpando || !j.setInterval ? delete j[k] : j[k] = null,
                i && (f.support.deleteExpando ? delete a[h] : a.removeAttribute ? a.removeAttribute(h) : a[h] = null)
            }
        },
        _data: function(a, b, c) {
            return f.data(a, b, c, !0)
        },
        acceptData: function(a) {
            if (a.nodeName) {
                var b = f.noData[a.nodeName.toLowerCase()];
                if (b)
                    return b !== !0 && a.getAttribute("classid") === b
            }
            return !0
        }
    }),
    f.fn.extend({
        data: function(a, c) {
            var d, e, g, h = null;
            if (typeof a == "undefined") {
                if (this.length) {
                    h = f.data(this[0]);
                    if (this[0].nodeType === 1 && !f._data(this[0], "parsedAttrs")) {
                        e = this[0].attributes;
                        for (var i = 0, j = e.length; i < j; i++)
                            g = e[i].name,
                            g.indexOf("data-") === 0 && (g = f.camelCase(g.substring(5)),
                            l(this[0], g, h[g]));
                        f._data(this[0], "parsedAttrs", !0)
                    }
                }
                return h
            }
            if (typeof a == "object")
                return this.each(function() {
                    f.data(this, a)
                });
            d = a.split("."),
            d[1] = d[1] ? "." + d[1] : "";
            if (c === b) {
                h = this.triggerHandler("getData" + d[1] + "!", [d[0]]),
                h === b && this.length && (h = f.data(this[0], a),
                h = l(this[0], a, h));
                return h === b && d[1] ? this.data(d[0]) : h
            }
            return this.each(function() {
                var b = f(this)
                  , e = [d[0], c];
                b.triggerHandler("setData" + d[1] + "!", e),
                f.data(this, a, c),
                b.triggerHandler("changeData" + d[1] + "!", e)
            })
        },
        removeData: function(a) {
            return this.each(function() {
                f.removeData(this, a)
            })
        }
    }),
    f.extend({
        _mark: function(a, b) {
            a && (b = (b || "fx") + "mark",
            f._data(a, b, (f._data(a, b) || 0) + 1))
        },
        _unmark: function(a, b, c) {
            a !== !0 && (c = b,
            b = a,
            a = !1);
            if (b) {
                c = c || "fx";
                var d = c + "mark"
                  , e = a ? 0 : (f._data(b, d) || 1) - 1;
                e ? f._data(b, d, e) : (f.removeData(b, d, !0),
                n(b, c, "mark"))
            }
        },
        queue: function(a, b, c) {
            var d;
            if (a) {
                b = (b || "fx") + "queue",
                d = f._data(a, b),
                c && (!d || f.isArray(c) ? d = f._data(a, b, f.makeArray(c)) : d.push(c));
                return d || []
            }
        },
        dequeue: function(a, b) {
            b = b || "fx";
            var c = f.queue(a, b)
              , d = c.shift()
              , e = {};
            d === "inprogress" && (d = c.shift()),
            d && (b === "fx" && c.unshift("inprogress"),
            f._data(a, b + ".run", e),
            d.call(a, function() {
                f.dequeue(a, b)
            }, e)),
            c.length || (f.removeData(a, b + "queue " + b + ".run", !0),
            n(a, b, "queue"))
        }
    }),
    f.fn.extend({
        queue: function(a, c) {
            typeof a != "string" && (c = a,
            a = "fx");
            if (c === b)
                return f.queue(this[0], a);
            return this.each(function() {
                var b = f.queue(this, a, c);
                a === "fx" && b[0] !== "inprogress" && f.dequeue(this, a)
            })
        },
        dequeue: function(a) {
            return this.each(function() {
                f.dequeue(this, a)
            })
        },
        delay: function(a, b) {
            a = f.fx ? f.fx.speeds[a] || a : a,
            b = b || "fx";
            return this.queue(b, function(b, c) {
                var d = setTimeout(b, a);
                c.stop = function() {
                    clearTimeout(d)
                }
            })
        },
        clearQueue: function(a) {
            return this.queue(a || "fx", [])
        },
        promise: function(a, c) {
            function m() {
                --h || d.resolveWith(e, [e])
            }
            typeof a != "string" && (c = a,
            a = b),
            a = a || "fx";
            var d = f.Deferred(), e = this, g = e.length, h = 1, i = a + "defer", j = a + "queue", k = a + "mark", l;
            while (g--)
                if (l = f.data(e[g], i, b, !0) || (f.data(e[g], j, b, !0) || f.data(e[g], k, b, !0)) && f.data(e[g], i, f.Callbacks("once memory"), !0))
                    h++,
                    l.add(m);
            m();
            return d.promise()
        }
    });
    var o = /[\n\t\r]/g, p = /\s+/, q = /\r/g, r = /^(?:button|input)$/i, s = /^(?:button|input|object|select|textarea)$/i, t = /^a(?:rea)?$/i, u = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i, v = f.support.getSetAttribute, w, x, y;
    f.fn.extend({
        attr: function(a, b) {
            return f.access(this, a, b, !0, f.attr)
        },
        removeAttr: function(a) {
            return this.each(function() {
                f.removeAttr(this, a)
            })
        },
        prop: function(a, b) {
            return f.access(this, a, b, !0, f.prop)
        },
        removeProp: function(a) {
            a = f.propFix[a] || a;
            return this.each(function() {
                try {
                    this[a] = b,
                    delete this[a]
                } catch (c) {}
            })
        },
        addClass: function(a) {
            var b, c, d, e, g, h, i;
            if (f.isFunction(a))
                return this.each(function(b) {
                    f(this).addClass(a.call(this, b, this.className))
                });
            if (a && typeof a == "string") {
                b = a.split(p);
                for (c = 0,
                d = this.length; c < d; c++) {
                    e = this[c];
                    if (e.nodeType === 1)
                        if (!e.className && b.length === 1)
                            e.className = a;
                        else {
                            g = " " + e.className + " ";
                            for (h = 0,
                            i = b.length; h < i; h++)
                                ~g.indexOf(" " + b[h] + " ") || (g += b[h] + " ");
                            e.className = f.trim(g)
                        }
                }
            }
            return this
        },
        removeClass: function(a) {
            var c, d, e, g, h, i, j;
            if (f.isFunction(a))
                return this.each(function(b) {
                    f(this).removeClass(a.call(this, b, this.className))
                });
            if (a && typeof a == "string" || a === b) {
                c = (a || "").split(p);
                for (d = 0,
                e = this.length; d < e; d++) {
                    g = this[d];
                    if (g.nodeType === 1 && g.className)
                        if (a) {
                            h = (" " + g.className + " ").replace(o, " ");
                            for (i = 0,
                            j = c.length; i < j; i++)
                                h = h.replace(" " + c[i] + " ", " ");
                            g.className = f.trim(h)
                        } else
                            g.className = ""
                }
            }
            return this
        },
        toggleClass: function(a, b) {
            var c = typeof a
              , d = typeof b == "boolean";
            if (f.isFunction(a))
                return this.each(function(c) {
                    f(this).toggleClass(a.call(this, c, this.className, b), b)
                });
            return this.each(function() {
                if (c === "string") {
                    var e, g = 0, h = f(this), i = b, j = a.split(p);
                    while (e = j[g++])
                        i = d ? i : !h.hasClass(e),
                        h[i ? "addClass" : "removeClass"](e)
                } else if (c === "undefined" || c === "boolean")
                    this.className && f._data(this, "__className__", this.className),
                    this.className = this.className || a === !1 ? "" : f._data(this, "__className__") || ""
            })
        },
        hasClass: function(a) {
            var b = " " + a + " "
              , c = 0
              , d = this.length;
            for (; c < d; c++)
                if (this[c].nodeType === 1 && (" " + this[c].className + " ").replace(o, " ").indexOf(b) > -1)
                    return !0;
            return !1
        },
        val: function(a) {
            var c, d, e, g = this[0];
            {
                if (!!arguments.length) {
                    e = f.isFunction(a);
                    return this.each(function(d) {
                        var g = f(this), h;
                        if (this.nodeType === 1) {
                            e ? h = a.call(this, d, g.val()) : h = a,
                            h == null ? h = "" : typeof h == "number" ? h += "" : f.isArray(h) && (h = f.map(h, function(a) {
                                return a == null ? "" : a + ""
                            })),
                            c = f.valHooks[this.nodeName.toLowerCase()] || f.valHooks[this.type];
                            if (!c || !("set"in c) || c.set(this, h, "value") === b)
                                this.value = h
                        }
                    })
                }
                if (g) {
                    c = f.valHooks[g.nodeName.toLowerCase()] || f.valHooks[g.type];
                    if (c && "get"in c && (d = c.get(g, "value")) !== b)
                        return d;
                    d = g.value;
                    return typeof d == "string" ? d.replace(q, "") : d == null ? "" : d
                }
            }
        }
    }),
    f.extend({
        valHooks: {
            option: {
                get: function(a) {
                    var b = a.attributes.value;
                    return !b || b.specified ? a.value : a.text
                }
            },
            select: {
                get: function(a) {
                    var b, c, d, e, g = a.selectedIndex, h = [], i = a.options, j = a.type === "select-one";
                    if (g < 0)
                        return null;
                    c = j ? g : 0,
                    d = j ? g + 1 : i.length;
                    for (; c < d; c++) {
                        e = i[c];
                        if (e.selected && (f.support.optDisabled ? !e.disabled : e.getAttribute("disabled") === null) && (!e.parentNode.disabled || !f.nodeName(e.parentNode, "optgroup"))) {
                            b = f(e).val();
                            if (j)
                                return b;
                            h.push(b)
                        }
                    }
                    if (j && !h.length && i.length)
                        return f(i[g]).val();
                    return h
                },
                set: function(a, b) {
                    var c = f.makeArray(b);
                    f(a).find("option").each(function() {
                        this.selected = f.inArray(f(this).val(), c) >= 0
                    }),
                    c.length || (a.selectedIndex = -1);
                    return c
                }
            }
        },
        attrFn: {
            val: !0,
            css: !0,
            html: !0,
            text: !0,
            data: !0,
            width: !0,
            height: !0,
            offset: !0
        },
        attr: function(a, c, d, e) {
            var g, h, i, j = a.nodeType;
            if (!!a && j !== 3 && j !== 8 && j !== 2) {
                if (e && c in f.attrFn)
                    return f(a)[c](d);
                if (typeof a.getAttribute == "undefined")
                    return f.prop(a, c, d);
                i = j !== 1 || !f.isXMLDoc(a),
                i && (c = c.toLowerCase(),
                h = f.attrHooks[c] || (u.test(c) ? x : w));
                if (d !== b) {
                    if (d === null) {
                        f.removeAttr(a, c);
                        return
                    }
                    if (h && "set"in h && i && (g = h.set(a, d, c)) !== b)
                        return g;
                    a.setAttribute(c, "" + d);
                    return d
                }
                if (h && "get"in h && i && (g = h.get(a, c)) !== null)
                    return g;
                g = a.getAttribute(c);
                return g === null ? b : g
            }
        },
        removeAttr: function(a, b) {
            var c, d, e, g, h = 0;
            if (b && a.nodeType === 1) {
                d = b.toLowerCase().split(p),
                g = d.length;
                for (; h < g; h++)
                    e = d[h],
                    e && (c = f.propFix[e] || e,
                    f.attr(a, e, ""),
                    a.removeAttribute(v ? e : c),
                    u.test(e) && c in a && (a[c] = !1))
            }
        },
        attrHooks: {
            type: {
                set: function(a, b) {
                    if (r.test(a.nodeName) && a.parentNode)
                        f.error("type property can't be changed");
                    else if (!f.support.radioValue && b === "radio" && f.nodeName(a, "input")) {
                        var c = a.value;
                        a.setAttribute("type", b),
                        c && (a.value = c);
                        return b
                    }
                }
            },
            value: {
                get: function(a, b) {
                    if (w && f.nodeName(a, "button"))
                        return w.get(a, b);
                    return b in a ? a.value : null
                },
                set: function(a, b, c) {
                    if (w && f.nodeName(a, "button"))
                        return w.set(a, b, c);
                    a.value = b
                }
            }
        },
        propFix: {
            tabindex: "tabIndex",
            readonly: "readOnly",
            "for": "htmlFor",
            "class": "className",
            maxlength: "maxLength",
            cellspacing: "cellSpacing",
            cellpadding: "cellPadding",
            rowspan: "rowSpan",
            colspan: "colSpan",
            usemap: "useMap",
            frameborder: "frameBorder",
            contenteditable: "contentEditable"
        },
        prop: function(a, c, d) {
            var e, g, h, i = a.nodeType;
            if (!!a && i !== 3 && i !== 8 && i !== 2) {
                h = i !== 1 || !f.isXMLDoc(a),
                h && (c = f.propFix[c] || c,
                g = f.propHooks[c]);
                return d !== b ? g && "set"in g && (e = g.set(a, d, c)) !== b ? e : a[c] = d : g && "get"in g && (e = g.get(a, c)) !== null ? e : a[c]
            }
        },
        propHooks: {
            tabIndex: {
                get: function(a) {
                    var c = a.getAttributeNode("tabindex");
                    return c && c.specified ? parseInt(c.value, 10) : s.test(a.nodeName) || t.test(a.nodeName) && a.href ? 0 : b
                }
            }
        }
    }),
    f.attrHooks.tabindex = f.propHooks.tabIndex,
    x = {
        get: function(a, c) {
            var d, e = f.prop(a, c);
            return e === !0 || typeof e != "boolean" && (d = a.getAttributeNode(c)) && d.nodeValue !== !1 ? c.toLowerCase() : b
        },
        set: function(a, b, c) {
            var d;
            b === !1 ? f.removeAttr(a, c) : (d = f.propFix[c] || c,
            d in a && (a[d] = !0),
            a.setAttribute(c, c.toLowerCase()));
            return c
        }
    },
    v || (y = {
        name: !0,
        id: !0
    },
    w = f.valHooks.button = {
        get: function(a, c) {
            var d;
            d = a.getAttributeNode(c);
            return d && (y[c] ? d.nodeValue !== "" : d.specified) ? d.nodeValue : b
        },
        set: function(a, b, d) {
            var e = a.getAttributeNode(d);
            e || (e = c.createAttribute(d),
            a.setAttributeNode(e));
            return e.nodeValue = b + ""
        }
    },
    f.attrHooks.tabindex.set = w.set,
    f.each(["width", "height"], function(a, b) {
        f.attrHooks[b] = f.extend(f.attrHooks[b], {
            set: function(a, c) {
                if (c === "") {
                    a.setAttribute(b, "auto");
                    return c
                }
            }
        })
    }),
    f.attrHooks.contenteditable = {
        get: w.get,
        set: function(a, b, c) {
            b === "" && (b = "false"),
            w.set(a, b, c)
        }
    }),
    f.support.hrefNormalized || f.each(["href", "src", "width", "height"], function(a, c) {
        f.attrHooks[c] = f.extend(f.attrHooks[c], {
            get: function(a) {
                var d = a.getAttribute(c, 2);
                return d === null ? b : d
            }
        })
    }),
    f.support.style || (f.attrHooks.style = {
        get: function(a) {
            return a.style.cssText.toLowerCase() || b
        },
        set: function(a, b) {
            return a.style.cssText = "" + b
        }
    }),
    f.support.optSelected || (f.propHooks.selected = f.extend(f.propHooks.selected, {
        get: function(a) {
            var b = a.parentNode;
            b && (b.selectedIndex,
            b.parentNode && b.parentNode.selectedIndex);
            return null
        }
    })),
    f.support.enctype || (f.propFix.enctype = "encoding"),
    f.support.checkOn || f.each(["radio", "checkbox"], function() {
        f.valHooks[this] = {
            get: function(a) {
                return a.getAttribute("value") === null ? "on" : a.value
            }
        }
    }),
    f.each(["radio", "checkbox"], function() {
        f.valHooks[this] = f.extend(f.valHooks[this], {
            set: function(a, b) {
                if (f.isArray(b))
                    return a.checked = f.inArray(f(a).val(), b) >= 0
            }
        })
    });
    var z = /^(?:textarea|input|select)$/i
      , A = /^([^\.]*)?(?:\.(.+))?$/
      , B = /\bhover(\.\S+)?\b/
      , C = /^key/
      , D = /^(?:mouse|contextmenu)|click/
      , E = /^(?:focusinfocus|focusoutblur)$/
      , F = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/
      , G = function(a) {
        var b = F.exec(a);
        b && (b[1] = (b[1] || "").toLowerCase(),
        b[3] = b[3] && new RegExp("(?:^|\\s)" + b[3] + "(?:\\s|$)"));
        return b
    }
      , H = function(a, b) {
        var c = a.attributes || {};
        return (!b[1] || a.nodeName.toLowerCase() === b[1]) && (!b[2] || (c.id || {}).value === b[2]) && (!b[3] || b[3].test((c["class"] || {}).value))
    }
      , I = function(a) {
        return f.event.special.hover ? a : a.replace(B, "mouseenter$1 mouseleave$1")
    };
    f.event = {
        add: function(a, c, d, e, g) {
            var h, i, j, k, l, m, n, o, p, q, r, s;
            if (!(a.nodeType === 3 || a.nodeType === 8 || !c || !d || !(h = f._data(a)))) {
                d.handler && (p = d,
                d = p.handler),
                d.guid || (d.guid = f.guid++),
                j = h.events,
                j || (h.events = j = {}),
                i = h.handle,
                i || (h.handle = i = function(a) {
                    return typeof f != "undefined" && (!a || f.event.triggered !== a.type) ? f.event.dispatch.apply(i.elem, arguments) : b
                }
                ,
                i.elem = a),
                c = f.trim(I(c)).split(" ");
                for (k = 0; k < c.length; k++) {
                    l = A.exec(c[k]) || [],
                    m = l[1],
                    n = (l[2] || "").split(".").sort(),
                    s = f.event.special[m] || {},
                    m = (g ? s.delegateType : s.bindType) || m,
                    s = f.event.special[m] || {},
                    o = f.extend({
                        type: m,
                        origType: l[1],
                        data: e,
                        handler: d,
                        guid: d.guid,
                        selector: g,
                        quick: G(g),
                        namespace: n.join(".")
                    }, p),
                    r = j[m];
                    if (!r) {
                        r = j[m] = [],
                        r.delegateCount = 0;
                        if (!s.setup || s.setup.call(a, e, n, i) === !1)
                            a.addEventListener ? a.addEventListener(m, i, !1) : a.attachEvent && a.attachEvent("on" + m, i)
                    }
                    s.add && (s.add.call(a, o),
                    o.handler.guid || (o.handler.guid = d.guid)),
                    g ? r.splice(r.delegateCount++, 0, o) : r.push(o),
                    f.event.global[m] = !0
                }
                a = null
            }
        },
        global: {},
        remove: function(a, b, c, d, e) {
            var g = f.hasData(a) && f._data(a), h, i, j, k, l, m, n, o, p, q, r, s;
            if (!!g && !!(o = g.events)) {
                b = f.trim(I(b || "")).split(" ");
                for (h = 0; h < b.length; h++) {
                    i = A.exec(b[h]) || [],
                    j = k = i[1],
                    l = i[2];
                    if (!j) {
                        for (j in o)
                            f.event.remove(a, j + b[h], c, d, !0);
                        continue
                    }
                    p = f.event.special[j] || {},
                    j = (d ? p.delegateType : p.bindType) || j,
                    r = o[j] || [],
                    m = r.length,
                    l = l ? new RegExp("(^|\\.)" + l.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
                    for (n = 0; n < r.length; n++)
                        s = r[n],
                        (e || k === s.origType) && (!c || c.guid === s.guid) && (!l || l.test(s.namespace)) && (!d || d === s.selector || d === "**" && s.selector) && (r.splice(n--, 1),
                        s.selector && r.delegateCount--,
                        p.remove && p.remove.call(a, s));
                    r.length === 0 && m !== r.length && ((!p.teardown || p.teardown.call(a, l) === !1) && f.removeEvent(a, j, g.handle),
                    delete o[j])
                }
                f.isEmptyObject(o) && (q = g.handle,
                q && (q.elem = null),
                f.removeData(a, ["events", "handle"], !0))
            }
        },
        customEvent: {
            getData: !0,
            setData: !0,
            changeData: !0
        },
        trigger: function(c, d, e, g) {
            if (!e || e.nodeType !== 3 && e.nodeType !== 8) {
                var h = c.type || c, i = [], j, k, l, m, n, o, p, q, r, s;
                if (E.test(h + f.event.triggered))
                    return;
                h.indexOf("!") >= 0 && (h = h.slice(0, -1),
                k = !0),
                h.indexOf(".") >= 0 && (i = h.split("."),
                h = i.shift(),
                i.sort());
                if ((!e || f.event.customEvent[h]) && !f.event.global[h])
                    return;
                c = typeof c == "object" ? c[f.expando] ? c : new f.Event(h,c) : new f.Event(h),
                c.type = h,
                c.isTrigger = !0,
                c.exclusive = k,
                c.namespace = i.join("."),
                c.namespace_re = c.namespace ? new RegExp("(^|\\.)" + i.join("\\.(?:.*\\.)?") + "(\\.|$)") : null,
                o = h.indexOf(":") < 0 ? "on" + h : "";
                if (!e) {
                    j = f.cache;
                    for (l in j)
                        j[l].events && j[l].events[h] && f.event.trigger(c, d, j[l].handle.elem, !0);
                    return
                }
                c.result = b,
                c.target || (c.target = e),
                d = d != null ? f.makeArray(d) : [],
                d.unshift(c),
                p = f.event.special[h] || {};
                if (p.trigger && p.trigger.apply(e, d) === !1)
                    return;
                r = [[e, p.bindType || h]];
                if (!g && !p.noBubble && !f.isWindow(e)) {
                    s = p.delegateType || h,
                    m = E.test(s + h) ? e : e.parentNode,
                    n = null;
                    for (; m; m = m.parentNode)
                        r.push([m, s]),
                        n = m;
                    n && n === e.ownerDocument && r.push([n.defaultView || n.parentWindow || a, s])
                }
                for (l = 0; l < r.length && !c.isPropagationStopped(); l++)
                    m = r[l][0],
                    c.type = r[l][1],
                    q = (f._data(m, "events") || {})[c.type] && f._data(m, "handle"),
                    q && q.apply(m, d),
                    q = o && m[o],
                    q && f.acceptData(m) && q.apply(m, d) === !1 && c.preventDefault();
                c.type = h,
                !g && !c.isDefaultPrevented() && (!p._default || p._default.apply(e.ownerDocument, d) === !1) && (h !== "click" || !f.nodeName(e, "a")) && f.acceptData(e) && o && e[h] && (h !== "focus" && h !== "blur" || c.target.offsetWidth !== 0) && !f.isWindow(e) && (n = e[o],
                n && (e[o] = null),
                f.event.triggered = h,
                e[h](),
                f.event.triggered = b,
                n && (e[o] = n));
                return c.result
            }
        },
        dispatch: function(c) {
            c = f.event.fix(c || a.event);
            var d = (f._data(this, "events") || {})[c.type] || [], e = d.delegateCount, g = [].slice.call(arguments, 0), h = !c.exclusive && !c.namespace, i = [], j, k, l, m, n, o, p, q, r, s, t;
            g[0] = c,
            c.delegateTarget = this;
            if (e && !c.target.disabled && (!c.button || c.type !== "click")) {
                m = f(this),
                m.context = this.ownerDocument || this;
                for (l = c.target; l != this; l = l.parentNode || this) {
                    o = {},
                    q = [],
                    m[0] = l;
                    for (j = 0; j < e; j++)
                        r = d[j],
                        s = r.selector,
                        o[s] === b && (o[s] = r.quick ? H(l, r.quick) : m.is(s)),
                        o[s] && q.push(r);
                    q.length && i.push({
                        elem: l,
                        matches: q
                    })
                }
            }
            d.length > e && i.push({
                elem: this,
                matches: d.slice(e)
            });
            for (j = 0; j < i.length && !c.isPropagationStopped(); j++) {
                p = i[j],
                c.currentTarget = p.elem;
                for (k = 0; k < p.matches.length && !c.isImmediatePropagationStopped(); k++) {
                    r = p.matches[k];
                    if (h || !c.namespace && !r.namespace || c.namespace_re && c.namespace_re.test(r.namespace))
                        c.data = r.data,
                        c.handleObj = r,
                        n = ((f.event.special[r.origType] || {}).handle || r.handler).apply(p.elem, g),
                        n !== b && (c.result = n,
                        n === !1 && (c.preventDefault(),
                        c.stopPropagation()))
                }
            }
            return c.result
        },
        props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(a, b) {
                a.which == null && (a.which = b.charCode != null ? b.charCode : b.keyCode);
                return a
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(a, d) {
                var e, f, g, h = d.button, i = d.fromElement;
                a.pageX == null && d.clientX != null && (e = a.target.ownerDocument || c,
                f = e.documentElement,
                g = e.body,
                a.pageX = d.clientX + (f && f.scrollLeft || g && g.scrollLeft || 0) - (f && f.clientLeft || g && g.clientLeft || 0),
                a.pageY = d.clientY + (f && f.scrollTop || g && g.scrollTop || 0) - (f && f.clientTop || g && g.clientTop || 0)),
                !a.relatedTarget && i && (a.relatedTarget = i === a.target ? d.toElement : i),
                !a.which && h !== b && (a.which = h & 1 ? 1 : h & 2 ? 3 : h & 4 ? 2 : 0);
                return a
            }
        },
        fix: function(a) {
            if (a[f.expando])
                return a;
            var d, e, g = a, h = f.event.fixHooks[a.type] || {}, i = h.props ? this.props.concat(h.props) : this.props;
            a = f.Event(g);
            for (d = i.length; d; )
                e = i[--d],
                a[e] = g[e];
            a.target || (a.target = g.srcElement || c),
            a.target.nodeType === 3 && (a.target = a.target.parentNode),
            a.metaKey === b && (a.metaKey = a.ctrlKey);
            return h.filter ? h.filter(a, g) : a
        },
        special: {
            ready: {
                setup: f.bindReady
            },
            load: {
                noBubble: !0
            },
            focus: {
                delegateType: "focusin"
            },
            blur: {
                delegateType: "focusout"
            },
            beforeunload: {
                setup: function(a, b, c) {
                    f.isWindow(this) && (this.onbeforeunload = c)
                },
                teardown: function(a, b) {
                    this.onbeforeunload === b && (this.onbeforeunload = null)
                }
            }
        },
        simulate: function(a, b, c, d) {
            var e = f.extend(new f.Event, c, {
                type: a,
                isSimulated: !0,
                originalEvent: {}
            });
            d ? f.event.trigger(e, null, b) : f.event.dispatch.call(b, e),
            e.isDefaultPrevented() && c.preventDefault()
        }
    },
    f.event.handle = f.event.dispatch,
    f.removeEvent = c.removeEventListener ? function(a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c, !1)
    }
    : function(a, b, c) {
        a.detachEvent && a.detachEvent("on" + b, c)
    }
    ,
    f.Event = function(a, b) {
        if (!(this instanceof f.Event))
            return new f.Event(a,b);
        a && a.type ? (this.originalEvent = a,
        this.type = a.type,
        this.isDefaultPrevented = a.defaultPrevented || a.returnValue === !1 || a.getPreventDefault && a.getPreventDefault() ? K : J) : this.type = a,
        b && f.extend(this, b),
        this.timeStamp = a && a.timeStamp || f.now(),
        this[f.expando] = !0
    }
    ,
    f.Event.prototype = {
        preventDefault: function() {
            this.isDefaultPrevented = K;
            var a = this.originalEvent;
            !a || (a.preventDefault ? a.preventDefault() : a.returnValue = !1)
        },
        stopPropagation: function() {
            this.isPropagationStopped = K;
            var a = this.originalEvent;
            !a || (a.stopPropagation && a.stopPropagation(),
            a.cancelBubble = !0)
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = K,
            this.stopPropagation()
        },
        isDefaultPrevented: J,
        isPropagationStopped: J,
        isImmediatePropagationStopped: J
    },
    f.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(a, b) {
        f.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function(a) {
                var c = this, d = a.relatedTarget, e = a.handleObj, g = e.selector, h;
                if (!d || d !== c && !f.contains(c, d))
                    a.type = e.origType,
                    h = e.handler.apply(this, arguments),
                    a.type = b;
                return h
            }
        }
    }),
    f.support.submitBubbles || (f.event.special.submit = {
        setup: function() {
            if (f.nodeName(this, "form"))
                return !1;
            f.event.add(this, "click._submit keypress._submit", function(a) {
                var c = a.target
                  , d = f.nodeName(c, "input") || f.nodeName(c, "button") ? c.form : b;
                d && !d._submit_attached && (f.event.add(d, "submit._submit", function(a) {
                    this.parentNode && !a.isTrigger && f.event.simulate("submit", this.parentNode, a, !0)
                }),
                d._submit_attached = !0)
            })
        },
        teardown: function() {
            if (f.nodeName(this, "form"))
                return !1;
            f.event.remove(this, "._submit")
        }
    }),
    f.support.changeBubbles || (f.event.special.change = {
        setup: function() {
            if (z.test(this.nodeName)) {
                if (this.type === "checkbox" || this.type === "radio")
                    f.event.add(this, "propertychange._change", function(a) {
                        a.originalEvent.propertyName === "checked" && (this._just_changed = !0)
                    }),
                    f.event.add(this, "click._change", function(a) {
                        this._just_changed && !a.isTrigger && (this._just_changed = !1,
                        f.event.simulate("change", this, a, !0))
                    });
                return !1
            }
            f.event.add(this, "beforeactivate._change", function(a) {
                var b = a.target;
                z.test(b.nodeName) && !b._change_attached && (f.event.add(b, "change._change", function(a) {
                    this.parentNode && !a.isSimulated && !a.isTrigger && f.event.simulate("change", this.parentNode, a, !0)
                }),
                b._change_attached = !0)
            })
        },
        handle: function(a) {
            var b = a.target;
            if (this !== b || a.isSimulated || a.isTrigger || b.type !== "radio" && b.type !== "checkbox")
                return a.handleObj.handler.apply(this, arguments)
        },
        teardown: function() {
            f.event.remove(this, "._change");
            return z.test(this.nodeName)
        }
    }),
    f.support.focusinBubbles || f.each({
        focus: "focusin",
        blur: "focusout"
    }, function(a, b) {
        var d = 0
          , e = function(a) {
            f.event.simulate(b, a.target, f.event.fix(a), !0)
        };
        f.event.special[b] = {
            setup: function() {
                d++ === 0 && c.addEventListener(a, e, !0)
            },
            teardown: function() {
                --d === 0 && c.removeEventListener(a, e, !0)
            }
        }
    }),
    f.fn.extend({
        on: function(a, c, d, e, g) {
            var h, i;
            if (typeof a == "object") {
                typeof c != "string" && (d = c,
                c = b);
                for (i in a)
                    this.on(i, c, d, a[i], g);
                return this
            }
            d == null && e == null ? (e = c,
            d = c = b) : e == null && (typeof c == "string" ? (e = d,
            d = b) : (e = d,
            d = c,
            c = b));
            if (e === !1)
                e = J;
            else if (!e)
                return this;
            g === 1 && (h = e,
            e = function(a) {
                f().off(a);
                return h.apply(this, arguments)
            }
            ,
            e.guid = h.guid || (h.guid = f.guid++));
            return this.each(function() {
                f.event.add(this, a, e, d, c)
            })
        },
        one: function(a, b, c, d) {
            return this.on.call(this, a, b, c, d, 1)
        },
        off: function(a, c, d) {
            if (a && a.preventDefault && a.handleObj) {
                var e = a.handleObj;
                f(a.delegateTarget).off(e.namespace ? e.type + "." + e.namespace : e.type, e.selector, e.handler);
                return this
            }
            if (typeof a == "object") {
                for (var g in a)
                    this.off(g, c, a[g]);
                return this
            }
            if (c === !1 || typeof c == "function")
                d = c,
                c = b;
            d === !1 && (d = J);
            return this.each(function() {
                f.event.remove(this, a, d, c)
            })
        },
        bind: function(a, b, c) {
            return this.on(a, null, b, c)
        },
        unbind: function(a, b) {
            return this.off(a, null, b)
        },
        live: function(a, b, c) {
            f(this.context).on(a, this.selector, b, c);
            return this
        },
        die: function(a, b) {
            f(this.context).off(a, this.selector || "**", b);
            return this
        },
        delegate: function(a, b, c, d) {
            return this.on(b, a, c, d)
        },
        undelegate: function(a, b, c) {
            return arguments.length == 1 ? this.off(a, "**") : this.off(b, a, c)
        },
        trigger: function(a, b) {
            return this.each(function() {
                f.event.trigger(a, b, this)
            })
        },
        triggerHandler: function(a, b) {
            if (this[0])
                return f.event.trigger(a, b, this[0], !0)
        },
        toggle: function(a) {
            var b = arguments
              , c = a.guid || f.guid++
              , d = 0
              , e = function(c) {
                var e = (f._data(this, "lastToggle" + a.guid) || 0) % d;
                f._data(this, "lastToggle" + a.guid, e + 1),
                c.preventDefault();
                return b[e].apply(this, arguments) || !1
            };
            e.guid = c;
            while (d < b.length)
                b[d++].guid = c;
            return this.click(e)
        },
        hover: function(a, b) {
            return this.mouseenter(a).mouseleave(b || a)
        }
    }),
    f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(a, b) {
        f.fn[b] = function(a, c) {
            c == null && (c = a,
            a = null);
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b)
        }
        ,
        f.attrFn && (f.attrFn[b] = !0),
        C.test(b) && (f.event.fixHooks[b] = f.event.keyHooks),
        D.test(b) && (f.event.fixHooks[b] = f.event.mouseHooks)
    }),
    function() {
        function x(a, b, c, e, f, g) {
            for (var h = 0, i = e.length; h < i; h++) {
                var j = e[h];
                if (j) {
                    var k = !1;
                    j = j[a];
                    while (j) {
                        if (j[d] === c) {
                            k = e[j.sizset];
                            break
                        }
                        if (j.nodeType === 1) {
                            g || (j[d] = c,
                            j.sizset = h);
                            if (typeof b != "string") {
                                if (j === b) {
                                    k = !0;
                                    break
                                }
                            } else if (m.filter(b, [j]).length > 0) {
                                k = j;
                                break
                            }
                        }
                        j = j[a]
                    }
                    e[h] = k
                }
            }
        }
        function w(a, b, c, e, f, g) {
            for (var h = 0, i = e.length; h < i; h++) {
                var j = e[h];
                if (j) {
                    var k = !1;
                    j = j[a];
                    while (j) {
                        if (j[d] === c) {
                            k = e[j.sizset];
                            break
                        }
                        j.nodeType === 1 && !g && (j[d] = c,
                        j.sizset = h);
                        if (j.nodeName.toLowerCase() === b) {
                            k = j;
                            break
                        }
                        j = j[a]
                    }
                    e[h] = k
                }
            }
        }
        var a = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g
          , d = "sizcache" + (Math.random() + "").replace(".", "")
          , e = 0
          , g = Object.prototype.toString
          , h = !1
          , i = !0
          , j = /\\/g
          , k = /\r\n/g
          , l = /\W/;
        [0, 0].sort(function() {
            i = !1;
            return 0
        });
        var m = function(b, d, e, f) {
            e = e || [],
            d = d || c;
            var h = d;
            if (d.nodeType !== 1 && d.nodeType !== 9)
                return [];
            if (!b || typeof b != "string")
                return e;
            var i, j, k, l, n, q, r, t, u = !0, v = m.isXML(d), w = [], x = b;
            do {
                a.exec(""),
                i = a.exec(x);
                if (i) {
                    x = i[3],
                    w.push(i[1]);
                    if (i[2]) {
                        l = i[3];
                        break
                    }
                }
            } while (i);if (w.length > 1 && p.exec(b))
                if (w.length === 2 && o.relative[w[0]])
                    j = y(w[0] + w[1], d, f);
                else {
                    j = o.relative[w[0]] ? [d] : m(w.shift(), d);
                    while (w.length)
                        b = w.shift(),
                        o.relative[b] && (b += w.shift()),
                        j = y(b, j, f)
                }
            else {
                !f && w.length > 1 && d.nodeType === 9 && !v && o.match.ID.test(w[0]) && !o.match.ID.test(w[w.length - 1]) && (n = m.find(w.shift(), d, v),
                d = n.expr ? m.filter(n.expr, n.set)[0] : n.set[0]);
                if (d) {
                    n = f ? {
                        expr: w.pop(),
                        set: s(f)
                    } : m.find(w.pop(), w.length === 1 && (w[0] === "~" || w[0] === "+") && d.parentNode ? d.parentNode : d, v),
                    j = n.expr ? m.filter(n.expr, n.set) : n.set,
                    w.length > 0 ? k = s(j) : u = !1;
                    while (w.length)
                        q = w.pop(),
                        r = q,
                        o.relative[q] ? r = w.pop() : q = "",
                        r == null && (r = d),
                        o.relative[q](k, r, v)
                } else
                    k = w = []
            }
            k || (k = j),
            k || m.error(q || b);
            if (g.call(k) === "[object Array]")
                if (!u)
                    e.push.apply(e, k);
                else if (d && d.nodeType === 1)
                    for (t = 0; k[t] != null; t++)
                        k[t] && (k[t] === !0 || k[t].nodeType === 1 && m.contains(d, k[t])) && e.push(j[t]);
                else
                    for (t = 0; k[t] != null; t++)
                        k[t] && k[t].nodeType === 1 && e.push(j[t]);
            else
                s(k, e);
            l && (m(l, h, e, f),
            m.uniqueSort(e));
            return e
        };
        m.uniqueSort = function(a) {
            if (u) {
                h = i,
                a.sort(u);
                if (h)
                    for (var b = 1; b < a.length; b++)
                        a[b] === a[b - 1] && a.splice(b--, 1)
            }
            return a
        }
        ,
        m.matches = function(a, b) {
            return m(a, null, null, b)
        }
        ,
        m.matchesSelector = function(a, b) {
            return m(b, null, null, [a]).length > 0
        }
        ,
        m.find = function(a, b, c) {
            var d, e, f, g, h, i;
            if (!a)
                return [];
            for (e = 0,
            f = o.order.length; e < f; e++) {
                h = o.order[e];
                if (g = o.leftMatch[h].exec(a)) {
                    i = g[1],
                    g.splice(1, 1);
                    if (i.substr(i.length - 1) !== "\\") {
                        g[1] = (g[1] || "").replace(j, ""),
                        d = o.find[h](g, b, c);
                        if (d != null) {
                            a = a.replace(o.match[h], "");
                            break
                        }
                    }
                }
            }
            d || (d = typeof b.getElementsByTagName != "undefined" ? b.getElementsByTagName("*") : []);
            return {
                set: d,
                expr: a
            }
        }
        ,
        m.filter = function(a, c, d, e) {
            var f, g, h, i, j, k, l, n, p, q = a, r = [], s = c, t = c && c[0] && m.isXML(c[0]);
            while (a && c.length) {
                for (h in o.filter)
                    if ((f = o.leftMatch[h].exec(a)) != null && f[2]) {
                        k = o.filter[h],
                        l = f[1],
                        g = !1,
                        f.splice(1, 1);
                        if (l.substr(l.length - 1) === "\\")
                            continue;
                        s === r && (r = []);
                        if (o.preFilter[h]) {
                            f = o.preFilter[h](f, s, d, r, e, t);
                            if (!f)
                                g = i = !0;
                            else if (f === !0)
                                continue
                        }
                        if (f)
                            for (n = 0; (j = s[n]) != null; n++)
                                j && (i = k(j, f, n, s),
                                p = e ^ i,
                                d && i != null ? p ? g = !0 : s[n] = !1 : p && (r.push(j),
                                g = !0));
                        if (i !== b) {
                            d || (s = r),
                            a = a.replace(o.match[h], "");
                            if (!g)
                                return [];
                            break
                        }
                    }
                if (a === q)
                    if (g == null)
                        m.error(a);
                    else
                        break;
                q = a
            }
            return s
        }
        ,
        m.error = function(a) {
            throw new Error("Syntax error, unrecognized expression: " + a)
        }
        ;
        var n = m.getText = function(a) {
            var b, c, d = a.nodeType, e = "";
            if (d) {
                if (d === 1 || d === 9) {
                    if (typeof a.textContent == "string")
                        return a.textContent;
                    if (typeof a.innerText == "string")
                        return a.innerText.replace(k, "");
                    for (a = a.firstChild; a; a = a.nextSibling)
                        e += n(a)
                } else if (d === 3 || d === 4)
                    return a.nodeValue
            } else
                for (b = 0; c = a[b]; b++)
                    c.nodeType !== 8 && (e += n(c));
            return e
        }
          , o = m.selectors = {
            order: ["ID", "NAME", "TAG"],
            match: {
                ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
                ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
                TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
                CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
                POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
                PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            },
            leftMatch: {},
            attrMap: {
                "class": "className",
                "for": "htmlFor"
            },
            attrHandle: {
                href: function(a) {
                    return a.getAttribute("href")
                },
                type: function(a) {
                    return a.getAttribute("type")
                }
            },
            relative: {
                "+": function(a, b) {
                    var c = typeof b == "string"
                      , d = c && !l.test(b)
                      , e = c && !d;
                    d && (b = b.toLowerCase());
                    for (var f = 0, g = a.length, h; f < g; f++)
                        if (h = a[f]) {
                            while ((h = h.previousSibling) && h.nodeType !== 1)
                                ;
                            a[f] = e || h && h.nodeName.toLowerCase() === b ? h || !1 : h === b
                        }
                    e && m.filter(b, a, !0)
                },
                ">": function(a, b) {
                    var c, d = typeof b == "string", e = 0, f = a.length;
                    if (d && !l.test(b)) {
                        b = b.toLowerCase();
                        for (; e < f; e++) {
                            c = a[e];
                            if (c) {
                                var g = c.parentNode;
                                a[e] = g.nodeName.toLowerCase() === b ? g : !1
                            }
                        }
                    } else {
                        for (; e < f; e++)
                            c = a[e],
                            c && (a[e] = d ? c.parentNode : c.parentNode === b);
                        d && m.filter(b, a, !0)
                    }
                },
                "": function(a, b, c) {
                    var d, f = e++, g = x;
                    typeof b == "string" && !l.test(b) && (b = b.toLowerCase(),
                    d = b,
                    g = w),
                    g("parentNode", b, f, a, d, c)
                },
                "~": function(a, b, c) {
                    var d, f = e++, g = x;
                    typeof b == "string" && !l.test(b) && (b = b.toLowerCase(),
                    d = b,
                    g = w),
                    g("previousSibling", b, f, a, d, c)
                }
            },
            find: {
                ID: function(a, b, c) {
                    if (typeof b.getElementById != "undefined" && !c) {
                        var d = b.getElementById(a[1]);
                        return d && d.parentNode ? [d] : []
                    }
                },
                NAME: function(a, b) {
                    if (typeof b.getElementsByName != "undefined") {
                        var c = []
                          , d = b.getElementsByName(a[1]);
                        for (var e = 0, f = d.length; e < f; e++)
                            d[e].getAttribute("name") === a[1] && c.push(d[e]);
                        return c.length === 0 ? null : c
                    }
                },
                TAG: function(a, b) {
                    if (typeof b.getElementsByTagName != "undefined")
                        return b.getElementsByTagName(a[1])
                }
            },
            preFilter: {
                CLASS: function(a, b, c, d, e, f) {
                    a = " " + a[1].replace(j, "") + " ";
                    if (f)
                        return a;
                    for (var g = 0, h; (h = b[g]) != null; g++)
                        h && (e ^ (h.className && (" " + h.className + " ").replace(/[\t\n\r]/g, " ").indexOf(a) >= 0) ? c || d.push(h) : c && (b[g] = !1));
                    return !1
                },
                ID: function(a) {
                    return a[1].replace(j, "")
                },
                TAG: function(a, b) {
                    return a[1].replace(j, "").toLowerCase()
                },
                CHILD: function(a) {
                    if (a[1] === "nth") {
                        a[2] || m.error(a[0]),
                        a[2] = a[2].replace(/^\+|\s*/g, "");
                        var b = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2] === "even" && "2n" || a[2] === "odd" && "2n+1" || !/\D/.test(a[2]) && "0n+" + a[2] || a[2]);
                        a[2] = b[1] + (b[2] || 1) - 0,
                        a[3] = b[3] - 0
                    } else
                        a[2] && m.error(a[0]);
                    a[0] = e++;
                    return a
                },
                ATTR: function(a, b, c, d, e, f) {
                    var g = a[1] = a[1].replace(j, "");
                    !f && o.attrMap[g] && (a[1] = o.attrMap[g]),
                    a[4] = (a[4] || a[5] || "").replace(j, ""),
                    a[2] === "~=" && (a[4] = " " + a[4] + " ");
                    return a
                },
                PSEUDO: function(b, c, d, e, f) {
                    if (b[1] === "not")
                        if ((a.exec(b[3]) || "").length > 1 || /^\w/.test(b[3]))
                            b[3] = m(b[3], null, null, c);
                        else {
                            var g = m.filter(b[3], c, d, !0 ^ f);
                            d || e.push.apply(e, g);
                            return !1
                        }
                    else if (o.match.POS.test(b[0]) || o.match.CHILD.test(b[0]))
                        return !0;
                    return b
                },
                POS: function(a) {
                    a.unshift(!0);
                    return a
                }
            },
            filters: {
                enabled: function(a) {
                    return a.disabled === !1 && a.type !== "hidden"
                },
                disabled: function(a) {
                    return a.disabled === !0
                },
                checked: function(a) {
                    return a.checked === !0
                },
                selected: function(a) {
                    a.parentNode && a.parentNode.selectedIndex;
                    return a.selected === !0
                },
                parent: function(a) {
                    return !!a.firstChild
                },
                empty: function(a) {
                    return !a.firstChild
                },
                has: function(a, b, c) {
                    return !!m(c[3], a).length
                },
                header: function(a) {
                    return /h\d/i.test(a.nodeName)
                },
                text: function(a) {
                    var b = a.getAttribute("type")
                      , c = a.type;
                    return a.nodeName.toLowerCase() === "input" && "text" === c && (b === c || b === null)
                },
                radio: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "radio" === a.type
                },
                checkbox: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "checkbox" === a.type
                },
                file: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "file" === a.type
                },
                password: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "password" === a.type
                },
                submit: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return (b === "input" || b === "button") && "submit" === a.type
                },
                image: function(a) {
                    return a.nodeName.toLowerCase() === "input" && "image" === a.type
                },
                reset: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return (b === "input" || b === "button") && "reset" === a.type
                },
                button: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return b === "input" && "button" === a.type || b === "button"
                },
                input: function(a) {
                    return /input|select|textarea|button/i.test(a.nodeName)
                },
                focus: function(a) {
                    return a === a.ownerDocument.activeElement
                }
            },
            setFilters: {
                first: function(a, b) {
                    return b === 0
                },
                last: function(a, b, c, d) {
                    return b === d.length - 1
                },
                even: function(a, b) {
                    return b % 2 === 0
                },
                odd: function(a, b) {
                    return b % 2 === 1
                },
                lt: function(a, b, c) {
                    return b < c[3] - 0
                },
                gt: function(a, b, c) {
                    return b > c[3] - 0
                },
                nth: function(a, b, c) {
                    return c[3] - 0 === b
                },
                eq: function(a, b, c) {
                    return c[3] - 0 === b
                }
            },
            filter: {
                PSEUDO: function(a, b, c, d) {
                    var e = b[1]
                      , f = o.filters[e];
                    if (f)
                        return f(a, c, b, d);
                    if (e === "contains")
                        return (a.textContent || a.innerText || n([a]) || "").indexOf(b[3]) >= 0;
                    if (e === "not") {
                        var g = b[3];
                        for (var h = 0, i = g.length; h < i; h++)
                            if (g[h] === a)
                                return !1;
                        return !0
                    }
                    m.error(e)
                },
                CHILD: function(a, b) {
                    var c, e, f, g, h, i, j, k = b[1], l = a;
                    switch (k) {
                    case "only":
                    case "first":
                        while (l = l.previousSibling)
                            if (l.nodeType === 1)
                                return !1;
                        if (k === "first")
                            return !0;
                        l = a;
                    case "last":
                        while (l = l.nextSibling)
                            if (l.nodeType === 1)
                                return !1;
                        return !0;
                    case "nth":
                        c = b[2],
                        e = b[3];
                        if (c === 1 && e === 0)
                            return !0;
                        f = b[0],
                        g = a.parentNode;
                        if (g && (g[d] !== f || !a.nodeIndex)) {
                            i = 0;
                            for (l = g.firstChild; l; l = l.nextSibling)
                                l.nodeType === 1 && (l.nodeIndex = ++i);
                            g[d] = f
                        }
                        j = a.nodeIndex - e;
                        return c === 0 ? j === 0 : j % c === 0 && j / c >= 0
                    }
                },
                ID: function(a, b) {
                    return a.nodeType === 1 && a.getAttribute("id") === b
                },
                TAG: function(a, b) {
                    return b === "*" && a.nodeType === 1 || !!a.nodeName && a.nodeName.toLowerCase() === b
                },
                CLASS: function(a, b) {
                    return (" " + (a.className || a.getAttribute("class")) + " ").indexOf(b) > -1
                },
                ATTR: function(a, b) {
                    var c = b[1]
                      , d = m.attr ? m.attr(a, c) : o.attrHandle[c] ? o.attrHandle[c](a) : a[c] != null ? a[c] : a.getAttribute(c)
                      , e = d + ""
                      , f = b[2]
                      , g = b[4];
                    return d == null ? f === "!=" : !f && m.attr ? d != null : f === "=" ? e === g : f === "*=" ? e.indexOf(g) >= 0 : f === "~=" ? (" " + e + " ").indexOf(g) >= 0 : g ? f === "!=" ? e !== g : f === "^=" ? e.indexOf(g) === 0 : f === "$=" ? e.substr(e.length - g.length) === g : f === "|=" ? e === g || e.substr(0, g.length + 1) === g + "-" : !1 : e && d !== !1
                },
                POS: function(a, b, c, d) {
                    var e = b[2]
                      , f = o.setFilters[e];
                    if (f)
                        return f(a, c, b, d)
                }
            }
        }
          , p = o.match.POS
          , q = function(a, b) {
            return "\\" + (b - 0 + 1)
        };
        for (var r in o.match)
            o.match[r] = new RegExp(o.match[r].source + /(?![^\[]*\])(?![^\(]*\))/.source),
            o.leftMatch[r] = new RegExp(/(^(?:.|\r|\n)*?)/.source + o.match[r].source.replace(/\\(\d+)/g, q));
        var s = function(a, b) {
            a = Array.prototype.slice.call(a, 0);
            if (b) {
                b.push.apply(b, a);
                return b
            }
            return a
        };
        try {
            Array.prototype.slice.call(c.documentElement.childNodes, 0)[0].nodeType
        } catch (t) {
            s = function(a, b) {
                var c = 0
                  , d = b || [];
                if (g.call(a) === "[object Array]")
                    Array.prototype.push.apply(d, a);
                else if (typeof a.length == "number")
                    for (var e = a.length; c < e; c++)
                        d.push(a[c]);
                else
                    for (; a[c]; c++)
                        d.push(a[c]);
                return d
            }
        }
        var u, v;
        c.documentElement.compareDocumentPosition ? u = function(a, b) {
            if (a === b) {
                h = !0;
                return 0
            }
            if (!a.compareDocumentPosition || !b.compareDocumentPosition)
                return a.compareDocumentPosition ? -1 : 1;
            return a.compareDocumentPosition(b) & 4 ? -1 : 1
        }
        : (u = function(a, b) {
            if (a === b) {
                h = !0;
                return 0
            }
            if (a.sourceIndex && b.sourceIndex)
                return a.sourceIndex - b.sourceIndex;
            var c, d, e = [], f = [], g = a.parentNode, i = b.parentNode, j = g;
            if (g === i)
                return v(a, b);
            if (!g)
                return -1;
            if (!i)
                return 1;
            while (j)
                e.unshift(j),
                j = j.parentNode;
            j = i;
            while (j)
                f.unshift(j),
                j = j.parentNode;
            c = e.length,
            d = f.length;
            for (var k = 0; k < c && k < d; k++)
                if (e[k] !== f[k])
                    return v(e[k], f[k]);
            return k === c ? v(a, f[k], -1) : v(e[k], b, 1)
        }
        ,
        v = function(a, b, c) {
            if (a === b)
                return c;
            var d = a.nextSibling;
            while (d) {
                if (d === b)
                    return -1;
                d = d.nextSibling
            }
            return 1
        }
        ),
        function() {
            var a = c.createElement("div")
              , d = "script" + (new Date).getTime()
              , e = c.documentElement;
            a.innerHTML = "<a name='" + d + "'/>",
            e.insertBefore(a, e.firstChild),
            c.getElementById(d) && (o.find.ID = function(a, c, d) {
                if (typeof c.getElementById != "undefined" && !d) {
                    var e = c.getElementById(a[1]);
                    return e ? e.id === a[1] || typeof e.getAttributeNode != "undefined" && e.getAttributeNode("id").nodeValue === a[1] ? [e] : b : []
                }
            }
            ,
            o.filter.ID = function(a, b) {
                var c = typeof a.getAttributeNode != "undefined" && a.getAttributeNode("id");
                return a.nodeType === 1 && c && c.nodeValue === b
            }
            ),
            e.removeChild(a),
            e = a = null
        }(),
        function() {
            var a = c.createElement("div");
            a.appendChild(c.createComment("")),
            a.getElementsByTagName("*").length > 0 && (o.find.TAG = function(a, b) {
                var c = b.getElementsByTagName(a[1]);
                if (a[1] === "*") {
                    var d = [];
                    for (var e = 0; c[e]; e++)
                        c[e].nodeType === 1 && d.push(c[e]);
                    c = d
                }
                return c
            }
            ),
            a.innerHTML = "<a href='#'></a>",
            a.firstChild && typeof a.firstChild.getAttribute != "undefined" && a.firstChild.getAttribute("href") !== "#" && (o.attrHandle.href = function(a) {
                return a.getAttribute("href", 2)
            }
            ),
            a = null
        }(),
        c.querySelectorAll && function() {
            var a = m
              , b = c.createElement("div")
              , d = "__sizzle__";
            b.innerHTML = "<p class='TEST'></p>";
            if (!b.querySelectorAll || b.querySelectorAll(".TEST").length !== 0) {
                m = function(b, e, f, g) {
                    e = e || c;
                    if (!g && !m.isXML(e)) {
                        var h = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);
                        if (h && (e.nodeType === 1 || e.nodeType === 9)) {
                            if (h[1])
                                return s(e.getElementsByTagName(b), f);
                            if (h[2] && o.find.CLASS && e.getElementsByClassName)
                                return s(e.getElementsByClassName(h[2]), f)
                        }
                        if (e.nodeType === 9) {
                            if (b === "body" && e.body)
                                return s([e.body], f);
                            if (h && h[3]) {
                                var i = e.getElementById(h[3]);
                                if (!i || !i.parentNode)
                                    return s([], f);
                                if (i.id === h[3])
                                    return s([i], f)
                            }
                            try {
                                return s(e.querySelectorAll(b), f)
                            } catch (j) {}
                        } else if (e.nodeType === 1 && e.nodeName.toLowerCase() !== "object") {
                            var k = e
                              , l = e.getAttribute("id")
                              , n = l || d
                              , p = e.parentNode
                              , q = /^\s*[+~]/.test(b);
                            l ? n = n.replace(/'/g, "\\$&") : e.setAttribute("id", n),
                            q && p && (e = e.parentNode);
                            try {
                                if (!q || p)
                                    return s(e.querySelectorAll("[id='" + n + "'] " + b), f)
                            } catch (r) {} finally {
                                l || k.removeAttribute("id")
                            }
                        }
                    }
                    return a(b, e, f, g)
                }
                ;
                for (var e in a)
                    m[e] = a[e];
                b = null
            }
        }(),
        function() {
            var a = c.documentElement
              , b = a.matchesSelector || a.mozMatchesSelector || a.webkitMatchesSelector || a.msMatchesSelector;
            if (b) {
                var d = !b.call(c.createElement("div"), "div")
                  , e = !1;
                try {
                    b.call(c.documentElement, "[test!='']:sizzle")
                } catch (f) {
                    e = !0
                }
                m.matchesSelector = function(a, c) {
                    c = c.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                    if (!m.isXML(a))
                        try {
                            if (e || !o.match.PSEUDO.test(c) && !/!=/.test(c)) {
                                var f = b.call(a, c);
                                if (f || !d || a.document && a.document.nodeType !== 11)
                                    return f
                            }
                        } catch (g) {}
                    return m(c, null, null, [a]).length > 0
                }
            }
        }(),
        function() {
            var a = c.createElement("div");
            a.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!!a.getElementsByClassName && a.getElementsByClassName("e").length !== 0) {
                a.lastChild.className = "e";
                if (a.getElementsByClassName("e").length === 1)
                    return;
                o.order.splice(1, 0, "CLASS"),
                o.find.CLASS = function(a, b, c) {
                    if (typeof b.getElementsByClassName != "undefined" && !c)
                        return b.getElementsByClassName(a[1])
                }
                ,
                a = null
            }
        }(),
        c.documentElement.contains ? m.contains = function(a, b) {
            return a !== b && (a.contains ? a.contains(b) : !0)
        }
        : c.documentElement.compareDocumentPosition ? m.contains = function(a, b) {
            return !!(a.compareDocumentPosition(b) & 16)
        }
        : m.contains = function() {
            return !1
        }
        ,
        m.isXML = function(a) {
            var b = (a ? a.ownerDocument || a : 0).documentElement;
            return b ? b.nodeName !== "HTML" : !1
        }
        ;
        var y = function(a, b, c) {
            var d, e = [], f = "", g = b.nodeType ? [b] : b;
            while (d = o.match.PSEUDO.exec(a))
                f += d[0],
                a = a.replace(o.match.PSEUDO, "");
            a = o.relative[a] ? a + "*" : a;
            for (var h = 0, i = g.length; h < i; h++)
                m(a, g[h], e, c);
            return m.filter(f, e)
        };
        m.attr = f.attr,
        m.selectors.attrMap = {},
        f.find = m,
        f.expr = m.selectors,
        f.expr[":"] = f.expr.filters,
        f.unique = m.uniqueSort,
        f.text = m.getText,
        f.isXMLDoc = m.isXML,
        f.contains = m.contains
    }();
    var L = /Until$/
      , M = /^(?:parents|prevUntil|prevAll)/
      , N = /,/
      , O = /^.[^:#\[\.,]*$/
      , P = Array.prototype.slice
      , Q = f.expr.match.POS
      , R = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    f.fn.extend({
        find: function(a) {
            var b = this, c, d;
            if (typeof a != "string")
                return f(a).filter(function() {
                    for (c = 0,
                    d = b.length; c < d; c++)
                        if (f.contains(b[c], this))
                            return !0
                });
            var e = this.pushStack("", "find", a), g, h, i;
            for (c = 0,
            d = this.length; c < d; c++) {
                g = e.length,
                f.find(a, this[c], e);
                if (c > 0)
                    for (h = g; h < e.length; h++)
                        for (i = 0; i < g; i++)
                            if (e[i] === e[h]) {
                                e.splice(h--, 1);
                                break
                            }
            }
            return e
        },
        has: function(a) {
            var b = f(a);
            return this.filter(function() {
                for (var a = 0, c = b.length; a < c; a++)
                    if (f.contains(this, b[a]))
                        return !0
            })
        },
        not: function(a) {
            return this.pushStack(T(this, a, !1), "not", a)
        },
        filter: function(a) {
            return this.pushStack(T(this, a, !0), "filter", a)
        },
        is: function(a) {
            return !!a && (typeof a == "string" ? Q.test(a) ? f(a, this.context).index(this[0]) >= 0 : f.filter(a, this).length > 0 : this.filter(a).length > 0)
        },
        closest: function(a, b) {
            var c = [], d, e, g = this[0];
            if (f.isArray(a)) {
                var h = 1;
                while (g && g.ownerDocument && g !== b) {
                    for (d = 0; d < a.length; d++)
                        f(g).is(a[d]) && c.push({
                            selector: a[d],
                            elem: g,
                            level: h
                        });
                    g = g.parentNode,
                    h++
                }
                return c
            }
            var i = Q.test(a) || typeof a != "string" ? f(a, b || this.context) : 0;
            for (d = 0,
            e = this.length; d < e; d++) {
                g = this[d];
                while (g) {
                    if (i ? i.index(g) > -1 : f.find.matchesSelector(g, a)) {
                        c.push(g);
                        break
                    }
                    g = g.parentNode;
                    if (!g || !g.ownerDocument || g === b || g.nodeType === 11)
                        break
                }
            }
            c = c.length > 1 ? f.unique(c) : c;
            return this.pushStack(c, "closest", a)
        },
        index: function(a) {
            if (!a)
                return this[0] && this[0].parentNode ? this.prevAll().length : -1;
            if (typeof a == "string")
                return f.inArray(this[0], f(a));
            return f.inArray(a.jquery ? a[0] : a, this)
        },
        add: function(a, b) {
            var c = typeof a == "string" ? f(a, b) : f.makeArray(a && a.nodeType ? [a] : a)
              , d = f.merge(this.get(), c);
            return this.pushStack(S(c[0]) || S(d[0]) ? d : f.unique(d))
        },
        andSelf: function() {
            return this.add(this.prevObject)
        }
    }),
    f.each({
        parent: function(a) {
            var b = a.parentNode;
            return b && b.nodeType !== 11 ? b : null
        },
        parents: function(a) {
            return f.dir(a, "parentNode")
        },
        parentsUntil: function(a, b, c) {
            return f.dir(a, "parentNode", c)
        },
        next: function(a) {
            return f.nth(a, 2, "nextSibling")
        },
        prev: function(a) {
            return f.nth(a, 2, "previousSibling")
        },
        nextAll: function(a) {
            return f.dir(a, "nextSibling")
        },
        prevAll: function(a) {
            return f.dir(a, "previousSibling")
        },
        nextUntil: function(a, b, c) {
            return f.dir(a, "nextSibling", c)
        },
        prevUntil: function(a, b, c) {
            return f.dir(a, "previousSibling", c)
        },
        siblings: function(a) {
            return f.sibling(a.parentNode.firstChild, a)
        },
        children: function(a) {
            return f.sibling(a.firstChild)
        },
        contents: function(a) {
            return f.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : f.makeArray(a.childNodes)
        }
    }, function(a, b) {
        f.fn[a] = function(c, d) {
            var e = f.map(this, b, c);
            L.test(a) || (d = c),
            d && typeof d == "string" && (e = f.filter(d, e)),
            e = this.length > 1 && !R[a] ? f.unique(e) : e,
            (this.length > 1 || N.test(d)) && M.test(a) && (e = e.reverse());
            return this.pushStack(e, a, P.call(arguments).join(","))
        }
    }),
    f.extend({
        filter: function(a, b, c) {
            c && (a = ":not(" + a + ")");
            return b.length === 1 ? f.find.matchesSelector(b[0], a) ? [b[0]] : [] : f.find.matches(a, b)
        },
        dir: function(a, c, d) {
            var e = []
              , g = a[c];
            while (g && g.nodeType !== 9 && (d === b || g.nodeType !== 1 || !f(g).is(d)))
                g.nodeType === 1 && e.push(g),
                g = g[c];
            return e
        },
        nth: function(a, b, c, d) {
            b = b || 1;
            var e = 0;
            for (; a; a = a[c])
                if (a.nodeType === 1 && ++e === b)
                    break;
            return a
        },
        sibling: function(a, b) {
            var c = [];
            for (; a; a = a.nextSibling)
                a.nodeType === 1 && a !== b && c.push(a);
            return c
        }
    });
    var V = "abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video"
      , W = / jQuery\d+="(?:\d+|null)"/g
      , X = /^\s+/
      , Y = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig
      , Z = /<([\w:]+)/
      , $ = /<tbody/i
      , _ = /<|&#?\w+;/
      , ba = /<(?:script|style)/i
      , bb = /<(?:script|object|embed|option|style)/i
      , bc = new RegExp("<(?:" + V + ")","i")
      , bd = /checked\s*(?:[^=]|=\s*.checked.)/i
      , be = /\/(java|ecma)script/i
      , bf = /^\s*<!(?:\[CDATA\[|\-\-)/
      , bg = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        legend: [1, "<fieldset>", "</fieldset>"],
        thead: [1, "<table>", "</table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
        area: [1, "<map>", "</map>"],
        _default: [0, "", ""]
    }
      , bh = U(c);
    bg.optgroup = bg.option,
    bg.tbody = bg.tfoot = bg.colgroup = bg.caption = bg.thead,
    bg.th = bg.td,
    f.support.htmlSerialize || (bg._default = [1, "div<div>", "</div>"]),
    f.fn.extend({
        text: function(a) {
            if (f.isFunction(a))
                return this.each(function(b) {
                    var c = f(this);
                    c.text(a.call(this, b, c.text()))
                });
            if (typeof a != "object" && a !== b)
                return this.empty().append((this[0] && this[0].ownerDocument || c).createTextNode(a));
            return f.text(this)
        },
        wrapAll: function(a) {
            if (f.isFunction(a))
                return this.each(function(b) {
                    f(this).wrapAll(a.call(this, b))
                });
            if (this[0]) {
                var b = f(a, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && b.insertBefore(this[0]),
                b.map(function() {
                    var a = this;
                    while (a.firstChild && a.firstChild.nodeType === 1)
                        a = a.firstChild;
                    return a
                }).append(this)
            }
            return this
        },
        wrapInner: function(a) {
            if (f.isFunction(a))
                return this.each(function(b) {
                    f(this).wrapInner(a.call(this, b))
                });
            return this.each(function() {
                var b = f(this)
                  , c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a)
            })
        },
        wrap: function(a) {
            var b = f.isFunction(a);
            return this.each(function(c) {
                f(this).wrapAll(b ? a.call(this, c) : a)
            })
        },
        unwrap: function() {
            return this.parent().each(function() {
                f.nodeName(this, "body") || f(this).replaceWith(this.childNodes)
            }).end()
        },
        append: function() {
            return this.domManip(arguments, !0, function(a) {
                this.nodeType === 1 && this.appendChild(a)
            })
        },
        prepend: function() {
            return this.domManip(arguments, !0, function(a) {
                this.nodeType === 1 && this.insertBefore(a, this.firstChild)
            })
        },
        before: function() {
            if (this[0] && this[0].parentNode)
                return this.domManip(arguments, !1, function(a) {
                    this.parentNode.insertBefore(a, this)
                });
            if (arguments.length) {
                var a = f.clean(arguments);
                a.push.apply(a, this.toArray());
                return this.pushStack(a, "before", arguments)
            }
        },
        after: function() {
            if (this[0] && this[0].parentNode)
                return this.domManip(arguments, !1, function(a) {
                    this.parentNode.insertBefore(a, this.nextSibling)
                });
            if (arguments.length) {
                var a = this.pushStack(this, "after", arguments);
                a.push.apply(a, f.clean(arguments));
                return a
            }
        },
        remove: function(a, b) {
            for (var c = 0, d; (d = this[c]) != null; c++)
                if (!a || f.filter(a, [d]).length)
                    !b && d.nodeType === 1 && (f.cleanData(d.getElementsByTagName("*")),
                    f.cleanData([d])),
                    d.parentNode && d.parentNode.removeChild(d);
            return this
        },
        empty: function() {
            for (var a = 0, b; (b = this[a]) != null; a++) {
                b.nodeType === 1 && f.cleanData(b.getElementsByTagName("*"));
                while (b.firstChild)
                    b.removeChild(b.firstChild)
            }
            return this
        },
        clone: function(a, b) {
            a = a == null ? !1 : a,
            b = b == null ? a : b;
            return this.map(function() {
                return f.clone(this, a, b)
            })
        },
        html: function(a) {
            if (a === b)
                return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(W, "") : null;
            if (typeof a == "string" && !ba.test(a) && (f.support.leadingWhitespace || !X.test(a)) && !bg[(Z.exec(a) || ["", ""])[1].toLowerCase()]) {
                a = a.replace(Y, "<$1></$2>");
                try {
                    for (var c = 0, d = this.length; c < d; c++)
                        this[c].nodeType === 1 && (f.cleanData(this[c].getElementsByTagName("*")),
                        this[c].innerHTML = a)
                } catch (e) {
                    this.empty().append(a)
                }
            } else
                f.isFunction(a) ? this.each(function(b) {
                    var c = f(this);
                    c.html(a.call(this, b, c.html()))
                }) : this.empty().append(a);
            return this
        },
        replaceWith: function(a) {
            if (this[0] && this[0].parentNode) {
                if (f.isFunction(a))
                    return this.each(function(b) {
                        var c = f(this)
                          , d = c.html();
                        c.replaceWith(a.call(this, b, d))
                    });
                typeof a != "string" && (a = f(a).detach());
                return this.each(function() {
                    var b = this.nextSibling
                      , c = this.parentNode;
                    f(this).remove(),
                    b ? f(b).before(a) : f(c).append(a)
                })
            }
            return this.length ? this.pushStack(f(f.isFunction(a) ? a() : a), "replaceWith", a) : this
        },
        detach: function(a) {
            return this.remove(a, !0)
        },
        domManip: function(a, c, d) {
            var e, g, h, i, j = a[0], k = [];
            if (!f.support.checkClone && arguments.length === 3 && typeof j == "string" && bd.test(j))
                return this.each(function() {
                    f(this).domManip(a, c, d, !0)
                });
            if (f.isFunction(j))
                return this.each(function(e) {
                    var g = f(this);
                    a[0] = j.call(this, e, c ? g.html() : b),
                    g.domManip(a, c, d)
                });
            if (this[0]) {
                i = j && j.parentNode,
                f.support.parentNode && i && i.nodeType === 11 && i.childNodes.length === this.length ? e = {
                    fragment: i
                } : e = f.buildFragment(a, this, k),
                h = e.fragment,
                h.childNodes.length === 1 ? g = h = h.firstChild : g = h.firstChild;
                if (g) {
                    c = c && f.nodeName(g, "tr");
                    for (var l = 0, m = this.length, n = m - 1; l < m; l++)
                        d.call(c ? bi(this[l], g) : this[l], e.cacheable || m > 1 && l < n ? f.clone(h, !0, !0) : h)
                }
                k.length && f.each(k, bp)
            }
            return this
        }
    }),
    f.buildFragment = function(a, b, d) {
        var e, g, h, i, j = a[0];
        b && b[0] && (i = b[0].ownerDocument || b[0]),
        i.createDocumentFragment || (i = c),
        a.length === 1 && typeof j == "string" && j.length < 512 && i === c && j.charAt(0) === "<" && !bb.test(j) && (f.support.checkClone || !bd.test(j)) && (f.support.html5Clone || !bc.test(j)) && (g = !0,
        h = f.fragments[j],
        h && h !== 1 && (e = h)),
        e || (e = i.createDocumentFragment(),
        f.clean(a, i, e, d)),
        g && (f.fragments[j] = h ? e : 1);
        return {
            fragment: e,
            cacheable: g
        }
    }
    ,
    f.fragments = {},
    f.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(a, b) {
        f.fn[a] = function(c) {
            var d = []
              , e = f(c)
              , g = this.length === 1 && this[0].parentNode;
            if (g && g.nodeType === 11 && g.childNodes.length === 1 && e.length === 1) {
                e[b](this[0]);
                return this
            }
            for (var h = 0, i = e.length; h < i; h++) {
                var j = (h > 0 ? this.clone(!0) : this).get();
                f(e[h])[b](j),
                d = d.concat(j)
            }
            return this.pushStack(d, a, e.selector)
        }
    }),
    f.extend({
        clone: function(a, b, c) {
            var d, e, g, h = f.support.html5Clone || !bc.test("<" + a.nodeName) ? a.cloneNode(!0) : bo(a);
            if ((!f.support.noCloneEvent || !f.support.noCloneChecked) && (a.nodeType === 1 || a.nodeType === 11) && !f.isXMLDoc(a)) {
                bk(a, h),
                d = bl(a),
                e = bl(h);
                for (g = 0; d[g]; ++g)
                    e[g] && bk(d[g], e[g])
            }
            if (b) {
                bj(a, h);
                if (c) {
                    d = bl(a),
                    e = bl(h);
                    for (g = 0; d[g]; ++g)
                        bj(d[g], e[g])
                }
            }
            d = e = null;
            return h
        },
        clean: function(a, b, d, e) {
            var g;
            b = b || c,
            typeof b.createElement == "undefined" && (b = b.ownerDocument || b[0] && b[0].ownerDocument || c);
            var h = [], i;
            for (var j = 0, k; (k = a[j]) != null; j++) {
                typeof k == "number" && (k += "");
                if (!k)
                    continue;
                if (typeof k == "string")
                    if (!_.test(k))
                        k = b.createTextNode(k);
                    else {
                        k = k.replace(Y, "<$1></$2>");
                        var l = (Z.exec(k) || ["", ""])[1].toLowerCase()
                          , m = bg[l] || bg._default
                          , n = m[0]
                          , o = b.createElement("div");
                        b === c ? bh.appendChild(o) : U(b).appendChild(o),
                        o.innerHTML = m[1] + k + m[2];
                        while (n--)
                            o = o.lastChild;
                        if (!f.support.tbody) {
                            var p = $.test(k)
                              , q = l === "table" && !p ? o.firstChild && o.firstChild.childNodes : m[1] === "<table>" && !p ? o.childNodes : [];
                            for (i = q.length - 1; i >= 0; --i)
                                f.nodeName(q[i], "tbody") && !q[i].childNodes.length && q[i].parentNode.removeChild(q[i])
                        }
                        !f.support.leadingWhitespace && X.test(k) && o.insertBefore(b.createTextNode(X.exec(k)[0]), o.firstChild),
                        k = o.childNodes
                    }
                var r;
                if (!f.support.appendChecked)
                    if (k[0] && typeof (r = k.length) == "number")
                        for (i = 0; i < r; i++)
                            bn(k[i]);
                    else
                        bn(k);
                k.nodeType ? h.push(k) : h = f.merge(h, k)
            }
            if (d) {
                g = function(a) {
                    return !a.type || be.test(a.type)
                }
                ;
                for (j = 0; h[j]; j++)
                    if (e && f.nodeName(h[j], "script") && (!h[j].type || h[j].type.toLowerCase() === "text/javascript"))
                        e.push(h[j].parentNode ? h[j].parentNode.removeChild(h[j]) : h[j]);
                    else {
                        if (h[j].nodeType === 1) {
                            var s = f.grep(h[j].getElementsByTagName("script"), g);
                            h.splice.apply(h, [j + 1, 0].concat(s))
                        }
                        d.appendChild(h[j])
                    }
            }
            return h
        },
        cleanData: function(a) {
            var b, c, d = f.cache, e = f.event.special, g = f.support.deleteExpando;
            for (var h = 0, i; (i = a[h]) != null; h++) {
                if (i.nodeName && f.noData[i.nodeName.toLowerCase()])
                    continue;
                c = i[f.expando];
                if (c) {
                    b = d[c];
                    if (b && b.events) {
                        for (var j in b.events)
                            e[j] ? f.event.remove(i, j) : f.removeEvent(i, j, b.handle);
                        b.handle && (b.handle.elem = null)
                    }
                    g ? delete i[f.expando] : i.removeAttribute && i.removeAttribute(f.expando),
                    delete d[c]
                }
            }
        }
    });
    var bq = /alpha\([^)]*\)/i, br = /opacity=([^)]*)/, bs = /([A-Z]|^ms)/g, bt = /^-?\d+(?:px)?$/i, bu = /^-?\d/, bv = /^([\-+])=([\-+.\de]+)/, bw = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, bx = ["Left", "Right"], by = ["Top", "Bottom"], bz, bA, bB;
    f.fn.css = function(a, c) {
        if (arguments.length === 2 && c === b)
            return this;
        return f.access(this, a, c, !0, function(a, c, d) {
            return d !== b ? f.style(a, c, d) : f.css(a, c)
        })
    }
    ,
    f.extend({
        cssHooks: {
            opacity: {
                get: function(a, b) {
                    if (b) {
                        var c = bz(a, "opacity", "opacity");
                        return c === "" ? "1" : c
                    }
                    return a.style.opacity
                }
            }
        },
        cssNumber: {
            fillOpacity: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            "float": f.support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(a, c, d, e) {
            if (!!a && a.nodeType !== 3 && a.nodeType !== 8 && !!a.style) {
                var g, h, i = f.camelCase(c), j = a.style, k = f.cssHooks[i];
                c = f.cssProps[i] || i;
                if (d === b) {
                    if (k && "get"in k && (g = k.get(a, !1, e)) !== b)
                        return g;
                    return j[c]
                }
                h = typeof d,
                h === "string" && (g = bv.exec(d)) && (d = +(g[1] + 1) * +g[2] + parseFloat(f.css(a, c)),
                h = "number");
                if (d == null || h === "number" && isNaN(d))
                    return;
                h === "number" && !f.cssNumber[i] && (d += "px");
                if (!k || !("set"in k) || (d = k.set(a, d)) !== b)
                    try {
                        j[c] = d
                    } catch (l) {}
            }
        },
        css: function(a, c, d) {
            var e, g;
            c = f.camelCase(c),
            g = f.cssHooks[c],
            c = f.cssProps[c] || c,
            c === "cssFloat" && (c = "float");
            if (g && "get"in g && (e = g.get(a, !0, d)) !== b)
                return e;
            if (bz)
                return bz(a, c)
        },
        swap: function(a, b, c) {
            var d = {};
            for (var e in b)
                d[e] = a.style[e],
                a.style[e] = b[e];
            c.call(a);
            for (e in b)
                a.style[e] = d[e]
        }
    }),
    f.curCSS = f.css,
    f.each(["height", "width"], function(a, b) {
        f.cssHooks[b] = {
            get: function(a, c, d) {
                var e;
                if (c) {
                    if (a.offsetWidth !== 0)
                        return bC(a, b, d);
                    f.swap(a, bw, function() {
                        e = bC(a, b, d)
                    });
                    return e
                }
            },
            set: function(a, b) {
                if (!bt.test(b))
                    return b;
                b = parseFloat(b);
                if (b >= 0)
                    return b + "px"
            }
        }
    }),
    f.support.opacity || (f.cssHooks.opacity = {
        get: function(a, b) {
            return br.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? parseFloat(RegExp.$1) / 100 + "" : b ? "1" : ""
        },
        set: function(a, b) {
            var c = a.style
              , d = a.currentStyle
              , e = f.isNumeric(b) ? "alpha(opacity=" + b * 100 + ")" : ""
              , g = d && d.filter || c.filter || "";
            c.zoom = 1;
            if (b >= 1 && f.trim(g.replace(bq, "")) === "") {
                c.removeAttribute("filter");
                if (d && !d.filter)
                    return
            }
            c.filter = bq.test(g) ? g.replace(bq, e) : g + " " + e
        }
    }),
    f(function() {
        f.support.reliableMarginRight || (f.cssHooks.marginRight = {
            get: function(a, b) {
                var c;
                f.swap(a, {
                    display: "inline-block"
                }, function() {
                    b ? c = bz(a, "margin-right", "marginRight") : c = a.style.marginRight
                });
                return c
            }
        })
    }),
    c.defaultView && c.defaultView.getComputedStyle && (bA = function(a, b) {
        var c, d, e;
        b = b.replace(bs, "-$1").toLowerCase(),
        (d = a.ownerDocument.defaultView) && (e = d.getComputedStyle(a, null)) && (c = e.getPropertyValue(b),
        c === "" && !f.contains(a.ownerDocument.documentElement, a) && (c = f.style(a, b)));
        return c
    }
    ),
    c.documentElement.currentStyle && (bB = function(a, b) {
        var c, d, e, f = a.currentStyle && a.currentStyle[b], g = a.style;
        f === null && g && (e = g[b]) && (f = e),
        !bt.test(f) && bu.test(f) && (c = g.left,
        d = a.runtimeStyle && a.runtimeStyle.left,
        d && (a.runtimeStyle.left = a.currentStyle.left),
        g.left = b === "fontSize" ? "1em" : f || 0,
        f = g.pixelLeft + "px",
        g.left = c,
        d && (a.runtimeStyle.left = d));
        return f === "" ? "auto" : f
    }
    ),
    bz = bA || bB,
    f.expr && f.expr.filters && (f.expr.filters.hidden = function(a) {
        var b = a.offsetWidth
          , c = a.offsetHeight;
        return b === 0 && c === 0 || !f.support.reliableHiddenOffsets && (a.style && a.style.display || f.css(a, "display")) === "none"
    }
    ,
    f.expr.filters.visible = function(a) {
        return !f.expr.filters.hidden(a)
    }
    );
    var bD = /%20/g, bE = /\[\]$/, bF = /\r?\n/g, bG = /#.*$/, bH = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, bI = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i, bJ = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/, bK = /^(?:GET|HEAD)$/, bL = /^\/\//, bM = /\?/, bN = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, bO = /^(?:select|textarea)/i, bP = /\s+/, bQ = /([?&])_=[^&]*/, bR = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/, bS = f.fn.load, bT = {}, bU = {}, bV, bW, bX = ["*/"] + ["*"];
    try {
        bV = e.href
    } catch (bY) {
        bV = c.createElement("a"),
        bV.href = "",
        bV = bV.href
    }
    bW = bR.exec(bV.toLowerCase()) || [],
    f.fn.extend({
        load: function(a, c, d) {
            if (typeof a != "string" && bS)
                return bS.apply(this, arguments);
            if (!this.length)
                return this;
            var e = a.indexOf(" ");
            if (e >= 0) {
                var g = a.slice(e, a.length);
                a = a.slice(0, e)
            }
            var h = "GET";
            c && (f.isFunction(c) ? (d = c,
            c = b) : typeof c == "object" && (c = f.param(c, f.ajaxSettings.traditional),
            h = "POST"));
            var i = this;
            f.ajax({
                url: a,
                type: h,
                dataType: "html",
                data: c,
                complete: function(a, b, c) {
                    c = a.responseText,
                    a.isResolved() && (a.done(function(a) {
                        c = a
                    }),
                    i.html(g ? f("<div>").append(c.replace(bN, "")).find(g) : c)),
                    d && i.each(d, [c, b, a])
                }
            });
            return this
        },
        serialize: function() {
            return f.param(this.serializeArray())
        },
        serializeArray: function() {
            return this.map(function() {
                return this.elements ? f.makeArray(this.elements) : this
            }).filter(function() {
                return this.name && !this.disabled && (this.checked || bO.test(this.nodeName) || bI.test(this.type))
            }).map(function(a, b) {
                var c = f(this).val();
                return c == null ? null : f.isArray(c) ? f.map(c, function(a, c) {
                    return {
                        name: b.name,
                        value: a.replace(bF, "\r\n")
                    }
                }) : {
                    name: b.name,
                    value: c.replace(bF, "\r\n")
                }
            }).get()
        }
    }),
    f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(a, b) {
        f.fn[b] = function(a) {
            return this.on(b, a)
        }
    }),
    f.each(["get", "post"], function(a, c) {
        f[c] = function(a, d, e, g) {
            f.isFunction(d) && (g = g || e,
            e = d,
            d = b);
            return f.ajax({
                type: c,
                url: a,
                data: d,
                success: e,
                dataType: g
            })
        }
    }),
    f.extend({
        getScript: function(a, c) {
            return f.get(a, b, c, "script")
        },
        getJSON: function(a, b, c) {
            return f.get(a, b, c, "json")
        },
        ajaxSetup: function(a, b) {
            b ? b_(a, f.ajaxSettings) : (b = a,
            a = f.ajaxSettings),
            b_(a, b);
            return a
        },
        ajaxSettings: {
            url: bV,
            isLocal: bJ.test(bW[1]),
            global: !0,
            type: "GET",
            contentType: "application/x-www-form-urlencoded",
            processData: !0,
            async: !0,
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                text: "text/plain",
                json: "application/json, text/javascript",
                "*": bX
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },
            converters: {
                "* text": a.String,
                "text html": !0,
                "text json": f.parseJSON,
                "text xml": f.parseXML
            },
            flatOptions: {
                context: !0,
                url: !0
            }
        },
        ajaxPrefilter: bZ(bT),
        ajaxTransport: bZ(bU),
        ajax: function(a, c) {
            function w(a, c, l, m) {
                if (s !== 2) {
                    s = 2,
                    q && clearTimeout(q),
                    p = b,
                    n = m || "",
                    v.readyState = a > 0 ? 4 : 0;
                    var o, r, u, w = c, x = l ? cb(d, v, l) : b, y, z;
                    if (a >= 200 && a < 300 || a === 304) {
                        if (d.ifModified) {
                            if (y = v.getResponseHeader("Last-Modified"))
                                f.lastModified[k] = y;
                            if (z = v.getResponseHeader("Etag"))
                                f.etag[k] = z
                        }
                        if (a === 304)
                            w = "notmodified",
                            o = !0;
                        else
                            try {
                                r = cc(d, x),
                                w = "success",
                                o = !0
                            } catch (A) {
                                w = "parsererror",
                                u = A
                            }
                    } else {
                        u = w;
                        if (!w || a)
                            w = "error",
                            a < 0 && (a = 0)
                    }
                    v.status = a,
                    v.statusText = "" + (c || w),
                    o ? h.resolveWith(e, [r, w, v]) : h.rejectWith(e, [v, w, u]),
                    v.statusCode(j),
                    j = b,
                    t && g.trigger("ajax" + (o ? "Success" : "Error"), [v, d, o ? r : u]),
                    i.fireWith(e, [v, w]),
                    t && (g.trigger("ajaxComplete", [v, d]),
                    --f.active || f.event.trigger("ajaxStop"))
                }
            }
            typeof a == "object" && (c = a,
            a = b),
            c = c || {};
            var d = f.ajaxSetup({}, c), e = d.context || d, g = e !== d && (e.nodeType || e instanceof f) ? f(e) : f.event, h = f.Deferred(), i = f.Callbacks("once memory"), j = d.statusCode || {}, k, l = {}, m = {}, n, o, p, q, r, s = 0, t, u, v = {
                readyState: 0,
                setRequestHeader: function(a, b) {
                    if (!s) {
                        var c = a.toLowerCase();
                        a = m[c] = m[c] || a,
                        l[a] = b
                    }
                    return this
                },
                getAllResponseHeaders: function() {
                    return s === 2 ? n : null
                },
                getResponseHeader: function(a) {
                    var c;
                    if (s === 2) {
                        if (!o) {
                            o = {};
                            while (c = bH.exec(n))
                                o[c[1].toLowerCase()] = c[2]
                        }
                        c = o[a.toLowerCase()]
                    }
                    return c === b ? null : c
                },
                overrideMimeType: function(a) {
                    s || (d.mimeType = a);
                    return this
                },
                abort: function(a) {
                    a = a || "abort",
                    p && p.abort(a),
                    w(0, a);
                    return this
                }
            };
            h.promise(v),
            v.success = v.done,
            v.error = v.fail,
            v.complete = i.add,
            v.statusCode = function(a) {
                if (a) {
                    var b;
                    if (s < 2)
                        for (b in a)
                            j[b] = [j[b], a[b]];
                    else
                        b = a[v.status],
                        v.then(b, b)
                }
                return this
            }
            ,
            d.url = ((a || d.url) + "").replace(bG, "").replace(bL, bW[1] + "//"),
            d.dataTypes = f.trim(d.dataType || "*").toLowerCase().split(bP),
            d.crossDomain == null && (r = bR.exec(d.url.toLowerCase()),
            d.crossDomain = !(!r || r[1] == bW[1] && r[2] == bW[2] && (r[3] || (r[1] === "http:" ? 80 : 443)) == (bW[3] || (bW[1] === "http:" ? 80 : 443)))),
            d.data && d.processData && typeof d.data != "string" && (d.data = f.param(d.data, d.traditional)),
            b$(bT, d, c, v);
            if (s === 2)
                return !1;
            t = d.global,
            d.type = d.type.toUpperCase(),
            d.hasContent = !bK.test(d.type),
            t && f.active++ === 0 && f.event.trigger("ajaxStart");
            if (!d.hasContent) {
                d.data && (d.url += (bM.test(d.url) ? "&" : "?") + d.data,
                delete d.data),
                k = d.url;
                if (d.cache === !1) {
                    var x = f.now()
                      , y = d.url.replace(bQ, "$1_=" + x);
                    d.url = y + (y === d.url ? (bM.test(d.url) ? "&" : "?") + "_=" + x : "")
                }
            }
            (d.data && d.hasContent && d.contentType !== !1 || c.contentType) && v.setRequestHeader("Content-Type", d.contentType),
            d.ifModified && (k = k || d.url,
            f.lastModified[k] && v.setRequestHeader("If-Modified-Since", f.lastModified[k]),
            f.etag[k] && v.setRequestHeader("If-None-Match", f.etag[k])),
            v.setRequestHeader("Accept", d.dataTypes[0] && d.accepts[d.dataTypes[0]] ? d.accepts[d.dataTypes[0]] + (d.dataTypes[0] !== "*" ? ", " + bX + "; q=0.01" : "") : d.accepts["*"]);
            for (u in d.headers)
                v.setRequestHeader(u, d.headers[u]);
            if (d.beforeSend && (d.beforeSend.call(e, v, d) === !1 || s === 2)) {
                v.abort();
                return !1
            }
            for (u in {
                success: 1,
                error: 1,
                complete: 1
            })
                v[u](d[u]);
            p = b$(bU, d, c, v);
            if (!p)
                w(-1, "No Transport");
            else {
                v.readyState = 1,
                t && g.trigger("ajaxSend", [v, d]),
                d.async && d.timeout > 0 && (q = setTimeout(function() {
                    v.abort("timeout")
                }, d.timeout));
                try {
                    s = 1,
                    p.send(l, w)
                } catch (z) {
                    if (s < 2)
                        w(-1, z);
                    else
                        throw z
                }
            }
            return v
        },
        param: function(a, c) {
            var d = []
              , e = function(a, b) {
                b = f.isFunction(b) ? b() : b,
                d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b)
            };
            c === b && (c = f.ajaxSettings.traditional);
            if (f.isArray(a) || a.jquery && !f.isPlainObject(a))
                f.each(a, function() {
                    e(this.name, this.value)
                });
            else
                for (var g in a)
                    ca(g, a[g], c, e);
            return d.join("&").replace(bD, "+")
        }
    }),
    f.extend({
        active: 0,
        lastModified: {},
        etag: {}
    });
    var cd = f.now()
      , ce = /(\=)\?(&|$)|\?\?/i;
    f.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            return f.expando + "_" + cd++
        }
    }),
    f.ajaxPrefilter("json jsonp", function(b, c, d) {
        var e = b.contentType === "application/x-www-form-urlencoded" && typeof b.data == "string";
        if (b.dataTypes[0] === "jsonp" || b.jsonp !== !1 && (ce.test(b.url) || e && ce.test(b.data))) {
            var g, h = b.jsonpCallback = f.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, i = a[h], j = b.url, k = b.data, l = "$1" + h + "$2";
            b.jsonp !== !1 && (j = j.replace(ce, l),
            b.url === j && (e && (k = k.replace(ce, l)),
            b.data === k && (j += (/\?/.test(j) ? "&" : "?") + b.jsonp + "=" + h))),
            b.url = j,
            b.data = k,
            a[h] = function(a) {
                g = [a]
            }
            ,
            d.always(function() {
                a[h] = i,
                g && f.isFunction(i) && a[h](g[0])
            }),
            b.converters["script json"] = function() {
                g || f.error(h + " was not called");
                return g[0]
            }
            ,
            b.dataTypes[0] = "json";
            return "script"
        }
    }),
    f.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /javascript|ecmascript/
        },
        converters: {
            "text script": function(a) {
                f.globalEval(a);
                return a
            }
        }
    }),
    f.ajaxPrefilter("script", function(a) {
        a.cache === b && (a.cache = !1),
        a.crossDomain && (a.type = "GET",
        a.global = !1)
    }),
    f.ajaxTransport("script", function(a) {
        if (a.crossDomain) {
            var d, e = c.head || c.getElementsByTagName("head")[0] || c.documentElement;
            return {
                send: function(f, g) {
                    d = c.createElement("script"),
                    d.async = "async",
                    a.scriptCharset && (d.charset = a.scriptCharset),
                    d.src = a.url,
                    d.onload = d.onreadystatechange = function(a, c) {
                        if (c || !d.readyState || /loaded|complete/.test(d.readyState))
                            d.onload = d.onreadystatechange = null,
                            e && d.parentNode && e.removeChild(d),
                            d = b,
                            c || g(200, "success")
                    }
                    ,
                    e.insertBefore(d, e.firstChild)
                },
                abort: function() {
                    d && d.onload(0, 1)
                }
            }
        }
    });
    var cf = a.ActiveXObject ? function() {
        for (var a in ch)
            ch[a](0, 1)
    }
    : !1, cg = 0, ch;
    f.ajaxSettings.xhr = a.ActiveXObject ? function() {
        return !this.isLocal && ci() || cj()
    }
    : ci,
    function(a) {
        f.extend(f.support, {
            ajax: !!a,
            cors: !!a && "withCredentials"in a
        })
    }(f.ajaxSettings.xhr()),
    f.support.ajax && f.ajaxTransport(function(c) {
        if (!c.crossDomain || f.support.cors) {
            var d;
            return {
                send: function(e, g) {
                    var h = c.xhr(), i, j;
                    c.username ? h.open(c.type, c.url, c.async, c.username, c.password) : h.open(c.type, c.url, c.async);
                    if (c.xhrFields)
                        for (j in c.xhrFields)
                            h[j] = c.xhrFields[j];
                    c.mimeType && h.overrideMimeType && h.overrideMimeType(c.mimeType),
                    !c.crossDomain && !e["X-Requested-With"] && (e["X-Requested-With"] = "XMLHttpRequest");
                    try {
                        for (j in e)
                            h.setRequestHeader(j, e[j])
                    } catch (k) {}
                    h.send(c.hasContent && c.data || null),
                    d = function(a, e) {
                        var j, k, l, m, n;
                        try {
                            if (d && (e || h.readyState === 4)) {
                                d = b,
                                i && (h.onreadystatechange = f.noop,
                                cf && delete ch[i]);
                                if (e)
                                    h.readyState !== 4 && h.abort();
                                else {
                                    j = h.status,
                                    l = h.getAllResponseHeaders(),
                                    m = {},
                                    n = h.responseXML,
                                    n && n.documentElement && (m.xml = n),
                                    m.text = h.responseText;
                                    try {
                                        k = h.statusText
                                    } catch (o) {
                                        k = ""
                                    }
                                    !j && c.isLocal && !c.crossDomain ? j = m.text ? 200 : 404 : j === 1223 && (j = 204)
                                }
                            }
                        } catch (p) {
                            e || g(-1, p)
                        }
                        m && g(j, k, m, l)
                    }
                    ,
                    !c.async || h.readyState === 4 ? d() : (i = ++cg,
                    cf && (ch || (ch = {},
                    f(a).unload(cf)),
                    ch[i] = d),
                    h.onreadystatechange = d)
                },
                abort: function() {
                    d && d(0, 1)
                }
            }
        }
    });
    var ck = {}, cl, cm, cn = /^(?:toggle|show|hide)$/, co = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i, cp, cq = [["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"], ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"], ["opacity"]], cr;
    f.fn.extend({
        show: function(a, b, c) {
            var d, e;
            if (a || a === 0)
                return this.animate(cu("show", 3), a, b, c);
            for (var g = 0, h = this.length; g < h; g++)
                d = this[g],
                d.style && (e = d.style.display,
                !f._data(d, "olddisplay") && e === "none" && (e = d.style.display = ""),
                e === "" && f.css(d, "display") === "none" && f._data(d, "olddisplay", cv(d.nodeName)));
            for (g = 0; g < h; g++) {
                d = this[g];
                if (d.style) {
                    e = d.style.display;
                    if (e === "" || e === "none")
                        d.style.display = f._data(d, "olddisplay") || ""
                }
            }
            return this
        },
        hide: function(a, b, c) {
            if (a || a === 0)
                return this.animate(cu("hide", 3), a, b, c);
            var d, e, g = 0, h = this.length;
            for (; g < h; g++)
                d = this[g],
                d.style && (e = f.css(d, "display"),
                e !== "none" && !f._data(d, "olddisplay") && f._data(d, "olddisplay", e));
            for (g = 0; g < h; g++)
                this[g].style && (this[g].style.display = "none");
            return this
        },
        _toggle: f.fn.toggle,
        toggle: function(a, b, c) {
            var d = typeof a == "boolean";
            f.isFunction(a) && f.isFunction(b) ? this._toggle.apply(this, arguments) : a == null || d ? this.each(function() {
                var b = d ? a : f(this).is(":hidden");
                f(this)[b ? "show" : "hide"]()
            }) : this.animate(cu("toggle", 3), a, b, c);
            return this
        },
        fadeTo: function(a, b, c, d) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({
                opacity: b
            }, a, c, d)
        },
        animate: function(a, b, c, d) {
            function g() {
                e.queue === !1 && f._mark(this);
                var b = f.extend({}, e), c = this.nodeType === 1, d = c && f(this).is(":hidden"), g, h, i, j, k, l, m, n, o;
                b.animatedProperties = {};
                for (i in a) {
                    g = f.camelCase(i),
                    i !== g && (a[g] = a[i],
                    delete a[i]),
                    h = a[g],
                    f.isArray(h) ? (b.animatedProperties[g] = h[1],
                    h = a[g] = h[0]) : b.animatedProperties[g] = b.specialEasing && b.specialEasing[g] || b.easing || "swing";
                    if (h === "hide" && d || h === "show" && !d)
                        return b.complete.call(this);
                    c && (g === "height" || g === "width") && (b.overflow = [this.style.overflow, this.style.overflowX, this.style.overflowY],
                    f.css(this, "display") === "inline" && f.css(this, "float") === "none" && (!f.support.inlineBlockNeedsLayout || cv(this.nodeName) === "inline" ? this.style.display = "inline-block" : this.style.zoom = 1))
                }
                b.overflow != null && (this.style.overflow = "hidden");
                for (i in a)
                    j = new f.fx(this,b,i),
                    h = a[i],
                    cn.test(h) ? (o = f._data(this, "toggle" + i) || (h === "toggle" ? d ? "show" : "hide" : 0),
                    o ? (f._data(this, "toggle" + i, o === "show" ? "hide" : "show"),
                    j[o]()) : j[h]()) : (k = co.exec(h),
                    l = j.cur(),
                    k ? (m = parseFloat(k[2]),
                    n = k[3] || (f.cssNumber[i] ? "" : "px"),
                    n !== "px" && (f.style(this, i, (m || 1) + n),
                    l = (m || 1) / j.cur() * l,
                    f.style(this, i, l + n)),
                    k[1] && (m = (k[1] === "-=" ? -1 : 1) * m + l),
                    j.custom(l, m, n)) : j.custom(l, h, ""));
                return !0
            }
            var e = f.speed(b, c, d);
            if (f.isEmptyObject(a))
                return this.each(e.complete, [!1]);
            a = f.extend({}, a);
            return e.queue === !1 ? this.each(g) : this.queue(e.queue, g)
        },
        stop: function(a, c, d) {
            typeof a != "string" && (d = c,
            c = a,
            a = b),
            c && a !== !1 && this.queue(a || "fx", []);
            return this.each(function() {
                function h(a, b, c) {
                    var e = b[c];
                    f.removeData(a, c, !0),
                    e.stop(d)
                }
                var b, c = !1, e = f.timers, g = f._data(this);
                d || f._unmark(!0, this);
                if (a == null)
                    for (b in g)
                        g[b] && g[b].stop && b.indexOf(".run") === b.length - 4 && h(this, g, b);
                else
                    g[b = a + ".run"] && g[b].stop && h(this, g, b);
                for (b = e.length; b--; )
                    e[b].elem === this && (a == null || e[b].queue === a) && (d ? e[b](!0) : e[b].saveState(),
                    c = !0,
                    e.splice(b, 1));
                (!d || !c) && f.dequeue(this, a)
            })
        }
    }),
    f.each({
        slideDown: cu("show", 1),
        slideUp: cu("hide", 1),
        slideToggle: cu("toggle", 1),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(a, b) {
        f.fn[a] = function(a, c, d) {
            return this.animate(b, a, c, d)
        }
    }),
    f.extend({
        speed: function(a, b, c) {
            var d = a && typeof a == "object" ? f.extend({}, a) : {
                complete: c || !c && b || f.isFunction(a) && a,
                duration: a,
                easing: c && b || b && !f.isFunction(b) && b
            };
            d.duration = f.fx.off ? 0 : typeof d.duration == "number" ? d.duration : d.duration in f.fx.speeds ? f.fx.speeds[d.duration] : f.fx.speeds._default;
            if (d.queue == null || d.queue === !0)
                d.queue = "fx";
            d.old = d.complete,
            d.complete = function(a) {
                f.isFunction(d.old) && d.old.call(this),
                d.queue ? f.dequeue(this, d.queue) : a !== !1 && f._unmark(this)
            }
            ;
            return d
        },
        easing: {
            linear: function(a, b, c, d) {
                return c + d * a
            },
            swing: function(a, b, c, d) {
                return (-Math.cos(a * Math.PI) / 2 + .5) * d + c
            }
        },
        timers: [],
        fx: function(a, b, c) {
            this.options = b,
            this.elem = a,
            this.prop = c,
            b.orig = b.orig || {}
        }
    }),
    f.fx.prototype = {
        update: function() {
            this.options.step && this.options.step.call(this.elem, this.now, this),
            (f.fx.step[this.prop] || f.fx.step._default)(this)
        },
        cur: function() {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null))
                return this.elem[this.prop];
            var a, b = f.css(this.elem, this.prop);
            return isNaN(a = parseFloat(b)) ? !b || b === "auto" ? 0 : b : a
        },
        custom: function(a, c, d) {
            function h(a) {
                return e.step(a)
            }
            var e = this
              , g = f.fx;
            this.startTime = cr || cs(),
            this.end = c,
            this.now = this.start = a,
            this.pos = this.state = 0,
            this.unit = d || this.unit || (f.cssNumber[this.prop] ? "" : "px"),
            h.queue = this.options.queue,
            h.elem = this.elem,
            h.saveState = function() {
                e.options.hide && f._data(e.elem, "fxshow" + e.prop) === b && f._data(e.elem, "fxshow" + e.prop, e.start)
            }
            ,
            h() && f.timers.push(h) && !cp && (cp = setInterval(g.tick, g.interval))
        },
        show: function() {
            var a = f._data(this.elem, "fxshow" + this.prop);
            this.options.orig[this.prop] = a || f.style(this.elem, this.prop),
            this.options.show = !0,
            a !== b ? this.custom(this.cur(), a) : this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur()),
            f(this.elem).show()
        },
        hide: function() {
            this.options.orig[this.prop] = f._data(this.elem, "fxshow" + this.prop) || f.style(this.elem, this.prop),
            this.options.hide = !0,
            this.custom(this.cur(), 0)
        },
        step: function(a) {
            var b, c, d, e = cr || cs(), g = !0, h = this.elem, i = this.options;
            if (a || e >= i.duration + this.startTime) {
                this.now = this.end,
                this.pos = this.state = 1,
                this.update(),
                i.animatedProperties[this.prop] = !0;
                for (b in i.animatedProperties)
                    i.animatedProperties[b] !== !0 && (g = !1);
                if (g) {
                    i.overflow != null && !f.support.shrinkWrapBlocks && f.each(["", "X", "Y"], function(a, b) {
                        h.style["overflow" + b] = i.overflow[a]
                    }),
                    i.hide && f(h).hide();
                    if (i.hide || i.show)
                        for (b in i.animatedProperties)
                            f.style(h, b, i.orig[b]),
                            f.removeData(h, "fxshow" + b, !0),
                            f.removeData(h, "toggle" + b, !0);
                    d = i.complete,
                    d && (i.complete = !1,
                    d.call(h))
                }
                return !1
            }
            i.duration == Infinity ? this.now = e : (c = e - this.startTime,
            this.state = c / i.duration,
            this.pos = f.easing[i.animatedProperties[this.prop]](this.state, c, 0, 1, i.duration),
            this.now = this.start + (this.end - this.start) * this.pos),
            this.update();
            return !0
        }
    },
    f.extend(f.fx, {
        tick: function() {
            var a, b = f.timers, c = 0;
            for (; c < b.length; c++)
                a = b[c],
                !a() && b[c] === a && b.splice(c--, 1);
            b.length || f.fx.stop()
        },
        interval: 13,
        stop: function() {
            clearInterval(cp),
            cp = null
        },
        speeds: {
            slow: 600,
            fast: 200,
            _default: 400
        },
        step: {
            opacity: function(a) {
                f.style(a.elem, "opacity", a.now)
            },
            _default: function(a) {
                a.elem.style && a.elem.style[a.prop] != null ? a.elem.style[a.prop] = a.now + a.unit : a.elem[a.prop] = a.now
            }
        }
    }),
    f.each(["width", "height"], function(a, b) {
        f.fx.step[b] = function(a) {
            f.style(a.elem, b, Math.max(0, a.now) + a.unit)
        }
    }),
    f.expr && f.expr.filters && (f.expr.filters.animated = function(a) {
        return f.grep(f.timers, function(b) {
            return a === b.elem
        }).length
    }
    );
    var cw = /^t(?:able|d|h)$/i
      , cx = /^(?:body|html)$/i;
    "getBoundingClientRect"in c.documentElement ? f.fn.offset = function(a) {
        var b = this[0], c;
        if (a)
            return this.each(function(b) {
                f.offset.setOffset(this, a, b)
            });
        if (!b || !b.ownerDocument)
            return null;
        if (b === b.ownerDocument.body)
            return f.offset.bodyOffset(b);
        try {
            c = b.getBoundingClientRect()
        } catch (d) {}
        var e = b.ownerDocument
          , g = e.documentElement;
        if (!c || !f.contains(g, b))
            return c ? {
                top: c.top,
                left: c.left
            } : {
                top: 0,
                left: 0
            };
        var h = e.body
          , i = cy(e)
          , j = g.clientTop || h.clientTop || 0
          , k = g.clientLeft || h.clientLeft || 0
          , l = i.pageYOffset || f.support.boxModel && g.scrollTop || h.scrollTop
          , m = i.pageXOffset || f.support.boxModel && g.scrollLeft || h.scrollLeft
          , n = c.top + l - j
          , o = c.left + m - k;
        return {
            top: n,
            left: o
        }
    }
    : f.fn.offset = function(a) {
        var b = this[0];
        if (a)
            return this.each(function(b) {
                f.offset.setOffset(this, a, b)
            });
        if (!b || !b.ownerDocument)
            return null;
        if (b === b.ownerDocument.body)
            return f.offset.bodyOffset(b);
        var c, d = b.offsetParent, e = b, g = b.ownerDocument, h = g.documentElement, i = g.body, j = g.defaultView, k = j ? j.getComputedStyle(b, null) : b.currentStyle, l = b.offsetTop, m = b.offsetLeft;
        while ((b = b.parentNode) && b !== i && b !== h) {
            if (f.support.fixedPosition && k.position === "fixed")
                break;
            c = j ? j.getComputedStyle(b, null) : b.currentStyle,
            l -= b.scrollTop,
            m -= b.scrollLeft,
            b === d && (l += b.offsetTop,
            m += b.offsetLeft,
            f.support.doesNotAddBorder && (!f.support.doesAddBorderForTableAndCells || !cw.test(b.nodeName)) && (l += parseFloat(c.borderTopWidth) || 0,
            m += parseFloat(c.borderLeftWidth) || 0),
            e = d,
            d = b.offsetParent),
            f.support.subtractsBorderForOverflowNotVisible && c.overflow !== "visible" && (l += parseFloat(c.borderTopWidth) || 0,
            m += parseFloat(c.borderLeftWidth) || 0),
            k = c
        }
        if (k.position === "relative" || k.position === "static")
            l += i.offsetTop,
            m += i.offsetLeft;
        f.support.fixedPosition && k.position === "fixed" && (l += Math.max(h.scrollTop, i.scrollTop),
        m += Math.max(h.scrollLeft, i.scrollLeft));
        return {
            top: l,
            left: m
        }
    }
    ,
    f.offset = {
        bodyOffset: function(a) {
            var b = a.offsetTop
              , c = a.offsetLeft;
            f.support.doesNotIncludeMarginInBodyOffset && (b += parseFloat(f.css(a, "marginTop")) || 0,
            c += parseFloat(f.css(a, "marginLeft")) || 0);
            return {
                top: b,
                left: c
            }
        },
        setOffset: function(a, b, c) {
            var d = f.css(a, "position");
            d === "static" && (a.style.position = "relative");
            var e = f(a), g = e.offset(), h = f.css(a, "top"), i = f.css(a, "left"), j = (d === "absolute" || d === "fixed") && f.inArray("auto", [h, i]) > -1, k = {}, l = {}, m, n;
            j ? (l = e.position(),
            m = l.top,
            n = l.left) : (m = parseFloat(h) || 0,
            n = parseFloat(i) || 0),
            f.isFunction(b) && (b = b.call(a, c, g)),
            b.top != null && (k.top = b.top - g.top + m),
            b.left != null && (k.left = b.left - g.left + n),
            "using"in b ? b.using.call(a, k) : e.css(k)
        }
    },
    f.fn.extend({
        position: function() {
            if (!this[0])
                return null;
            var a = this[0]
              , b = this.offsetParent()
              , c = this.offset()
              , d = cx.test(b[0].nodeName) ? {
                top: 0,
                left: 0
            } : b.offset();
            c.top -= parseFloat(f.css(a, "marginTop")) || 0,
            c.left -= parseFloat(f.css(a, "marginLeft")) || 0,
            d.top += parseFloat(f.css(b[0], "borderTopWidth")) || 0,
            d.left += parseFloat(f.css(b[0], "borderLeftWidth")) || 0;
            return {
                top: c.top - d.top,
                left: c.left - d.left
            }
        },
        offsetParent: function() {
            return this.map(function() {
                var a = this.offsetParent || c.body;
                while (a && !cx.test(a.nodeName) && f.css(a, "position") === "static")
                    a = a.offsetParent;
                return a
            })
        }
    }),
    f.each(["Left", "Top"], function(a, c) {
        var d = "scroll" + c;
        f.fn[d] = function(c) {
            var e, g;
            if (c === b) {
                e = this[0];
                if (!e)
                    return null;
                g = cy(e);
                return g ? "pageXOffset"in g ? g[a ? "pageYOffset" : "pageXOffset"] : f.support.boxModel && g.document.documentElement[d] || g.document.body[d] : e[d]
            }
            return this.each(function() {
                g = cy(this),
                g ? g.scrollTo(a ? f(g).scrollLeft() : c, a ? c : f(g).scrollTop()) : this[d] = c
            })
        }
    }),
    f.each(["Height", "Width"], function(a, c) {
        var d = c.toLowerCase();
        f.fn["inner" + c] = function() {
            var a = this[0];
            return a ? a.style ? parseFloat(f.css(a, d, "padding")) : this[d]() : null
        }
        ,
        f.fn["outer" + c] = function(a) {
            var b = this[0];
            return b ? b.style ? parseFloat(f.css(b, d, a ? "margin" : "border")) : this[d]() : null
        }
        ,
        f.fn[d] = function(a) {
            var e = this[0];
            if (!e)
                return a == null ? null : this;
            if (f.isFunction(a))
                return this.each(function(b) {
                    var c = f(this);
                    c[d](a.call(this, b, c[d]()))
                });
            if (f.isWindow(e)) {
                var g = e.document.documentElement["client" + c]
                  , h = e.document.body;
                return e.document.compatMode === "CSS1Compat" && g || h && h["client" + c] || g
            }
            if (e.nodeType === 9)
                return Math.max(e.documentElement["client" + c], e.body["scroll" + c], e.documentElement["scroll" + c], e.body["offset" + c], e.documentElement["offset" + c]);
            if (a === b) {
                var i = f.css(e, d)
                  , j = parseFloat(i);
                return f.isNumeric(j) ? j : i
            }
            return this.css(d, typeof a == "string" ? a : a + "px")
        }
    }),
    a.jQuery = a.$ = f,
    typeof define == "function" && define.amd && define.amd.jQuery && define("jquery", [], function() {
        return f
    })
}
)(window);
jQuery.noConflict();
if (typeof jQuery != "undefined") {
    var AJS = (function() {
        var E = [];
        function F(G) {
            switch (G) {
            case "<":
                return "&lt;";
            case ">":
                return "&gt;";
            case "&":
                return "&amp;";
            case "'":
                return "&#39;";
            case "`":
                return "&#96;";
            default:
                return "&quot;"
            }
        }
        var B = /[&"'<>`]/g;
        var D = {
            version: "${project.version}-PDL-OLD",
            params: {},
            $: jQuery,
            log: function(G) {
                if (typeof console != "undefined" && console.log) {
                    console.log(G)
                }
            },
            I18n: {
                getText: function(G) {
                    return G
                }
            },
            stopEvent: function(G) {
                G.stopPropagation();
                return false
            },
            include: function(G) {
                if (!this.contains(E, G)) {
                    E.push(G);
                    var H = document.createElement("script");
                    H.src = G;
                    this.$("body").append(H)
                }
            },
            toggleClassName: function(G, H) {
                if (!(G = this.$(G))) {
                    return
                }
                G.toggleClass(H)
            },
            setVisible: function(H, G) {
                if (!(H = this.$(H))) {
                    return
                }
                var I = this.$;
                I(H).each(function() {
                    var J = I(this).hasClass("hidden");
                    if (J && G) {
                        I(this).removeClass("hidden")
                    } else {
                        if (!J && !G) {
                            I(this).addClass("hidden")
                        }
                    }
                })
            },
            setCurrent: function(G, H) {
                if (!(G = this.$(G))) {
                    return
                }
                if (H) {
                    G.addClass("current")
                } else {
                    G.removeClass("current")
                }
            },
            isVisible: function(G) {
                return !this.$(G).hasClass("hidden")
            },
            isClipped: function(G) {
                G = AJS.$(G);
                return (G.prop("scrollWidth") > G.prop("clientWidth"))
            },
            populateParameters: function() {
                var G = this;
                this.$(".parameters input").each(function() {
                    var H = this.value
                      , I = this.title || this.id;
                    if (G.$(this).hasClass("list")) {
                        if (G.params[I]) {
                            G.params[I].push(H)
                        } else {
                            G.params[I] = [H]
                        }
                    } else {
                        G.params[I] = (H.match(/^(tru|fals)e$/i) ? H.toLowerCase() == "true" : H)
                    }
                })
            },
            toInit: function(H) {
                var G = this;
                this.$(function() {
                    try {
                        H.apply(this, arguments)
                    } catch (I) {
                        G.log("Failed to run init function: " + I + "\n" + H.toString())
                    }
                });
                return this
            },
            indexOf: function(K, J, H) {
                var I = K.length;
                if (H == null) {
                    H = 0
                } else {
                    if (H < 0) {
                        H = Math.max(0, I + H)
                    }
                }
                for (var G = H; G < I; G++) {
                    if (K[G] === J) {
                        return G
                    }
                }
                return -1
            },
            contains: function(H, G) {
                return this.indexOf(H, G) > -1
            },
            format: function(I) {
                var G = /^((?:(?:[^']*'){2})*?[^']*?)\{(\d+)\}/
                  , H = /'(?!')/g;
                AJS.format = function(M) {
                    var K = arguments
                      , L = ""
                      , J = M.match(G);
                    while (J) {
                        M = M.substring(J[0].length);
                        L += J[1].replace(H, "") + (K.length > ++J[2] ? K[J[2]] : "");
                        J = M.match(G)
                    }
                    return L += M.replace(H, "")
                }
                ;
                return AJS.format.apply(AJS, arguments)
            },
            firebug: function() {
                var G = this.$(document.createElement("script"));
                G.attr("src", "http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js");
                this.$("head").append(G);
                (function() {
                    if (window.firebug) {
                        firebug.init()
                    } else {
                        setTimeout(arguments.callee, 0)
                    }
                }
                )()
            },
            clone: function(G) {
                return AJS.$(G).clone().removeAttr("id")
            },
            alphanum: function(N, M) {
                N = (N + "").toLowerCase();
                M = (M + "").toLowerCase();
                var I = /(\d+|\D+)/g
                  , J = N.match(I)
                  , G = M.match(I)
                  , L = Math.max(J.length, G.length);
                for (var H = 0; H < L; H++) {
                    if (H == J.length) {
                        return -1
                    }
                    if (H == G.length) {
                        return 1
                    }
                    var O = parseInt(J[H], 10)
                      , K = parseInt(G[H], 10);
                    if (O == J[H] && K == G[H] && O != K) {
                        return (O - K) / Math.abs(O - K)
                    }
                    if ((O != J[H] || K != G[H]) && J[H] != G[H]) {
                        return J[H] < G[H] ? -1 : 1
                    }
                }
                return 0
            },
            dim: function(I) {
                if (!AJS.dim.$dim) {
                    AJS.dim.$dim = AJS("div").addClass("aui-blanket");
                    if (AJS.$.browser.msie) {
                        AJS.dim.$dim.css({
                            width: "200%",
                            height: Math.max(AJS.$(document).height(), AJS.$(window).height()) + "px"
                        })
                    }
                    AJS.$("body").append(AJS.dim.$dim);
                    AJS.hasFlash = false;
                    var H = /^[^:]*:\/*[^/]*|/;
                    var G = H.exec(location.href)[0];
                    if (AJS.$.browser.msie && typeof AJS.hasFlash === "undefined" && I === false) {
                        AJS.$("object, embed, iframe").each(function() {
                            if (this.nodeName.toLowerCase() === "iframe") {
                                if (H.exec(this.src)[0] === G && AJS.$(this).contents().find("object, embed").length === 0) {
                                    return true
                                }
                            }
                            AJS.hasFlash = true;
                            return false
                        })
                    }
                    if (AJS.$.browser.msie && (I !== false || AJS.hasFlash)) {
                        AJS.dim.shim = AJS.$('<iframe frameBorder="0" class="aui-blanket-shim" src="javascript:false;"/>');
                        AJS.dim.shim.css({
                            height: Math.max(AJS.$(document).height(), AJS.$(window).height()) + "px"
                        });
                        AJS.$("body").append(AJS.dim.shim)
                    }
                    if (AJS.$.browser.msie && parseInt(AJS.$.browser.version, 10) < 8) {
                        AJS.dim.cachedOverflow = AJS.$("html").css("overflow");
                        AJS.$("html").css("overflow", "hidden")
                    } else {
                        AJS.dim.cachedOverflow = AJS.$("body").css("overflow");
                        AJS.$("body").css("overflow", "hidden")
                    }
                }
            },
            undim: function() {
                if (AJS.dim.$dim) {
                    AJS.dim.$dim.remove();
                    AJS.dim.$dim = null;
                    if (AJS.dim.shim) {
                        AJS.dim.shim.remove()
                    }
                    if (AJS.$.browser.msie && parseInt(AJS.$.browser.version, 10) < 8) {
                        AJS.$("html").css("overflow", AJS.dim.cachedOverflow)
                    } else {
                        AJS.$("body").css("overflow", AJS.dim.cachedOverflow)
                    }
                    if (AJS.$.browser.safari) {
                        var G = AJS.$(window).scrollTop();
                        AJS.$(window).scrollTop(10 + 5 * (G == 10)).scrollTop(G)
                    }
                }
            },
            onTextResize: function(H) {
                if (typeof H == "function") {
                    if (AJS.onTextResize["on-text-resize"]) {
                        AJS.onTextResize["on-text-resize"].push(function(I) {
                            H(I)
                        })
                    } else {
                        var G = AJS("div");
                        G.css({
                            width: "1em",
                            height: "1em",
                            position: "absolute",
                            top: "-9999em",
                            left: "-9999em"
                        });
                        this.$("body").append(G);
                        G.size = G.width();
                        setInterval(function() {
                            if (G.size != G.width()) {
                                G.size = G.width();
                                for (var I = 0, J = AJS.onTextResize["on-text-resize"].length; I < J; I++) {
                                    AJS.onTextResize["on-text-resize"][I](G.size)
                                }
                            }
                        }, 0);
                        AJS.onTextResize.em = G;
                        AJS.onTextResize["on-text-resize"] = [function(I) {
                            H(I)
                        }
                        ]
                    }
                }
            },
            unbindTextResize: function(I) {
                for (var G = 0, H = AJS.onTextResize["on-text-resize"].length; G < H; G++) {
                    if (AJS.onTextResize["on-text-resize"][G] == I) {
                        return AJS.onTextResize["on-text-resize"].splice(G, 1)
                    }
                }
            },
            escape: function(G) {
                return escape(G).replace(/%u\w{4}/gi, function(H) {
                    return unescape(H)
                })
            },
            escapeHtml: function(G) {
                return G.replace(B, F)
            },
            filterBySearch: function(K, P, Q) {
                if (P == "") {
                    return []
                }
                var I = this.$;
                var N = (Q && Q.keywordsField) || "keywords";
                var M = (Q && Q.ignoreForCamelCase) ? "i" : "";
                var J = (Q && Q.matchBoundary) ? "\\b" : "";
                var H = (Q && Q.splitRegex) || (/\s+/);
                var L = P.split(H);
                var G = [];
                I.each(L, function() {
                    var S = [new RegExp(J + this,"i")];
                    if (/^([A-Z][a-z]*){2,}$/.test(this)) {
                        var R = this.replace(/([A-Z][a-z]*)/g, "\\b$1[^,]*");
                        S.push(new RegExp(R,M))
                    }
                    G.push(S)
                });
                var O = [];
                I.each(K, function() {
                    for (var T = 0; T < G.length; T++) {
                        var R = false;
                        for (var S = 0; S < G[T].length; S++) {
                            if (G[T][S].test(this[N])) {
                                R = true;
                                break
                            }
                        }
                        if (!R) {
                            return
                        }
                    }
                    O.push(this)
                });
                return O
            },
            drawLogo: function(J) {
                options = {};
                options = AJS.$.extend(J, options);
                var N = options.scaleFactor || 1
                  , M = options.fill || "#fff"
                  , L = options.stroke || "#000"
                  , I = 400 * N
                  , G = 40 * N;
                strokeWidth = options.strokeWidth || 1;
                if (AJS.$(".aui-logo").size() == 0) {
                    AJS.$("body").append("<div id='aui-logo' class='aui-logo'><div>")
                }
                strokeWidth = options.strokeWidth || 1,
                containerID = options.containerID || ".aui-logo";
                var H = Raphael(containerID, I + 50 * N, G + 100 * N);
                var K = H.path("M 0,0 c 3.5433333,-4.7243333 7.0866667,-9.4486667 10.63,-14.173 -14.173,0 -28.346,0 -42.519,0 C -35.432667,-9.4486667 -38.976333,-4.7243333 -42.52,0 -28.346667,0 -14.173333,0 0,0 z m 277.031,28.346 c -14.17367,0 -28.34733,0 -42.521,0 C 245.14,14.173 255.77,0 266.4,-14.173 c -14.17267,0 -28.34533,0 -42.518,0 C 213.25167,0 202.62133,14.173 191.991,28.346 c -14.17333,0 -28.34667,0 -42.52,0 14.17333,-18.8976667 28.34667,-37.7953333 42.52,-56.693 -7.08667,-9.448667 -14.17333,-18.897333 -21.26,-28.346 -14.173,0 -28.346,0 -42.519,0 7.08667,9.448667 14.17333,18.897333 21.26,28.346 -14.17333,18.8976667 -28.34667,37.7953333 -42.52,56.693 -14.173333,0 -28.346667,0 -42.52,0 10.63,-14.173 21.26,-28.346 31.89,-42.519 -14.390333,0 -28.780667,0 -43.171,0 C 42.520733,1.330715e-4 31.889933,14.174867 21.26,28.347 c -42.520624,6.24e-4 -85.039187,-8.13e-4 -127.559,-0.001 11.220667,-14.961 22.441333,-29.922 33.662,-44.883 -6.496,-8.661 -12.992,-17.322 -19.488,-25.983 5.905333,0 11.810667,0 17.716,0 -10.63,-14.173333 -21.26,-28.346667 -31.89,-42.52 14.173333,0 28.346667,0 42.52,0 10.63,14.173333 21.26,28.346667 31.89,42.52 14.173333,0 28.3466667,0 42.52,0 -10.63,-14.173333 -21.26,-28.346667 -31.89,-42.52 14.1733333,0 28.3466667,0 42.52,0 10.63,14.173333 21.26,28.346667 31.89,42.52 14.390333,0 28.780667,0 43.171,0 -10.63,-14.173333 -21.26,-28.346667 -31.89,-42.52 42.51967,0 85.03933,0 127.559,0 10.63033,14.173333 21.26067,28.346667 31.891,42.52 14.17267,0 28.34533,0 42.518,0 -10.63,-14.173333 -21.26,-28.346667 -31.89,-42.52 14.17367,0 28.34733,0 42.521,0 14.17333,18.897667 28.34667,37.795333 42.52,56.693 -14.17333,18.8976667 -28.34667,37.7953333 -42.52,56.693 z");
                console.log(G);
                K.scale(N, -N, 0, 0);
                K.translate(120 * N, G);
                K.attr("fill", M);
                K.attr("stroke", L);
                K.attr("stroke-width", strokeWidth)
            }
        };
        if (typeof AJS != "undefined") {
            for (var C in AJS) {
                D[C] = AJS[C]
            }
        }
        var A = function() {
            var G = null;
            if (arguments.length && typeof arguments[0] == "string") {
                G = arguments.callee.$(document.createElement(arguments[0]));
                if (arguments.length == 2) {
                    G.html(arguments[1])
                }
            }
            return G
        };
        for (var C in D) {
            A[C] = D[C]
        }
        return A
    }
    )();
    AJS.$(function() {
        AJS.populateParameters()
    })
}
if (typeof console == "undefined") {
    console = {
        messages: [],
        log: function(A) {
            this.messages.push(A)
        },
        show: function() {
            alert(this.messages.join("\n"));
            this.messages = []
        }
    }
} else {
    console.show = function() {}
}
AJS.$.ajaxSettings.traditional = true;
(function() {
    var _after = 1;
    var _afterThrow = 2;
    var _afterFinally = 3;
    var _before = 4;
    var _around = 5;
    var _intro = 6;
    var _regexEnabled = true;
    var _arguments = "arguments";
    var _undef = "undefined";
    var getType = (function() {
        var toString = Object.prototype.toString
          , toStrings = {}
          , nodeTypes = {
            1: "element",
            3: "textnode",
            9: "document",
            11: "fragment"
        }
          , types = "Arguments Array Boolean Date Document Element Error Fragment Function NodeList Null Number Object RegExp String TextNode Undefined Window".split(" ");
        for (var i = types.length; i--; ) {
            var type = types[i]
              , constructor = window[type];
            if (constructor) {
                try {
                    toStrings[toString.call(new constructor)] = type.toLowerCase()
                } catch (e) {}
            }
        }
        return function(item) {
            return item == null && (item === undefined ? _undef : "null") || item.nodeType && nodeTypes[item.nodeType] || typeof item.length == "number" && (item.callee && _arguments || item.alert && "window" || item.item && "nodelist") || toStrings[toString.call(item)]
        }
    }
    )();
    var isFunc = function(obj) {
        return getType(obj) == "function"
    };
    var weaveOne = function(source, method, advice) {
        var old = source[method];
        // if (advice.type != _intro && !isFunc(old)) {
        //     var oldObject = old;
        //     old = function() {
        //         var code = arguments.length > 0 ? _arguments + "[0]" : "";
        //         for (var i = 1; i < arguments.length; i++) {
        //             code += "," + _arguments + "[" + i + "]"
        //         }
        //         return eval("oldObject(" + code + ");")
        //     }
        // }
        var aspect;
        if (advice.type == _after || advice.type == _afterThrow || advice.type == _afterFinally) {
            aspect = function() {
                var returnValue, exceptionThrown = null;
                try {
                    returnValue = old.apply(this, arguments)
                } catch (e) {
                    exceptionThrown = e
                }
                if (advice.type == _after) {
                    if (exceptionThrown == null) {
                        returnValue = advice.value.apply(this, [returnValue, method])
                    } else {
                        throw exceptionThrown
                    }
                } else {
                    if (advice.type == _afterThrow && exceptionThrown != null) {
                        returnValue = advice.value.apply(this, [exceptionThrown, method])
                    } else {
                        if (advice.type == _afterFinally) {
                            returnValue = advice.value.apply(this, [returnValue, exceptionThrown, method])
                        }
                    }
                }
                return returnValue
            }
        } else {
            if (advice.type == _before) {
                aspect = function() {
                    advice.value.apply(this, [arguments, method]);
                    return old.apply(this, arguments)
                }
            } else {
                if (advice.type == _intro) {
                    aspect = function() {
                        return advice.value.apply(this, arguments)
                    }
                } else {
                    if (advice.type == _around) {
                        aspect = function() {
                            var invocation = {
                                object: this,
                                args: Array.prototype.slice.call(arguments)
                            };
                            return advice.value.apply(invocation.object, [{
                                arguments: invocation.args,
                                method: method,
                                proceed: function() {
                                    return old.apply(invocation.object, invocation.args)
                                }
                            }])
                        }
                    }
                }
            }
        }
        aspect.unweave = function() {
            source[method] = old;
            pointcut = source = aspect = old = null
        }
        ;
        source[method] = aspect;
        return aspect
    };
    var search = function(source, pointcut, advice) {
        var methods = [];
        for (var method in source) {
            var item = null;
            try {
                item = source[method]
            } catch (e) {}
            if (item != null && method.match(pointcut.method) && isFunc(item)) {
                methods[methods.length] = {
                    source: source,
                    method: method,
                    advice: advice
                }
            }
        }
        return methods
    };
    var weave = function(pointcut, advice) {
        var source = typeof (pointcut.target.prototype) != _undef ? pointcut.target.prototype : pointcut.target;
        var advices = [];
        if (advice.type != _intro && typeof (source[pointcut.method]) == _undef) {
            var methods = search(pointcut.target, pointcut, advice);
            if (methods.length == 0) {
                methods = search(source, pointcut, advice)
            }
            for (var i in methods) {
                advices[advices.length] = weaveOne(methods[i].source, methods[i].method, methods[i].advice)
            }
        } else {
            advices[0] = weaveOne(source, pointcut.method, advice)
        }
        return _regexEnabled ? advices : advices[0]
    };
    jQuery.aop = {
        after: function(pointcut, advice) {
            return weave(pointcut, {
                type: _after,
                value: advice
            })
        },
        afterThrow: function(pointcut, advice) {
            return weave(pointcut, {
                type: _afterThrow,
                value: advice
            })
        },
        afterFinally: function(pointcut, advice) {
            return weave(pointcut, {
                type: _afterFinally,
                value: advice
            })
        },
        before: function(pointcut, advice) {
            return weave(pointcut, {
                type: _before,
                value: advice
            })
        },
        around: function(pointcut, advice) {
            return weave(pointcut, {
                type: _around,
                value: advice
            })
        },
        introduction: function(pointcut, advice) {
            return weave(pointcut, {
                type: _intro,
                value: advice
            })
        },
        setup: function(settings) {
            _regexEnabled = settings.regexMatch
        }
    }
}
)();
AJS.dropDown = function(L, E) {
    var U = null
      , I = []
      , Q = false
      , H = AJS.$(document)
      , C = {
        item: "li:has(a)",
        activeClass: "active",
        alignment: "right",
        displayHandler: function(W) {
            return W.name
        },
        escapeHandler: function() {
            this.hide("escape");
            return false
        },
        hideHandler: function() {},
        moveHandler: function(X, W) {},
        useDisabled: false
    };
    AJS.$.extend(C, E);
    C.alignment = {
        left: "left",
        right: "right"
    }[C.alignment.toLowerCase()] || "left";
    if (L && L.jquery) {
        U = L
    } else {
        if (typeof L == "string") {
            U = AJS.$(L)
        } else {
            if (L && L.constructor == Array) {
                U = AJS("div").addClass("aui-dropdown").toggleClass("hidden", !!C.isHiddenByDefault);
                for (var P = 0, K = L.length; P < K; P++) {
                    var J = AJS("ol");
                    for (var O = 0, S = L[P].length; O < S; O++) {
                        var M = AJS("li");
                        var G = L[P][O];
                        if (G.href) {
                            M.append(AJS("a").html("<span>" + C.displayHandler(G) + "</span>").attr({
                                href: G.href
                            }).addClass(G.className));
                            AJS.$.data(AJS.$("a > span", M)[0], "properties", G)
                        } else {
                            M.html(G.html).addClass(G.className)
                        }
                        if (G.icon) {
                            M.prepend(AJS("img").attr("src", G.icon))
                        }
                        if (G.insideSpanIcon) {
                            M.children("a").prepend(AJS("span").attr("class", "icon"))
                        }
                        AJS.$.data(M[0], "properties", G);
                        J.append(M)
                    }
                    if (P == K - 1) {
                        J.addClass("last")
                    }
                    U.append(J)
                }
                AJS.$("body").append(U)
            } else {
                throw new Error("AJS.dropDown function was called with illegal parameter. Should be AJS.$ object, AJS.$ selector or array.")
            }
        }
    }
    var F = function() {
        N(+1)
    };
    var T = function() {
        N(-1)
    };
    var N = function(Z) {
        var Y = !Q
          , W = AJS.dropDown.current.$[0]
          , X = AJS.dropDown.current.links
          , a = W.focused;
        Q = true;
        if (X.length === 0) {
            return
        }
        W.focused = (typeof a === "number") ? a : -1;
        if (!AJS.dropDown.current) {
            AJS.log("move - not current, aborting");
            return true
        }
        W.focused += Z;
        if (W.focused < 0) {
            W.focused = X.length - 1
        } else {
            if (W.focused >= X.length) {
                W.focused = 0
            }
        }
        C.moveHandler(AJS.$(X[W.focused]), Z < 0 ? "up" : "down");
        if (Y && X.length) {
            AJS.$(X[W.focused]).addClass(C.activeClass);
            Q = false
        } else {
            if (!X.length) {
                Q = false
            }
        }
    };
    var V = function(Y) {
        if (!AJS.dropDown.current) {
            return true
        }
        var Z = Y.which
          , W = AJS.dropDown.current.$[0]
          , X = AJS.dropDown.current.links;
        AJS.dropDown.current.cleanActive();
        switch (Z) {
        case 40:
            F();
            break;
        case 38:
            T();
            break;
        case 27:
            return C.escapeHandler.call(AJS.dropDown.current, Y);
        case 13:
            if (W.focused >= 0) {
                if (!C.selectionHandler) {
                    if (AJS.$(X[W.focused]).attr("nodeName") != "a") {
                        return AJS.$("a", X[W.focused]).trigger("focus")
                    } else {
                        return AJS.$(X[W.focused]).trigger("focus")
                    }
                } else {
                    return C.selectionHandler.call(AJS.dropDown.current, Y, AJS.$(X[W.focused]))
                }
            }
            return true;
        default:
            if (X.length) {
                AJS.$(X[W.focused]).addClass(C.activeClass)
            }
            return true
        }
        Y.stopPropagation();
        Y.preventDefault();
        return false
    };
    var A = function(W) {
        if (!((W && W.which && (W.which == 3)) || (W && W.button && (W.button == 2)) || false)) {
            if (AJS.dropDown.current) {
                AJS.dropDown.current.hide("click")
            }
        }
    };
    var D = function(W) {
        return function() {
            if (!AJS.dropDown.current) {
                return
            }
            AJS.dropDown.current.cleanFocus();
            this.originalClass = this.className;
            AJS.$(this).addClass(C.activeClass);
            AJS.dropDown.current.$[0].focused = W
        }
    };
    var R = function(W) {
        if (W.button || W.metaKey || W.ctrlKey || W.shiftKey) {
            return true
        }
        if (AJS.dropDown.current && C.selectionHandler) {
            C.selectionHandler.call(AJS.dropDown.current, W, AJS.$(this))
        }
    };
    var B = function(X) {
        var W = false;
        if (X.data("events")) {
            AJS.$.each(X.data("events"), function(Y, Z) {
                AJS.$.each(Z, function(b, a) {
                    if (R === a) {
                        W = true;
                        return false
                    }
                })
            })
        }
        return W
    };
    U.each(function() {
        var W = this
          , Y = AJS.$(this)
          , Z = {};
        var X = {
            reset: function() {
                Z = AJS.$.extend(Z, {
                    $: Y,
                    links: AJS.$(C.item || "li:has(a)", W),
                    cleanActive: function() {
                        if (W.focused + 1 && Z.links.length) {
                            AJS.$(Z.links[W.focused]).removeClass(C.activeClass)
                        }
                    },
                    cleanFocus: function() {
                        Z.cleanActive();
                        W.focused = -1
                    },
                    moveDown: F,
                    moveUp: T,
                    moveFocus: V,
                    getFocusIndex: function() {
                        return (typeof W.focused == "number") ? W.focused : -1
                    }
                });
                Z.links.each(function(a) {
                    var b = AJS.$(this);
                    if (!B(b)) {
                        b.hover(D(a), Z.cleanFocus);
                        b.click(R)
                    }
                })
            },
            appear: function(a) {
                if (a) {
                    Y.removeClass("hidden");
                    Y.addClass("aui-dropdown-" + C.alignment)
                } else {
                    Y.addClass("hidden")
                }
            },
            fade: function(a) {
                if (a) {
                    Y.fadeIn("fast")
                } else {
                    Y.fadeOut("fast")
                }
            },
            scroll: function(a) {
                if (a) {
                    Y.slideDown("fast")
                } else {
                    Y.slideUp("fast")
                }
            }
        };
        Z.reset = X.reset;
        Z.reset();
        Z.addControlProcess = function(b, a) {
            AJS.$.aop.around({
                target: this,
                method: b
            }, a)
        }
        ;
        Z.addCallback = function(b, a) {
            return AJS.$.aop.after({
                target: this,
                method: b
            }, a)
        }
        ;
        Z.show = function(a) {
            if (C.useDisabled && this.$.closest(".aui-dd-parent").hasClass("disabled")) {
                return
            }
            this.alignment = C.alignment;
            A();
            AJS.dropDown.current = this;
            this.method = a || this.method || "appear";
            this.timer = setTimeout(function() {
                H.click(A)
            }, 0);
            H.keydown(V);
            if (C.firstSelected && this.links[0]) {
                D(0).call(this.links[0])
            }
            AJS.$(W.offsetParent).css({
                zIndex: 2000
            });
            X[this.method](true);
            AJS.$(document).trigger("showLayer", ["dropdown", AJS.dropDown.current])
        }
        ;
        Z.hide = function(a) {
            this.method = this.method || "appear";
            AJS.$(Y.get(0).offsetParent).css({
                zIndex: ""
            });
            this.cleanFocus();
            X[this.method](false);
            H.unbind("click", A).unbind("keydown", V);
            AJS.$(document).trigger("hideLayer", ["dropdown", AJS.dropDown.current]);
            AJS.dropDown.current = null;
            return a
        }
        ;
        Z.addCallback("reset", function() {
            if (C.firstSelected && this.links[0]) {
                D(0).call(this.links[0])
            }
        });
        if (!AJS.dropDown.iframes) {
            AJS.dropDown.iframes = []
        }
        AJS.dropDown.createShims = function() {
            AJS.$("iframe").each(function(a) {
                var b = this;
                if (!b.shim) {
                    b.shim = AJS.$("<div />").addClass("shim hidden").appendTo("body");
                    AJS.dropDown.iframes.push(b)
                }
            });
            return arguments.callee
        }();
        Z.addCallback("show", function() {
            AJS.$(AJS.dropDown.iframes).each(function() {
                var a = AJS.$(this);
                if (a.is(":visible")) {
                    var b = a.offset();
                    b.height = a.height();
                    b.width = a.width();
                    this.shim.css({
                        left: b.left + "px",
                        top: b.top + "px",
                        height: b.height + "px",
                        width: b.width + "px"
                    }).removeClass("hidden")
                }
            })
        });
        Z.addCallback("hide", function() {
            AJS.$(AJS.dropDown.iframes).each(function() {
                this.shim.addClass("hidden")
            });
            C.hideHandler()
        });
        (function() {
            var a = function() {
                var b = this.$.offset();
                if (this.shadow) {
                    this.shadow.remove()
                }
                if (this.$.is(":visible")) {
                    this.shadow = Raphael.shadow(0, 0, this.$.outerWidth(true), this.$.outerHeight(true), {
                        target: this.$[0]
                    })
                }
            };
            Z.addCallback("reset", a);
            Z.addCallback("show", a);
            Z.addCallback("hide", function() {
                if (this.shadow) {
                    this.shadow.remove()
                }
            })
        }
        )();
        if (AJS.$.browser.msie) {
            (function() {
                var a = function() {
                    if (this.$.is(":visible")) {
                        if (!this.iframeShim) {
                            this.iframeShim = AJS.$('<iframe class="dropdown-shim" src="javascript:false;" frameBorder="0" />').insertBefore(this.$)
                        }
                        this.iframeShim.css({
                            display: "block",
                            top: this.$.css("top"),
                            width: this.$.outerWidth() + "px",
                            height: this.$.outerHeight() + "px"
                        });
                        if (C.alignment == "left") {
                            this.iframeShim.css({
                                left: "0px"
                            })
                        } else {
                            this.iframeShim.css({
                                right: "0px"
                            })
                        }
                    }
                };
                Z.addCallback("reset", a);
                Z.addCallback("show", a);
                Z.addCallback("hide", function() {
                    if (this.iframeShim) {
                        this.iframeShim.css({
                            display: "none"
                        })
                    }
                })
            }
            )()
        }
        I.push(Z)
    });
    return I
}
;
AJS.dropDown.getAdditionalPropertyValue = function(D, A) {
    var C = D[0];
    if (!C || (typeof C.tagName != "string") || C.tagName.toLowerCase() != "li") {
        AJS.log("AJS.dropDown.getAdditionalPropertyValue : item passed in should be an LI element wrapped by jQuery")
    }
    var B = AJS.$.data(C, "properties");
    return B ? B[A] : null
}
;
AJS.dropDown.removeAllAdditionalProperties = function(A) {}
;
AJS.dropDown.Standard = function(H) {
    var C = [], G, B = {
        selector: ".aui-dd-parent",
        dropDown: ".aui-dropdown",
        trigger: ".aui-dd-trigger"
    };
    AJS.$.extend(B, H);
    var F = function(I, L, K, J) {
        AJS.$.extend(J, {
            trigger: I
        });
        L.addClass("dd-allocated");
        K.addClass("hidden");
        if (B.isHiddenByDefault == false) {
            J.show()
        }
        J.addCallback("show", function() {
            L.addClass("active")
        });
        J.addCallback("hide", function() {
            L.removeClass("active")
        })
    };
    var A = function(K, I, L, J) {
        if (J != AJS.dropDown.current) {
            L.css({
                top: I.outerHeight()
            });
            J.show();
            K.stopImmediatePropagation()
        }
        K.preventDefault()
    };
    if (B.useLiveEvents) {
        var D = [];
        var E = [];
        AJS.$(B.trigger).live("click", function(L) {
            var I = AJS.$(this);
            var N, M, J;
            var K;
            if ((K = AJS.$.inArray(this, D)) >= 0) {
                var O = E[K];
                N = O.parent;
                M = O.dropdown;
                J = O.ddcontrol
            } else {
                N = I.closest(B.selector);
                M = N.find(B.dropDown);
                if (M.length === 0) {
                    return
                }
                J = AJS.dropDown(M, B)[0];
                if (!J) {
                    return
                }
                D.push(this);
                O = {
                    parent: N,
                    dropdown: M,
                    ddcontrol: J
                };
                F(I, N, M, J);
                E.push(O)
            }
            A(L, I, M, J)
        })
    } else {
        if (this instanceof AJS.$) {
            G = this
        } else {
            G = AJS.$(B.selector)
        }
        G = G.not(".dd-allocated").filter(":has(" + B.dropDown + ")").filter(":has(" + B.trigger + ")");
        G.each(function() {
            var L = AJS.$(this)
              , K = AJS.$(B.dropDown, this)
              , I = AJS.$(B.trigger, this)
              , J = AJS.dropDown(K, B)[0];
            AJS.$.extend(J, {
                trigger: I
            });
            F(I, L, K, J);
            I.click(function(M) {
                A(M, I, K, J)
            });
            C.push(J)
        })
    }
    return C
}
;
AJS.dropDown.Ajax = function(C) {
    var B, A = {
        cache: true
    };
    AJS.$.extend(A, C || {});
    B = AJS.dropDown.Standard.call(this, A);
    AJS.$(B).each(function() {
        var D = this;
        AJS.$.extend(D, {
            getAjaxOptions: function(E) {
                var F = function(G) {
                    if (A.formatResults) {
                        G = A.formatResults(G)
                    }
                    if (A.cache) {
                        D.cache.set(D.getAjaxOptions(), G)
                    }
                    D.refreshSuccess(G)
                };
                if (A.ajaxOptions) {
                    if (AJS.$.isFunction(A.ajaxOptions)) {
                        return AJS.$.extend(A.ajaxOptions.call(D), {
                            success: F
                        })
                    } else {
                        return AJS.$.extend(A.ajaxOptions, {
                            success: F
                        })
                    }
                }
                return AJS.$.extend(E, {
                    success: F
                })
            },
            refreshSuccess: function(E) {
                this.$.html(E)
            },
            cache: function() {
                var E = {};
                return {
                    get: function(F) {
                        var G = F.data || "";
                        return E[(F.url + G).replace(/[\?\&]/gi, "")]
                    },
                    set: function(F, G) {
                        var H = F.data || "";
                        E[(F.url + H).replace(/[\?\&]/gi, "")] = G
                    },
                    reset: function() {
                        E = {}
                    }
                }
            }(),
            show: function(E) {
                return function(F) {
                    if (A.cache && !!D.cache.get(D.getAjaxOptions())) {
                        D.refreshSuccess(D.cache.get(D.getAjaxOptions()));
                        E.call(D)
                    } else {
                        AJS.$(AJS.$.ajax(D.getAjaxOptions())).throbber({
                            target: D.$,
                            end: function() {
                                D.reset()
                            }
                        });
                        E.call(D);
                        D.shadow.hide();
                        if (D.iframeShim) {
                            D.iframeShim.hide()
                        }
                    }
                }
            }(D.show),
            resetCache: function() {
                D.cache.reset()
            }
        });
        D.addCallback("refreshSuccess", function() {
            D.reset()
        })
    });
    return B
}
;
AJS.$.fn.dropDown = function(B, A) {
    B = (B || "Standard").replace(/^([a-z])/, function(C) {
        return C.toUpperCase()
    });
    return AJS.dropDown[B].call(this, A)
}
;
AJS = AJS || {};
(function() {
    var A = "";
    A = (A.indexOf("%_CONTEXT_PATH") == 0 ? false : A);
    AJS.contextPath = function() {
        var B = null;
        var D = [A, window.contextPath, window.Confluence && Confluence.getContextPath(), window.BAMBOO && BAMBOO.contextPath, window.FECRU && FECRU.pageContext];
        for (var C = 0; C < D.length; C++) {
            if (typeof D[C] === "string") {
                B = D[C];
                break
            }
        }
        return B
    }
}
)();
// ┌────────────────────────────────────────────────────────────────────┐ \\
// │ Raphaël 2.1.0 - JavaScript Vector Library                          │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright © 2008-2012 Dmitry Baranovskiy (http://raphaeljs.com)    │ \\
// │ Copyright © 2008-2012 Sencha Labs (http://sencha.com)              │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Licensed under the MIT (http://raphaeljs.com/license.html) license.│ \\
// └────────────────────────────────────────────────────────────────────┘ \\

(function(a) {
    var b = "0.3.4", c = "hasOwnProperty", d = /[\.\/]/, e = "*", f = function() {}, g = function(a, b) {
        return a - b
    }, h, i, j = {
        n: {}
    }, k = function(a, b) {
        var c = j, d = i, e = Array.prototype.slice.call(arguments, 2), f = k.listeners(a), l = 0, m = !1, n, o = [], p = {}, q = [], r = h, s = [];
        h = a,
        i = 0;
        for (var t = 0, u = f.length; t < u; t++)
            "zIndex"in f[t] && (o.push(f[t].zIndex),
            f[t].zIndex < 0 && (p[f[t].zIndex] = f[t]));
        o.sort(g);
        while (o[l] < 0) {
            n = p[o[l++]],
            q.push(n.apply(b, e));
            if (i) {
                i = d;
                return q
            }
        }
        for (t = 0; t < u; t++) {
            n = f[t];
            if ("zIndex"in n)
                if (n.zIndex == o[l]) {
                    q.push(n.apply(b, e));
                    if (i)
                        break;
                    do {
                        l++,
                        n = p[o[l]],
                        n && q.push(n.apply(b, e));
                        if (i)
                            break
                    } while (n)
                } else
                    p[n.zIndex] = n;
            else {
                q.push(n.apply(b, e));
                if (i)
                    break
            }
        }
        i = d,
        h = r;
        return q.length ? q : null
    };
    k.listeners = function(a) {
        var b = a.split(d), c = j, f, g, h, i, k, l, m, n, o = [c], p = [];
        for (i = 0,
        k = b.length; i < k; i++) {
            n = [];
            for (l = 0,
            m = o.length; l < m; l++) {
                c = o[l].n,
                g = [c[b[i]], c[e]],
                h = 2;
                while (h--)
                    f = g[h],
                    f && (n.push(f),
                    p = p.concat(f.f || []))
            }
            o = n
        }
        return p
    }
    ,
    k.on = function(a, b) {
        var c = a.split(d)
          , e = j;
        for (var g = 0, h = c.length; g < h; g++)
            e = e.n,
            !e[c[g]] && (e[c[g]] = {
                n: {}
            }),
            e = e[c[g]];
        e.f = e.f || [];
        for (g = 0,
        h = e.f.length; g < h; g++)
            if (e.f[g] == b)
                return f;
        e.f.push(b);
        return function(a) {
            +a == +a && (b.zIndex = +a)
        }
    }
    ,
    k.stop = function() {
        i = 1
    }
    ,
    k.nt = function(a) {
        if (a)
            return (new RegExp("(?:\\.|\\/|^)" + a + "(?:\\.|\\/|$)")).test(h);
        return h
    }
    ,
    k.off = k.unbind = function(a, b) {
        var f = a.split(d), g, h, i, k, l, m, n, o = [j];
        for (k = 0,
        l = f.length; k < l; k++)
            for (m = 0; m < o.length; m += i.length - 2) {
                i = [m, 1],
                g = o[m].n;
                if (f[k] != e)
                    g[f[k]] && i.push(g[f[k]]);
                else
                    for (h in g)
                        g[c](h) && i.push(g[h]);
                o.splice.apply(o, i)
            }
        for (k = 0,
        l = o.length; k < l; k++) {
            g = o[k];
            while (g.n) {
                if (b) {
                    if (g.f) {
                        for (m = 0,
                        n = g.f.length; m < n; m++)
                            if (g.f[m] == b) {
                                g.f.splice(m, 1);
                                break
                            }
                        !g.f.length && delete g.f
                    }
                    for (h in g.n)
                        if (g.n[c](h) && g.n[h].f) {
                            var p = g.n[h].f;
                            for (m = 0,
                            n = p.length; m < n; m++)
                                if (p[m] == b) {
                                    p.splice(m, 1);
                                    break
                                }
                            !p.length && delete g.n[h].f
                        }
                } else {
                    delete g.f;
                    for (h in g.n)
                        g.n[c](h) && g.n[h].f && delete g.n[h].f
                }
                g = g.n
            }
        }
    }
    ,
    k.once = function(a, b) {
        var c = function() {
            var d = b.apply(this, arguments);
            k.unbind(a, c);
            return d
        };
        return k.on(a, c)
    }
    ,
    k.version = b,
    k.toString = function() {
        return "You are running Eve " + b
    }
    ,
    typeof module != "undefined" && module.exports ? module.exports = k : typeof define != "undefined" ? define("eve", [], function() {
        return k
    }) : a.eve = k
}
)(this),
function() {
    function cF(a) {
        for (var b = 0; b < cy.length; b++)
            cy[b].el.paper == a && cy.splice(b--, 1)
    }
    function cE(b, d, e, f, h, i) {
        e = Q(e);
        var j, k, l, m = [], o, p, q, t = b.ms, u = {}, v = {}, w = {};
        if (f)
            for (y = 0,
            z = cy.length; y < z; y++) {
                var x = cy[y];
                if (x.el.id == d.id && x.anim == b) {
                    x.percent != e ? (cy.splice(y, 1),
                    l = 1) : k = x,
                    d.attr(x.totalOrigin);
                    break
                }
            }
        else
            f = +v;
        for (var y = 0, z = b.percents.length; y < z; y++) {
            if (b.percents[y] == e || b.percents[y] > f * b.top) {
                e = b.percents[y],
                p = b.percents[y - 1] || 0,
                t = t / b.top * (e - p),
                o = b.percents[y + 1],
                j = b.anim[e];
                break
            }
            f && d.attr(b.anim[b.percents[y]])
        }
        if (!!j) {
            if (!k) {
                for (var A in j)
                    if (j[g](A))
                        if (U[g](A) || d.paper.customAttributes[g](A)) {
                            u[A] = d.attr(A),
                            u[A] == null && (u[A] = T[A]),
                            v[A] = j[A];
                            switch (U[A]) {
                            case C:
                                w[A] = (v[A] - u[A]) / t;
                                break;
                            case "colour":
                                u[A] = a.getRGB(u[A]);
                                var B = a.getRGB(v[A]);
                                w[A] = {
                                    r: (B.r - u[A].r) / t,
                                    g: (B.g - u[A].g) / t,
                                    b: (B.b - u[A].b) / t
                                };
                                break;
                            case "path":
                                var D = bR(u[A], v[A])
                                  , E = D[1];
                                u[A] = D[0],
                                w[A] = [];
                                for (y = 0,
                                z = u[A].length; y < z; y++) {
                                    w[A][y] = [0];
                                    for (var F = 1, G = u[A][y].length; F < G; F++)
                                        w[A][y][F] = (E[y][F] - u[A][y][F]) / t
                                }
                                break;
                            case "transform":
                                var H = d._
                                  , I = ca(H[A], v[A]);
                                if (I) {
                                    u[A] = I.from,
                                    v[A] = I.to,
                                    w[A] = [],
                                    w[A].real = !0;
                                    for (y = 0,
                                    z = u[A].length; y < z; y++) {
                                        w[A][y] = [u[A][y][0]];
                                        for (F = 1,
                                        G = u[A][y].length; F < G; F++)
                                            w[A][y][F] = (v[A][y][F] - u[A][y][F]) / t
                                    }
                                } else {
                                    var J = d.matrix || new cb
                                      , K = {
                                        _: {
                                            transform: H.transform
                                        },
                                        getBBox: function() {
                                            return d.getBBox(1)
                                        }
                                    };
                                    u[A] = [J.a, J.b, J.c, J.d, J.e, J.f],
                                    b$(K, v[A]),
                                    v[A] = K._.transform,
                                    w[A] = [(K.matrix.a - J.a) / t, (K.matrix.b - J.b) / t, (K.matrix.c - J.c) / t, (K.matrix.d - J.d) / t, (K.matrix.e - J.e) / t, (K.matrix.f - J.f) / t]
                                }
                                break;
                            case "csv":
                                var L = r(j[A])[s](c)
                                  , M = r(u[A])[s](c);
                                if (A == "clip-rect") {
                                    u[A] = M,
                                    w[A] = [],
                                    y = M.length;
                                    while (y--)
                                        w[A][y] = (L[y] - u[A][y]) / t
                                }
                                v[A] = L;
                                break;
                            default:
                                L = [][n](j[A]),
                                M = [][n](u[A]),
                                w[A] = [],
                                y = d.paper.customAttributes[A].length;
                                while (y--)
                                    w[A][y] = ((L[y] || 0) - (M[y] || 0)) / t
                            }
                        }
                var O = j.easing
                  , P = a.easing_formulas[O];
                if (!P) {
                    P = r(O).match(N);
                    if (P && P.length == 5) {
                        var R = P;
                        P = function(a) {
                            return cC(a, +R[1], +R[2], +R[3], +R[4], t)
                        }
                    } else
                        P = bf
                }
                q = j.start || b.start || +(new Date),
                x = {
                    anim: b,
                    percent: e,
                    timestamp: q,
                    start: q + (b.del || 0),
                    status: 0,
                    initstatus: f || 0,
                    stop: !1,
                    ms: t,
                    easing: P,
                    from: u,
                    diff: w,
                    to: v,
                    el: d,
                    callback: j.callback,
                    prev: p,
                    next: o,
                    repeat: i || b.times,
                    origin: d.attr(),
                    totalOrigin: h
                },
                cy.push(x);
                if (f && !k && !l) {
                    x.stop = !0,
                    x.start = new Date - t * f;
                    if (cy.length == 1)
                        return cA()
                }
                l && (x.start = new Date - x.ms * f),
                cy.length == 1 && cz(cA)
            } else
                k.initstatus = f,
                k.start = new Date - k.ms * f;
            eve("raphael.anim.start." + d.id, d, b)
        }
    }
    function cD(a, b) {
        var c = []
          , d = {};
        this.ms = b,
        this.times = 1;
        if (a) {
            for (var e in a)
                a[g](e) && (d[Q(e)] = a[e],
                c.push(Q(e)));
            c.sort(bd)
        }
        this.anim = d,
        this.top = c[c.length - 1],
        this.percents = c
    }
    function cC(a, b, c, d, e, f) {
        function o(a, b) {
            var c, d, e, f, j, k;
            for (e = a,
            k = 0; k < 8; k++) {
                f = m(e) - a;
                if (z(f) < b)
                    return e;
                j = (3 * i * e + 2 * h) * e + g;
                if (z(j) < 1e-6)
                    break;
                e = e - f / j
            }
            c = 0,
            d = 1,
            e = a;
            if (e < c)
                return c;
            if (e > d)
                return d;
            while (c < d) {
                f = m(e);
                if (z(f - a) < b)
                    return e;
                a > f ? c = e : d = e,
                e = (d - c) / 2 + c
            }
            return e
        }
        function n(a, b) {
            var c = o(a, b);
            return ((l * c + k) * c + j) * c
        }
        function m(a) {
            return ((i * a + h) * a + g) * a
        }
        var g = 3 * b
          , h = 3 * (d - b) - g
          , i = 1 - g - h
          , j = 3 * c
          , k = 3 * (e - c) - j
          , l = 1 - j - k;
        return n(a, 1 / (200 * f))
    }
    function cq() {
        return this.x + q + this.y + q + this.width + " × " + this.height
    }
    function cp() {
        return this.x + q + this.y
    }
    function cb(a, b, c, d, e, f) {
        a != null ? (this.a = +a,
        this.b = +b,
        this.c = +c,
        this.d = +d,
        this.e = +e,
        this.f = +f) : (this.a = 1,
        this.b = 0,
        this.c = 0,
        this.d = 1,
        this.e = 0,
        this.f = 0)
    }
    function bH(b, c, d) {
        b = a._path2curve(b),
        c = a._path2curve(c);
        var e, f, g, h, i, j, k, l, m, n, o = d ? 0 : [];
        for (var p = 0, q = b.length; p < q; p++) {
            var r = b[p];
            if (r[0] == "M")
                e = i = r[1],
                f = j = r[2];
            else {
                r[0] == "C" ? (m = [e, f].concat(r.slice(1)),
                e = m[6],
                f = m[7]) : (m = [e, f, e, f, i, j, i, j],
                e = i,
                f = j);
                for (var s = 0, t = c.length; s < t; s++) {
                    var u = c[s];
                    if (u[0] == "M")
                        g = k = u[1],
                        h = l = u[2];
                    else {
                        u[0] == "C" ? (n = [g, h].concat(u.slice(1)),
                        g = n[6],
                        h = n[7]) : (n = [g, h, g, h, k, l, k, l],
                        g = k,
                        h = l);
                        var v = bG(m, n, d);
                        if (d)
                            o += v;
                        else {
                            for (var w = 0, x = v.length; w < x; w++)
                                v[w].segment1 = p,
                                v[w].segment2 = s,
                                v[w].bez1 = m,
                                v[w].bez2 = n;
                            o = o.concat(v)
                        }
                    }
                }
            }
        }
        return o
    }
    function bG(b, c, d) {
        var e = a.bezierBBox(b)
          , f = a.bezierBBox(c);
        if (!a.isBBoxIntersect(e, f))
            return d ? 0 : [];
        var g = bB.apply(0, b)
          , h = bB.apply(0, c)
          , i = ~~(g / 5)
          , j = ~~(h / 5)
          , k = []
          , l = []
          , m = {}
          , n = d ? 0 : [];
        for (var o = 0; o < i + 1; o++) {
            var p = a.findDotsAtSegment.apply(a, b.concat(o / i));
            k.push({
                x: p.x,
                y: p.y,
                t: o / i
            })
        }
        for (o = 0; o < j + 1; o++)
            p = a.findDotsAtSegment.apply(a, c.concat(o / j)),
            l.push({
                x: p.x,
                y: p.y,
                t: o / j
            });
        for (o = 0; o < i; o++)
            for (var q = 0; q < j; q++) {
                var r = k[o]
                  , s = k[o + 1]
                  , t = l[q]
                  , u = l[q + 1]
                  , v = z(s.x - r.x) < .001 ? "y" : "x"
                  , w = z(u.x - t.x) < .001 ? "y" : "x"
                  , x = bD(r.x, r.y, s.x, s.y, t.x, t.y, u.x, u.y);
                if (x) {
                    if (m[x.x.toFixed(4)] == x.y.toFixed(4))
                        continue;
                    m[x.x.toFixed(4)] = x.y.toFixed(4);
                    var y = r.t + z((x[v] - r[v]) / (s[v] - r[v])) * (s.t - r.t)
                      , A = t.t + z((x[w] - t[w]) / (u[w] - t[w])) * (u.t - t.t);
                    y >= 0 && y <= 1 && A >= 0 && A <= 1 && (d ? n++ : n.push({
                        x: x.x,
                        y: x.y,
                        t1: y,
                        t2: A
                    }))
                }
            }
        return n
    }
    function bF(a, b) {
        return bG(a, b, 1)
    }
    function bE(a, b) {
        return bG(a, b)
    }
    function bD(a, b, c, d, e, f, g, h) {
        if (!(x(a, c) < y(e, g) || y(a, c) > x(e, g) || x(b, d) < y(f, h) || y(b, d) > x(f, h))) {
            var i = (a * d - b * c) * (e - g) - (a - c) * (e * h - f * g)
              , j = (a * d - b * c) * (f - h) - (b - d) * (e * h - f * g)
              , k = (a - c) * (f - h) - (b - d) * (e - g);
            if (!k)
                return;
            var l = i / k
              , m = j / k
              , n = +l.toFixed(2)
              , o = +m.toFixed(2);
            if (n < +y(a, c).toFixed(2) || n > +x(a, c).toFixed(2) || n < +y(e, g).toFixed(2) || n > +x(e, g).toFixed(2) || o < +y(b, d).toFixed(2) || o > +x(b, d).toFixed(2) || o < +y(f, h).toFixed(2) || o > +x(f, h).toFixed(2))
                return;
            return {
                x: l,
                y: m
            }
        }
    }
    function bC(a, b, c, d, e, f, g, h, i) {
        if (!(i < 0 || bB(a, b, c, d, e, f, g, h) < i)) {
            var j = 1, k = j / 2, l = j - k, m, n = .01;
            m = bB(a, b, c, d, e, f, g, h, l);
            while (z(m - i) > n)
                k /= 2,
                l += (m < i ? 1 : -1) * k,
                m = bB(a, b, c, d, e, f, g, h, l);
            return l
        }
    }
    function bB(a, b, c, d, e, f, g, h, i) {
        i == null && (i = 1),
        i = i > 1 ? 1 : i < 0 ? 0 : i;
        var j = i / 2
          , k = 12
          , l = [-0.1252, .1252, -0.3678, .3678, -0.5873, .5873, -0.7699, .7699, -0.9041, .9041, -0.9816, .9816]
          , m = [.2491, .2491, .2335, .2335, .2032, .2032, .1601, .1601, .1069, .1069, .0472, .0472]
          , n = 0;
        for (var o = 0; o < k; o++) {
            var p = j * l[o] + j
              , q = bA(p, a, c, e, g)
              , r = bA(p, b, d, f, h)
              , s = q * q + r * r;
            n += m[o] * w.sqrt(s)
        }
        return j * n
    }
    function bA(a, b, c, d, e) {
        var f = -3 * b + 9 * c - 9 * d + 3 * e
          , g = a * f + 6 * b - 12 * c + 6 * d;
        return a * g - 3 * b + 3 * c
    }
    function by(a, b) {
        var c = [];
        for (var d = 0, e = a.length; e - 2 * !b > d; d += 2) {
            var f = [{
                x: +a[d - 2],
                y: +a[d - 1]
            }, {
                x: +a[d],
                y: +a[d + 1]
            }, {
                x: +a[d + 2],
                y: +a[d + 3]
            }, {
                x: +a[d + 4],
                y: +a[d + 5]
            }];
            b ? d ? e - 4 == d ? f[3] = {
                x: +a[0],
                y: +a[1]
            } : e - 2 == d && (f[2] = {
                x: +a[0],
                y: +a[1]
            },
            f[3] = {
                x: +a[2],
                y: +a[3]
            }) : f[0] = {
                x: +a[e - 2],
                y: +a[e - 1]
            } : e - 4 == d ? f[3] = f[2] : d || (f[0] = {
                x: +a[d],
                y: +a[d + 1]
            }),
            c.push(["C", (-f[0].x + 6 * f[1].x + f[2].x) / 6, (-f[0].y + 6 * f[1].y + f[2].y) / 6, (f[1].x + 6 * f[2].x - f[3].x) / 6, (f[1].y + 6 * f[2].y - f[3].y) / 6, f[2].x, f[2].y])
        }
        return c
    }
    function bx() {
        return this.hex
    }
    function bv(a, b, c) {
        function d() {
            var e = Array.prototype.slice.call(arguments, 0)
              , f = e.join("␀")
              , h = d.cache = d.cache || {}
              , i = d.count = d.count || [];
            if (h[g](f)) {
                bu(i, f);
                return c ? c(h[f]) : h[f]
            }
            i.length >= 1e3 && delete h[i.shift()],
            i.push(f),
            h[f] = a[m](b, e);
            return c ? c(h[f]) : h[f]
        }
        return d
    }
    function bu(a, b) {
        for (var c = 0, d = a.length; c < d; c++)
            if (a[c] === b)
                return a.push(a.splice(c, 1)[0])
    }
    function bm(a) {
        if (Object(a) !== a)
            return a;
        var b = new a.constructor;
        for (var c in a)
            a[g](c) && (b[c] = bm(a[c]));
        return b
    }
    function a(c) {
        if (a.is(c, "function"))
            return b ? c() : eve.on("raphael.DOMload", c);
        if (a.is(c, E))
            return a._engine.create[m](a, c.splice(0, 3 + a.is(c[0], C))).add(c);
        var d = Array.prototype.slice.call(arguments, 0);
        if (a.is(d[d.length - 1], "function")) {
            var e = d.pop();
            return b ? e.call(a._engine.create[m](a, d)) : eve.on("raphael.DOMload", function() {
                e.call(a._engine.create[m](a, d))
            })
        }
        return a._engine.create[m](a, arguments)
    }
    a.version = "2.1.0",
    a.eve = eve;
    var b, c = /[, ]+/, d = {
        circle: 1,
        rect: 1,
        path: 1,
        ellipse: 1,
        text: 1,
        image: 1
    }, e = /\{(\d+)\}/g, f = "prototype", g = "hasOwnProperty", h = {
        doc: document,
        win: window
    }, i = {
        was: Object.prototype[g].call(h.win, "Raphael"),
        is: h.win.Raphael
    }, j = function() {
        this.ca = this.customAttributes = {}
    }, k, l = "appendChild", m = "apply", n = "concat", o = "createTouch"in h.doc, p = "", q = " ", r = String, s = "split", t = "click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel"[s](q), u = {
        mousedown: "touchstart",
        mousemove: "touchmove",
        mouseup: "touchend"
    }, v = r.prototype.toLowerCase, w = Math, x = w.max, y = w.min, z = w.abs, A = w.pow, B = w.PI, C = "number", D = "string", E = "array", F = "toString", G = "fill", H = Object.prototype.toString, I = {}, J = "push", K = a._ISURL = /^url\(['"]?([^\)]+?)['"]?\)$/i, L = /^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i, M = {
        NaN: 1,
        Infinity: 1,
        "-Infinity": 1
    }, N = /^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/, O = w.round, P = "setAttribute", Q = parseFloat, R = parseInt, S = r.prototype.toUpperCase, T = a._availableAttrs = {
        "arrow-end": "none",
        "arrow-start": "none",
        blur: 0,
        "clip-rect": "0 0 1e9 1e9",
        cursor: "default",
        cx: 0,
        cy: 0,
        fill: "#fff",
        "fill-opacity": 1,
        font: '10px "Arial"',
        "font-family": '"Arial"',
        "font-size": "10",
        "font-style": "normal",
        "font-weight": 400,
        gradient: 0,
        height: 0,
        href: "http://raphaeljs.com/",
        "letter-spacing": 0,
        opacity: 1,
        path: "M0,0",
        r: 0,
        rx: 0,
        ry: 0,
        src: "",
        stroke: "#000",
        "stroke-dasharray": "",
        "stroke-linecap": "butt",
        "stroke-linejoin": "butt",
        "stroke-miterlimit": 0,
        "stroke-opacity": 1,
        "stroke-width": 1,
        target: "_blank",
        "text-anchor": "middle",
        title: "Raphael",
        transform: "",
        width: 0,
        x: 0,
        y: 0
    }, U = a._availableAnimAttrs = {
        blur: C,
        "clip-rect": "csv",
        cx: C,
        cy: C,
        fill: "colour",
        "fill-opacity": C,
        "font-size": C,
        height: C,
        opacity: C,
        path: "path",
        r: C,
        rx: C,
        ry: C,
        stroke: "colour",
        "stroke-opacity": C,
        "stroke-width": C,
        transform: "transform",
        width: C,
        x: C,
        y: C
    }, V = /[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]/g, W = /[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/, X = {
        hs: 1,
        rg: 1
    }, Y = /,?([achlmqrstvxz]),?/gi, Z = /([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig, $ = /([rstm])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig, _ = /(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/ig, ba = a._radial_gradient = /^r(?:\(([^,]+?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*([^\)]+?)\))?/, bb = {}, bc = function(a, b) {
        return a.key - b.key
    }, bd = function(a, b) {
        return Q(a) - Q(b)
    }, be = function() {}, bf = function(a) {
        return a
    }, bg = a._rectPath = function(a, b, c, d, e) {
        if (e)
            return [["M", a + e, b], ["l", c - e * 2, 0], ["a", e, e, 0, 0, 1, e, e], ["l", 0, d - e * 2], ["a", e, e, 0, 0, 1, -e, e], ["l", e * 2 - c, 0], ["a", e, e, 0, 0, 1, -e, -e], ["l", 0, e * 2 - d], ["a", e, e, 0, 0, 1, e, -e], ["z"]];
        return [["M", a, b], ["l", c, 0], ["l", 0, d], ["l", -c, 0], ["z"]]
    }
    , bh = function(a, b, c, d) {
        d == null && (d = c);
        return [["M", a, b], ["m", 0, -d], ["a", c, d, 0, 1, 1, 0, 2 * d], ["a", c, d, 0, 1, 1, 0, -2 * d], ["z"]]
    }, bi = a._getPath = {
        path: function(a) {
            return a.attr("path")
        },
        circle: function(a) {
            var b = a.attrs;
            return bh(b.cx, b.cy, b.r)
        },
        ellipse: function(a) {
            var b = a.attrs;
            return bh(b.cx, b.cy, b.rx, b.ry)
        },
        rect: function(a) {
            var b = a.attrs;
            return bg(b.x, b.y, b.width, b.height, b.r)
        },
        image: function(a) {
            var b = a.attrs;
            return bg(b.x, b.y, b.width, b.height)
        },
        text: function(a) {
            var b = a._getBBox();
            return bg(b.x, b.y, b.width, b.height)
        }
    }, bj = a.mapPath = function(a, b) {
        if (!b)
            return a;
        var c, d, e, f, g, h, i;
        a = bR(a);
        for (e = 0,
        g = a.length; e < g; e++) {
            i = a[e];
            for (f = 1,
            h = i.length; f < h; f += 2)
                c = b.x(i[f], i[f + 1]),
                d = b.y(i[f], i[f + 1]),
                i[f] = c,
                i[f + 1] = d
        }
        return a
    }
    ;
    a._g = h,
    a.type = h.win.SVGAngle || h.doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1") ? "SVG" : "VML";
    if (a.type == "VML") {
        var bk = h.doc.createElement("div"), bl;
        bk.innerHTML = '<v:shape adj="1"/>',
        bl = bk.firstChild,
        bl.style.behavior = "url(#default#VML)";
        if (!bl || typeof bl.adj != "object")
            return a.type = p;
        bk = null
    }
    a.svg = !(a.vml = a.type == "VML"),
    a._Paper = j,
    a.fn = k = j.prototype = a.prototype,
    a._id = 0,
    a._oid = 0,
    a.is = function(a, b) {
        b = v.call(b);
        if (b == "finite")
            return !M[g](+a);
        if (b == "array")
            return a instanceof Array;
        return b == "null" && a === null || b == typeof a && a !== null || b == "object" && a === Object(a) || b == "array" && Array.isArray && Array.isArray(a) || H.call(a).slice(8, -1).toLowerCase() == b
    }
    ,
    a.angle = function(b, c, d, e, f, g) {
        if (f == null) {
            var h = b - d
              , i = c - e;
            if (!h && !i)
                return 0;
            return (180 + w.atan2(-i, -h) * 180 / B + 360) % 360
        }
        return a.angle(b, c, f, g) - a.angle(d, e, f, g)
    }
    ,
    a.rad = function(a) {
        return a % 360 * B / 180
    }
    ,
    a.deg = function(a) {
        return a * 180 / B % 360
    }
    ,
    a.snapTo = function(b, c, d) {
        d = a.is(d, "finite") ? d : 10;
        if (a.is(b, E)) {
            var e = b.length;
            while (e--)
                if (z(b[e] - c) <= d)
                    return b[e]
        } else {
            b = +b;
            var f = c % b;
            if (f < d)
                return c - f;
            if (f > b - d)
                return c - f + b
        }
        return c
    }
    ;
    var bn = a.createUUID = function(a, b) {
        return function() {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(a, b).toUpperCase()
        }
    }(/[xy]/g, function(a) {
        var b = w.random() * 16 | 0
          , c = a == "x" ? b : b & 3 | 8;
        return c.toString(16)
    });
    a.setWindow = function(b) {
        eve("raphael.setWindow", a, h.win, b),
        h.win = b,
        h.doc = h.win.document,
        a._engine.initWin && a._engine.initWin(h.win)
    }
    ;
    var bo = function(b) {
        if (a.vml) {
            var c = /^\s+|\s+$/g, d;
            try {
                var e = new ActiveXObject("htmlfile");
                e.write("<body>"),
                e.close(),
                d = e.body
            } catch (f) {
                d = createPopup().document.body
            }
            var g = d.createTextRange();
            bo = bv(function(a) {
                try {
                    d.style.color = r(a).replace(c, p);
                    var b = g.queryCommandValue("ForeColor");
                    b = (b & 255) << 16 | b & 65280 | (b & 16711680) >>> 16;
                    return "#" + ("000000" + b.toString(16)).slice(-6)
                } catch (e) {
                    return "none"
                }
            })
        } else {
            var i = h.doc.createElement("i");
            i.title = "Raphaël Colour Picker",
            i.style.display = "none",
            h.doc.body.appendChild(i),
            bo = bv(function(a) {
                i.style.color = a;
                return h.doc.defaultView.getComputedStyle(i, p).getPropertyValue("color")
            })
        }
        return bo(b)
    }
      , bp = function() {
        return "hsb(" + [this.h, this.s, this.b] + ")"
    }
      , bq = function() {
        return "hsl(" + [this.h, this.s, this.l] + ")"
    }
      , br = function() {
        return this.hex
    }
      , bs = function(b, c, d) {
        c == null && a.is(b, "object") && "r"in b && "g"in b && "b"in b && (d = b.b,
        c = b.g,
        b = b.r);
        if (c == null && a.is(b, D)) {
            var e = a.getRGB(b);
            b = e.r,
            c = e.g,
            d = e.b
        }
        if (b > 1 || c > 1 || d > 1)
            b /= 255,
            c /= 255,
            d /= 255;
        return [b, c, d]
    }
      , bt = function(b, c, d, e) {
        b *= 255,
        c *= 255,
        d *= 255;
        var f = {
            r: b,
            g: c,
            b: d,
            hex: a.rgb(b, c, d),
            toString: br
        };
        a.is(e, "finite") && (f.opacity = e);
        return f
    };
    a.color = function(b) {
        var c;
        a.is(b, "object") && "h"in b && "s"in b && "b"in b ? (c = a.hsb2rgb(b),
        b.r = c.r,
        b.g = c.g,
        b.b = c.b,
        b.hex = c.hex) : a.is(b, "object") && "h"in b && "s"in b && "l"in b ? (c = a.hsl2rgb(b),
        b.r = c.r,
        b.g = c.g,
        b.b = c.b,
        b.hex = c.hex) : (a.is(b, "string") && (b = a.getRGB(b)),
        a.is(b, "object") && "r"in b && "g"in b && "b"in b ? (c = a.rgb2hsl(b),
        b.h = c.h,
        b.s = c.s,
        b.l = c.l,
        c = a.rgb2hsb(b),
        b.v = c.b) : (b = {
            hex: "none"
        },
        b.r = b.g = b.b = b.h = b.s = b.v = b.l = -1)),
        b.toString = br;
        return b
    }
    ,
    a.hsb2rgb = function(a, b, c, d) {
        this.is(a, "object") && "h"in a && "s"in a && "b"in a && (c = a.b,
        b = a.s,
        a = a.h,
        d = a.o),
        a *= 360;
        var e, f, g, h, i;
        a = a % 360 / 60,
        i = c * b,
        h = i * (1 - z(a % 2 - 1)),
        e = f = g = c - i,
        a = ~~a,
        e += [i, h, 0, 0, h, i][a],
        f += [h, i, i, h, 0, 0][a],
        g += [0, 0, h, i, i, h][a];
        return bt(e, f, g, d)
    }
    ,
    a.hsl2rgb = function(a, b, c, d) {
        this.is(a, "object") && "h"in a && "s"in a && "l"in a && (c = a.l,
        b = a.s,
        a = a.h);
        if (a > 1 || b > 1 || c > 1)
            a /= 360,
            b /= 100,
            c /= 100;
        a *= 360;
        var e, f, g, h, i;
        a = a % 360 / 60,
        i = 2 * b * (c < .5 ? c : 1 - c),
        h = i * (1 - z(a % 2 - 1)),
        e = f = g = c - i / 2,
        a = ~~a,
        e += [i, h, 0, 0, h, i][a],
        f += [h, i, i, h, 0, 0][a],
        g += [0, 0, h, i, i, h][a];
        return bt(e, f, g, d)
    }
    ,
    a.rgb2hsb = function(a, b, c) {
        c = bs(a, b, c),
        a = c[0],
        b = c[1],
        c = c[2];
        var d, e, f, g;
        f = x(a, b, c),
        g = f - y(a, b, c),
        d = g == 0 ? null : f == a ? (b - c) / g : f == b ? (c - a) / g + 2 : (a - b) / g + 4,
        d = (d + 360) % 6 * 60 / 360,
        e = g == 0 ? 0 : g / f;
        return {
            h: d,
            s: e,
            b: f,
            toString: bp
        }
    }
    ,
    a.rgb2hsl = function(a, b, c) {
        c = bs(a, b, c),
        a = c[0],
        b = c[1],
        c = c[2];
        var d, e, f, g, h, i;
        g = x(a, b, c),
        h = y(a, b, c),
        i = g - h,
        d = i == 0 ? null : g == a ? (b - c) / i : g == b ? (c - a) / i + 2 : (a - b) / i + 4,
        d = (d + 360) % 6 * 60 / 360,
        f = (g + h) / 2,
        e = i == 0 ? 0 : f < .5 ? i / (2 * f) : i / (2 - 2 * f);
        return {
            h: d,
            s: e,
            l: f,
            toString: bq
        }
    }
    ,
    a._path2string = function() {
        return this.join(",").replace(Y, "$1")
    }
    ;
    var bw = a._preload = function(a, b) {
        var c = h.doc.createElement("img");
        c.style.cssText = "position:absolute;left:-9999em;top:-9999em",
        c.onload = function() {
            b.call(this),
            this.onload = null,
            h.doc.body.removeChild(this)
        }
        ,
        c.onerror = function() {
            h.doc.body.removeChild(this)
        }
        ,
        h.doc.body.appendChild(c),
        c.src = a
    }
    ;
    a.getRGB = bv(function(b) {
        if (!b || !!((b = r(b)).indexOf("-") + 1))
            return {
                r: -1,
                g: -1,
                b: -1,
                hex: "none",
                error: 1,
                toString: bx
            };
        if (b == "none")
            return {
                r: -1,
                g: -1,
                b: -1,
                hex: "none",
                toString: bx
            };
        !X[g](b.toLowerCase().substring(0, 2)) && b.charAt() != "#" && (b = bo(b));
        var c, d, e, f, h, i, j, k = b.match(L);
        if (k) {
            k[2] && (f = R(k[2].substring(5), 16),
            e = R(k[2].substring(3, 5), 16),
            d = R(k[2].substring(1, 3), 16)),
            k[3] && (f = R((i = k[3].charAt(3)) + i, 16),
            e = R((i = k[3].charAt(2)) + i, 16),
            d = R((i = k[3].charAt(1)) + i, 16)),
            k[4] && (j = k[4][s](W),
            d = Q(j[0]),
            j[0].slice(-1) == "%" && (d *= 2.55),
            e = Q(j[1]),
            j[1].slice(-1) == "%" && (e *= 2.55),
            f = Q(j[2]),
            j[2].slice(-1) == "%" && (f *= 2.55),
            k[1].toLowerCase().slice(0, 4) == "rgba" && (h = Q(j[3])),
            j[3] && j[3].slice(-1) == "%" && (h /= 100));
            if (k[5]) {
                j = k[5][s](W),
                d = Q(j[0]),
                j[0].slice(-1) == "%" && (d *= 2.55),
                e = Q(j[1]),
                j[1].slice(-1) == "%" && (e *= 2.55),
                f = Q(j[2]),
                j[2].slice(-1) == "%" && (f *= 2.55),
                (j[0].slice(-3) == "deg" || j[0].slice(-1) == "°") && (d /= 360),
                k[1].toLowerCase().slice(0, 4) == "hsba" && (h = Q(j[3])),
                j[3] && j[3].slice(-1) == "%" && (h /= 100);
                return a.hsb2rgb(d, e, f, h)
            }
            if (k[6]) {
                j = k[6][s](W),
                d = Q(j[0]),
                j[0].slice(-1) == "%" && (d *= 2.55),
                e = Q(j[1]),
                j[1].slice(-1) == "%" && (e *= 2.55),
                f = Q(j[2]),
                j[2].slice(-1) == "%" && (f *= 2.55),
                (j[0].slice(-3) == "deg" || j[0].slice(-1) == "°") && (d /= 360),
                k[1].toLowerCase().slice(0, 4) == "hsla" && (h = Q(j[3])),
                j[3] && j[3].slice(-1) == "%" && (h /= 100);
                return a.hsl2rgb(d, e, f, h)
            }
            k = {
                r: d,
                g: e,
                b: f,
                toString: bx
            },
            k.hex = "#" + (16777216 | f | e << 8 | d << 16).toString(16).slice(1),
            a.is(h, "finite") && (k.opacity = h);
            return k
        }
        return {
            r: -1,
            g: -1,
            b: -1,
            hex: "none",
            error: 1,
            toString: bx
        }
    }, a),
    a.hsb = bv(function(b, c, d) {
        return a.hsb2rgb(b, c, d).hex
    }),
    a.hsl = bv(function(b, c, d) {
        return a.hsl2rgb(b, c, d).hex
    }),
    a.rgb = bv(function(a, b, c) {
        return "#" + (16777216 | c | b << 8 | a << 16).toString(16).slice(1)
    }),
    a.getColor = function(a) {
        var b = this.getColor.start = this.getColor.start || {
            h: 0,
            s: 1,
            b: a || .75
        }
          , c = this.hsb2rgb(b.h, b.s, b.b);
        b.h += .075,
        b.h > 1 && (b.h = 0,
        b.s -= .2,
        b.s <= 0 && (this.getColor.start = {
            h: 0,
            s: 1,
            b: b.b
        }));
        return c.hex
    }
    ,
    a.getColor.reset = function() {
        delete this.start
    }
    ,
    a.parsePathString = function(b) {
        if (!b)
            return null;
        var c = bz(b);
        if (c.arr)
            return bJ(c.arr);
        var d = {
            a: 7,
            c: 6,
            h: 1,
            l: 2,
            m: 2,
            r: 4,
            q: 4,
            s: 4,
            t: 2,
            v: 1,
            z: 0
        }
          , e = [];
        a.is(b, E) && a.is(b[0], E) && (e = bJ(b)),
        e.length || r(b).replace(Z, function(a, b, c) {
            var f = []
              , g = b.toLowerCase();
            c.replace(_, function(a, b) {
                b && f.push(+b)
            }),
            g == "m" && f.length > 2 && (e.push([b][n](f.splice(0, 2))),
            g = "l",
            b = b == "m" ? "l" : "L");
            if (g == "r")
                e.push([b][n](f));
            else
                while (f.length >= d[g]) {
                    e.push([b][n](f.splice(0, d[g])));
                    if (!d[g])
                        break
                }
        }),
        e.toString = a._path2string,
        c.arr = bJ(e);
        return e
    }
    ,
    a.parseTransformString = bv(function(b) {
        if (!b)
            return null;
        var c = {
            r: 3,
            s: 4,
            t: 2,
            m: 6
        }
          , d = [];
        a.is(b, E) && a.is(b[0], E) && (d = bJ(b)),
        d.length || r(b).replace($, function(a, b, c) {
            var e = []
              , f = v.call(b);
            c.replace(_, function(a, b) {
                b && e.push(+b)
            }),
            d.push([b][n](e))
        }),
        d.toString = a._path2string;
        return d
    });
    var bz = function(a) {
        var b = bz.ps = bz.ps || {};
        b[a] ? b[a].sleep = 100 : b[a] = {
            sleep: 100
        },
        setTimeout(function() {
            for (var c in b)
                b[g](c) && c != a && (b[c].sleep--,
                !b[c].sleep && delete b[c])
        });
        return b[a]
    };
    a.findDotsAtSegment = function(a, b, c, d, e, f, g, h, i) {
        var j = 1 - i
          , k = A(j, 3)
          , l = A(j, 2)
          , m = i * i
          , n = m * i
          , o = k * a + l * 3 * i * c + j * 3 * i * i * e + n * g
          , p = k * b + l * 3 * i * d + j * 3 * i * i * f + n * h
          , q = a + 2 * i * (c - a) + m * (e - 2 * c + a)
          , r = b + 2 * i * (d - b) + m * (f - 2 * d + b)
          , s = c + 2 * i * (e - c) + m * (g - 2 * e + c)
          , t = d + 2 * i * (f - d) + m * (h - 2 * f + d)
          , u = j * a + i * c
          , v = j * b + i * d
          , x = j * e + i * g
          , y = j * f + i * h
          , z = 90 - w.atan2(q - s, r - t) * 180 / B;
        (q > s || r < t) && (z += 180);
        return {
            x: o,
            y: p,
            m: {
                x: q,
                y: r
            },
            n: {
                x: s,
                y: t
            },
            start: {
                x: u,
                y: v
            },
            end: {
                x: x,
                y: y
            },
            alpha: z
        }
    }
    ,
    a.bezierBBox = function(b, c, d, e, f, g, h, i) {
        a.is(b, "array") || (b = [b, c, d, e, f, g, h, i]);
        var j = bQ.apply(null, b);
        return {
            x: j.min.x,
            y: j.min.y,
            x2: j.max.x,
            y2: j.max.y,
            width: j.max.x - j.min.x,
            height: j.max.y - j.min.y
        }
    }
    ,
    a.isPointInsideBBox = function(a, b, c) {
        return b >= a.x && b <= a.x2 && c >= a.y && c <= a.y2
    }
    ,
    a.isBBoxIntersect = function(b, c) {
        var d = a.isPointInsideBBox;
        return d(c, b.x, b.y) || d(c, b.x2, b.y) || d(c, b.x, b.y2) || d(c, b.x2, b.y2) || d(b, c.x, c.y) || d(b, c.x2, c.y) || d(b, c.x, c.y2) || d(b, c.x2, c.y2) || (b.x < c.x2 && b.x > c.x || c.x < b.x2 && c.x > b.x) && (b.y < c.y2 && b.y > c.y || c.y < b.y2 && c.y > b.y)
    }
    ,
    a.pathIntersection = function(a, b) {
        return bH(a, b)
    }
    ,
    a.pathIntersectionNumber = function(a, b) {
        return bH(a, b, 1)
    }
    ,
    a.isPointInsidePath = function(b, c, d) {
        var e = a.pathBBox(b);
        return a.isPointInsideBBox(e, c, d) && bH(b, [["M", c, d], ["H", e.x2 + 10]], 1) % 2 == 1
    }
    ,
    a._removedFactory = function(a) {
        return function() {
            eve("raphael.log", null, "Raphaël: you are calling to method “" + a + "” of removed object", a)
        }
    }
    ;
    var bI = a.pathBBox = function(a) {
        var b = bz(a);
        if (b.bbox)
            return b.bbox;
        if (!a)
            return {
                x: 0,
                y: 0,
                width: 0,
                height: 0,
                x2: 0,
                y2: 0
            };
        a = bR(a);
        var c = 0, d = 0, e = [], f = [], g;
        for (var h = 0, i = a.length; h < i; h++) {
            g = a[h];
            if (g[0] == "M")
                c = g[1],
                d = g[2],
                e.push(c),
                f.push(d);
            else {
                var j = bQ(c, d, g[1], g[2], g[3], g[4], g[5], g[6]);
                e = e[n](j.min.x, j.max.x),
                f = f[n](j.min.y, j.max.y),
                c = g[5],
                d = g[6]
            }
        }
        var k = y[m](0, e)
          , l = y[m](0, f)
          , o = x[m](0, e)
          , p = x[m](0, f)
          , q = {
            x: k,
            y: l,
            x2: o,
            y2: p,
            width: o - k,
            height: p - l
        };
        b.bbox = bm(q);
        return q
    }
      , bJ = function(b) {
        var c = bm(b);
        c.toString = a._path2string;
        return c
    }
      , bK = a._pathToRelative = function(b) {
        var c = bz(b);
        if (c.rel)
            return bJ(c.rel);
        if (!a.is(b, E) || !a.is(b && b[0], E))
            b = a.parsePathString(b);
        var d = []
          , e = 0
          , f = 0
          , g = 0
          , h = 0
          , i = 0;
        b[0][0] == "M" && (e = b[0][1],
        f = b[0][2],
        g = e,
        h = f,
        i++,
        d.push(["M", e, f]));
        for (var j = i, k = b.length; j < k; j++) {
            var l = d[j] = []
              , m = b[j];
            if (m[0] != v.call(m[0])) {
                l[0] = v.call(m[0]);
                switch (l[0]) {
                case "a":
                    l[1] = m[1],
                    l[2] = m[2],
                    l[3] = m[3],
                    l[4] = m[4],
                    l[5] = m[5],
                    l[6] = +(m[6] - e).toFixed(3),
                    l[7] = +(m[7] - f).toFixed(3);
                    break;
                case "v":
                    l[1] = +(m[1] - f).toFixed(3);
                    break;
                case "m":
                    g = m[1],
                    h = m[2];
                default:
                    for (var n = 1, o = m.length; n < o; n++)
                        l[n] = +(m[n] - (n % 2 ? e : f)).toFixed(3)
                }
            } else {
                l = d[j] = [],
                m[0] == "m" && (g = m[1] + e,
                h = m[2] + f);
                for (var p = 0, q = m.length; p < q; p++)
                    d[j][p] = m[p]
            }
            var r = d[j].length;
            switch (d[j][0]) {
            case "z":
                e = g,
                f = h;
                break;
            case "h":
                e += +d[j][r - 1];
                break;
            case "v":
                f += +d[j][r - 1];
                break;
            default:
                e += +d[j][r - 2],
                f += +d[j][r - 1]
            }
        }
        d.toString = a._path2string,
        c.rel = bJ(d);
        return d
    }
      , bL = a._pathToAbsolute = function(b) {
        var c = bz(b);
        if (c.abs)
            return bJ(c.abs);
        if (!a.is(b, E) || !a.is(b && b[0], E))
            b = a.parsePathString(b);
        if (!b || !b.length)
            return [["M", 0, 0]];
        var d = []
          , e = 0
          , f = 0
          , g = 0
          , h = 0
          , i = 0;
        b[0][0] == "M" && (e = +b[0][1],
        f = +b[0][2],
        g = e,
        h = f,
        i++,
        d[0] = ["M", e, f]);
        var j = b.length == 3 && b[0][0] == "M" && b[1][0].toUpperCase() == "R" && b[2][0].toUpperCase() == "Z";
        for (var k, l, m = i, o = b.length; m < o; m++) {
            d.push(k = []),
            l = b[m];
            if (l[0] != S.call(l[0])) {
                k[0] = S.call(l[0]);
                switch (k[0]) {
                case "A":
                    k[1] = l[1],
                    k[2] = l[2],
                    k[3] = l[3],
                    k[4] = l[4],
                    k[5] = l[5],
                    k[6] = +(l[6] + e),
                    k[7] = +(l[7] + f);
                    break;
                case "V":
                    k[1] = +l[1] + f;
                    break;
                case "H":
                    k[1] = +l[1] + e;
                    break;
                case "R":
                    var p = [e, f][n](l.slice(1));
                    for (var q = 2, r = p.length; q < r; q++)
                        p[q] = +p[q] + e,
                        p[++q] = +p[q] + f;
                    d.pop(),
                    d = d[n](by(p, j));
                    break;
                case "M":
                    g = +l[1] + e,
                    h = +l[2] + f;
                default:
                    for (q = 1,
                    r = l.length; q < r; q++)
                        k[q] = +l[q] + (q % 2 ? e : f)
                }
            } else if (l[0] == "R")
                p = [e, f][n](l.slice(1)),
                d.pop(),
                d = d[n](by(p, j)),
                k = ["R"][n](l.slice(-2));
            else
                for (var s = 0, t = l.length; s < t; s++)
                    k[s] = l[s];
            switch (k[0]) {
            case "Z":
                e = g,
                f = h;
                break;
            case "H":
                e = k[1];
                break;
            case "V":
                f = k[1];
                break;
            case "M":
                g = k[k.length - 2],
                h = k[k.length - 1];
            default:
                e = k[k.length - 2],
                f = k[k.length - 1]
            }
        }
        d.toString = a._path2string,
        c.abs = bJ(d);
        return d
    }
      , bM = function(a, b, c, d) {
        return [a, b, c, d, c, d]
    }
      , bN = function(a, b, c, d, e, f) {
        var g = 1 / 3
          , h = 2 / 3;
        return [g * a + h * c, g * b + h * d, g * e + h * c, g * f + h * d, e, f]
    }
      , bO = function(a, b, c, d, e, f, g, h, i, j) {
        var k = B * 120 / 180, l = B / 180 * (+e || 0), m = [], o, p = bv(function(a, b, c) {
            var d = a * w.cos(c) - b * w.sin(c)
              , e = a * w.sin(c) + b * w.cos(c);
            return {
                x: d,
                y: e
            }
        });
        if (!j) {
            o = p(a, b, -l),
            a = o.x,
            b = o.y,
            o = p(h, i, -l),
            h = o.x,
            i = o.y;
            var q = w.cos(B / 180 * e)
              , r = w.sin(B / 180 * e)
              , t = (a - h) / 2
              , u = (b - i) / 2
              , v = t * t / (c * c) + u * u / (d * d);
            v > 1 && (v = w.sqrt(v),
            c = v * c,
            d = v * d);
            var x = c * c
              , y = d * d
              , A = (f == g ? -1 : 1) * w.sqrt(z((x * y - x * u * u - y * t * t) / (x * u * u + y * t * t)))
              , C = A * c * u / d + (a + h) / 2
              , D = A * -d * t / c + (b + i) / 2
              , E = w.asin(((b - D) / d).toFixed(9))
              , F = w.asin(((i - D) / d).toFixed(9));
            E = a < C ? B - E : E,
            F = h < C ? B - F : F,
            E < 0 && (E = B * 2 + E),
            F < 0 && (F = B * 2 + F),
            g && E > F && (E = E - B * 2),
            !g && F > E && (F = F - B * 2)
        } else
            E = j[0],
            F = j[1],
            C = j[2],
            D = j[3];
        var G = F - E;
        if (z(G) > k) {
            var H = F
              , I = h
              , J = i;
            F = E + k * (g && F > E ? 1 : -1),
            h = C + c * w.cos(F),
            i = D + d * w.sin(F),
            m = bO(h, i, c, d, e, 0, g, I, J, [F, H, C, D])
        }
        G = F - E;
        var K = w.cos(E)
          , L = w.sin(E)
          , M = w.cos(F)
          , N = w.sin(F)
          , O = w.tan(G / 4)
          , P = 4 / 3 * c * O
          , Q = 4 / 3 * d * O
          , R = [a, b]
          , S = [a + P * L, b - Q * K]
          , T = [h + P * N, i - Q * M]
          , U = [h, i];
        S[0] = 2 * R[0] - S[0],
        S[1] = 2 * R[1] - S[1];
        if (j)
            return [S, T, U][n](m);
        m = [S, T, U][n](m).join()[s](",");
        var V = [];
        for (var W = 0, X = m.length; W < X; W++)
            V[W] = W % 2 ? p(m[W - 1], m[W], l).y : p(m[W], m[W + 1], l).x;
        return V
    }
      , bP = function(a, b, c, d, e, f, g, h, i) {
        var j = 1 - i;
        return {
            x: A(j, 3) * a + A(j, 2) * 3 * i * c + j * 3 * i * i * e + A(i, 3) * g,
            y: A(j, 3) * b + A(j, 2) * 3 * i * d + j * 3 * i * i * f + A(i, 3) * h
        }
    }
      , bQ = bv(function(a, b, c, d, e, f, g, h) {
        var i = e - 2 * c + a - (g - 2 * e + c), j = 2 * (c - a) - 2 * (e - c), k = a - c, l = (-j + w.sqrt(j * j - 4 * i * k)) / 2 / i, n = (-j - w.sqrt(j * j - 4 * i * k)) / 2 / i, o = [b, h], p = [a, g], q;
        z(l) > "1e12" && (l = .5),
        z(n) > "1e12" && (n = .5),
        l > 0 && l < 1 && (q = bP(a, b, c, d, e, f, g, h, l),
        p.push(q.x),
        o.push(q.y)),
        n > 0 && n < 1 && (q = bP(a, b, c, d, e, f, g, h, n),
        p.push(q.x),
        o.push(q.y)),
        i = f - 2 * d + b - (h - 2 * f + d),
        j = 2 * (d - b) - 2 * (f - d),
        k = b - d,
        l = (-j + w.sqrt(j * j - 4 * i * k)) / 2 / i,
        n = (-j - w.sqrt(j * j - 4 * i * k)) / 2 / i,
        z(l) > "1e12" && (l = .5),
        z(n) > "1e12" && (n = .5),
        l > 0 && l < 1 && (q = bP(a, b, c, d, e, f, g, h, l),
        p.push(q.x),
        o.push(q.y)),
        n > 0 && n < 1 && (q = bP(a, b, c, d, e, f, g, h, n),
        p.push(q.x),
        o.push(q.y));
        return {
            min: {
                x: y[m](0, p),
                y: y[m](0, o)
            },
            max: {
                x: x[m](0, p),
                y: x[m](0, o)
            }
        }
    })
      , bR = a._path2curve = bv(function(a, b) {
        var c = !b && bz(a);
        if (!b && c.curve)
            return bJ(c.curve);
        var d = bL(a)
          , e = b && bL(b)
          , f = {
            x: 0,
            y: 0,
            bx: 0,
            by: 0,
            X: 0,
            Y: 0,
            qx: null,
            qy: null
        }
          , g = {
            x: 0,
            y: 0,
            bx: 0,
            by: 0,
            X: 0,
            Y: 0,
            qx: null,
            qy: null
        }
          , h = function(a, b) {
            var c, d;
            if (!a)
                return ["C", b.x, b.y, b.x, b.y, b.x, b.y];
            !(a[0]in {
                T: 1,
                Q: 1
            }) && (b.qx = b.qy = null);
            switch (a[0]) {
            case "M":
                b.X = a[1],
                b.Y = a[2];
                break;
            case "A":
                a = ["C"][n](bO[m](0, [b.x, b.y][n](a.slice(1))));
                break;
            case "S":
                c = b.x + (b.x - (b.bx || b.x)),
                d = b.y + (b.y - (b.by || b.y)),
                a = ["C", c, d][n](a.slice(1));
                break;
            case "T":
                b.qx = b.x + (b.x - (b.qx || b.x)),
                b.qy = b.y + (b.y - (b.qy || b.y)),
                a = ["C"][n](bN(b.x, b.y, b.qx, b.qy, a[1], a[2]));
                break;
            case "Q":
                b.qx = a[1],
                b.qy = a[2],
                a = ["C"][n](bN(b.x, b.y, a[1], a[2], a[3], a[4]));
                break;
            case "L":
                a = ["C"][n](bM(b.x, b.y, a[1], a[2]));
                break;
            case "H":
                a = ["C"][n](bM(b.x, b.y, a[1], b.y));
                break;
            case "V":
                a = ["C"][n](bM(b.x, b.y, b.x, a[1]));
                break;
            case "Z":
                a = ["C"][n](bM(b.x, b.y, b.X, b.Y))
            }
            return a
        }
          , i = function(a, b) {
            if (a[b].length > 7) {
                a[b].shift();
                var c = a[b];
                while (c.length)
                    a.splice(b++, 0, ["C"][n](c.splice(0, 6)));
                a.splice(b, 1),
                l = x(d.length, e && e.length || 0)
            }
        }
          , j = function(a, b, c, f, g) {
            a && b && a[g][0] == "M" && b[g][0] != "M" && (b.splice(g, 0, ["M", f.x, f.y]),
            c.bx = 0,
            c.by = 0,
            c.x = a[g][1],
            c.y = a[g][2],
            l = x(d.length, e && e.length || 0))
        };
        for (var k = 0, l = x(d.length, e && e.length || 0); k < l; k++) {
            d[k] = h(d[k], f),
            i(d, k),
            e && (e[k] = h(e[k], g)),
            e && i(e, k),
            j(d, e, f, g, k),
            j(e, d, g, f, k);
            var o = d[k]
              , p = e && e[k]
              , q = o.length
              , r = e && p.length;
            f.x = o[q - 2],
            f.y = o[q - 1],
            f.bx = Q(o[q - 4]) || f.x,
            f.by = Q(o[q - 3]) || f.y,
            g.bx = e && (Q(p[r - 4]) || g.x),
            g.by = e && (Q(p[r - 3]) || g.y),
            g.x = e && p[r - 2],
            g.y = e && p[r - 1]
        }
        e || (c.curve = bJ(d));
        return e ? [d, e] : d
    }, null, bJ)
      , bS = a._parseDots = bv(function(b) {
        var c = [];
        for (var d = 0, e = b.length; d < e; d++) {
            var f = {}
              , g = b[d].match(/^([^:]*):?([\d\.]*)/);
            f.color = a.getRGB(g[1]);
            if (f.color.error)
                return null;
            f.color = f.color.hex,
            g[2] && (f.offset = g[2] + "%"),
            c.push(f)
        }
        for (d = 1,
        e = c.length - 1; d < e; d++)
            if (!c[d].offset) {
                var h = Q(c[d - 1].offset || 0)
                  , i = 0;
                for (var j = d + 1; j < e; j++)
                    if (c[j].offset) {
                        i = c[j].offset;
                        break
                    }
                i || (i = 100,
                j = e),
                i = Q(i);
                var k = (i - h) / (j - d + 1);
                for (; d < j; d++)
                    h += k,
                    c[d].offset = h + "%"
            }
        return c
    })
      , bT = a._tear = function(a, b) {
        a == b.top && (b.top = a.prev),
        a == b.bottom && (b.bottom = a.next),
        a.next && (a.next.prev = a.prev),
        a.prev && (a.prev.next = a.next)
    }
      , bU = a._tofront = function(a, b) {
        b.top !== a && (bT(a, b),
        a.next = null,
        a.prev = b.top,
        b.top.next = a,
        b.top = a)
    }
      , bV = a._toback = function(a, b) {
        b.bottom !== a && (bT(a, b),
        a.next = b.bottom,
        a.prev = null,
        b.bottom.prev = a,
        b.bottom = a)
    }
      , bW = a._insertafter = function(a, b, c) {
        bT(a, c),
        b == c.top && (c.top = a),
        b.next && (b.next.prev = a),
        a.next = b.next,
        a.prev = b,
        b.next = a
    }
      , bX = a._insertbefore = function(a, b, c) {
        bT(a, c),
        b == c.bottom && (c.bottom = a),
        b.prev && (b.prev.next = a),
        a.prev = b.prev,
        b.prev = a,
        a.next = b
    }
      , bY = a.toMatrix = function(a, b) {
        var c = bI(a)
          , d = {
            _: {
                transform: p
            },
            getBBox: function() {
                return c
            }
        };
        b$(d, b);
        return d.matrix
    }
      , bZ = a.transformPath = function(a, b) {
        return bj(a, bY(a, b))
    }
      , b$ = a._extractTransform = function(b, c) {
        if (c == null)
            return b._.transform;
        c = r(c).replace(/\.{3}|\u2026/g, b._.transform || p);
        var d = a.parseTransformString(c)
          , e = 0
          , f = 0
          , g = 0
          , h = 1
          , i = 1
          , j = b._
          , k = new cb;
        j.transform = d || [];
        if (d)
            for (var l = 0, m = d.length; l < m; l++) {
                var n = d[l], o = n.length, q = r(n[0]).toLowerCase(), s = n[0] != q, t = s ? k.invert() : 0, u, v, w, x, y;
                q == "t" && o == 3 ? s ? (u = t.x(0, 0),
                v = t.y(0, 0),
                w = t.x(n[1], n[2]),
                x = t.y(n[1], n[2]),
                k.translate(w - u, x - v)) : k.translate(n[1], n[2]) : q == "r" ? o == 2 ? (y = y || b.getBBox(1),
                k.rotate(n[1], y.x + y.width / 2, y.y + y.height / 2),
                e += n[1]) : o == 4 && (s ? (w = t.x(n[2], n[3]),
                x = t.y(n[2], n[3]),
                k.rotate(n[1], w, x)) : k.rotate(n[1], n[2], n[3]),
                e += n[1]) : q == "s" ? o == 2 || o == 3 ? (y = y || b.getBBox(1),
                k.scale(n[1], n[o - 1], y.x + y.width / 2, y.y + y.height / 2),
                h *= n[1],
                i *= n[o - 1]) : o == 5 && (s ? (w = t.x(n[3], n[4]),
                x = t.y(n[3], n[4]),
                k.scale(n[1], n[2], w, x)) : k.scale(n[1], n[2], n[3], n[4]),
                h *= n[1],
                i *= n[2]) : q == "m" && o == 7 && k.add(n[1], n[2], n[3], n[4], n[5], n[6]),
                j.dirtyT = 1,
                b.matrix = k
            }
        b.matrix = k,
        j.sx = h,
        j.sy = i,
        j.deg = e,
        j.dx = f = k.e,
        j.dy = g = k.f,
        h == 1 && i == 1 && !e && j.bbox ? (j.bbox.x += +f,
        j.bbox.y += +g) : j.dirtyT = 1
    }
      , b_ = function(a) {
        var b = a[0];
        switch (b.toLowerCase()) {
        case "t":
            return [b, 0, 0];
        case "m":
            return [b, 1, 0, 0, 1, 0, 0];
        case "r":
            return a.length == 4 ? [b, 0, a[2], a[3]] : [b, 0];
        case "s":
            return a.length == 5 ? [b, 1, 1, a[3], a[4]] : a.length == 3 ? [b, 1, 1] : [b, 1]
        }
    }
      , ca = a._equaliseTransform = function(b, c) {
        c = r(c).replace(/\.{3}|\u2026/g, b),
        b = a.parseTransformString(b) || [],
        c = a.parseTransformString(c) || [];
        var d = x(b.length, c.length), e = [], f = [], g = 0, h, i, j, k;
        for (; g < d; g++) {
            j = b[g] || b_(c[g]),
            k = c[g] || b_(j);
            if (j[0] != k[0] || j[0].toLowerCase() == "r" && (j[2] != k[2] || j[3] != k[3]) || j[0].toLowerCase() == "s" && (j[3] != k[3] || j[4] != k[4]))
                return;
            e[g] = [],
            f[g] = [];
            for (h = 0,
            i = x(j.length, k.length); h < i; h++)
                h in j && (e[g][h] = j[h]),
                h in k && (f[g][h] = k[h])
        }
        return {
            from: e,
            to: f
        }
    }
    ;
    a._getContainer = function(b, c, d, e) {
        var f;
        f = e == null && !a.is(b, "object") ? h.doc.getElementById(b) : b;
        if (f != null) {
            if (f.tagName)
                return c == null ? {
                    container: f,
                    width: f.style.pixelWidth || f.offsetWidth,
                    height: f.style.pixelHeight || f.offsetHeight
                } : {
                    container: f,
                    width: c,
                    height: d
                };
            return {
                container: 1,
                x: b,
                y: c,
                width: d,
                height: e
            }
        }
    }
    ,
    a.pathToRelative = bK,
    a._engine = {},
    a.path2curve = bR,
    a.matrix = function(a, b, c, d, e, f) {
        return new cb(a,b,c,d,e,f)
    }
    ,
    function(b) {
        function d(a) {
            var b = w.sqrt(c(a));
            a[0] && (a[0] /= b),
            a[1] && (a[1] /= b)
        }
        function c(a) {
            return a[0] * a[0] + a[1] * a[1]
        }
        b.add = function(a, b, c, d, e, f) {
            var g = [[], [], []], h = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]], i = [[a, c, e], [b, d, f], [0, 0, 1]], j, k, l, m;
            a && a instanceof cb && (i = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]]);
            for (j = 0; j < 3; j++)
                for (k = 0; k < 3; k++) {
                    m = 0;
                    for (l = 0; l < 3; l++)
                        m += h[j][l] * i[l][k];
                    g[j][k] = m
                }
            this.a = g[0][0],
            this.b = g[1][0],
            this.c = g[0][1],
            this.d = g[1][1],
            this.e = g[0][2],
            this.f = g[1][2]
        }
        ,
        b.invert = function() {
            var a = this
              , b = a.a * a.d - a.b * a.c;
            return new cb(a.d / b,-a.b / b,-a.c / b,a.a / b,(a.c * a.f - a.d * a.e) / b,(a.b * a.e - a.a * a.f) / b)
        }
        ,
        b.clone = function() {
            return new cb(this.a,this.b,this.c,this.d,this.e,this.f)
        }
        ,
        b.translate = function(a, b) {
            this.add(1, 0, 0, 1, a, b)
        }
        ,
        b.scale = function(a, b, c, d) {
            b == null && (b = a),
            (c || d) && this.add(1, 0, 0, 1, c, d),
            this.add(a, 0, 0, b, 0, 0),
            (c || d) && this.add(1, 0, 0, 1, -c, -d)
        }
        ,
        b.rotate = function(b, c, d) {
            b = a.rad(b),
            c = c || 0,
            d = d || 0;
            var e = +w.cos(b).toFixed(9)
              , f = +w.sin(b).toFixed(9);
            this.add(e, f, -f, e, c, d),
            this.add(1, 0, 0, 1, -c, -d)
        }
        ,
        b.x = function(a, b) {
            return a * this.a + b * this.c + this.e
        }
        ,
        b.y = function(a, b) {
            return a * this.b + b * this.d + this.f
        }
        ,
        b.get = function(a) {
            return +this[r.fromCharCode(97 + a)].toFixed(4)
        }
        ,
        b.toString = function() {
            return a.svg ? "matrix(" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + ")" : [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join()
        }
        ,
        b.toFilter = function() {
            return "progid:DXImageTransform.Microsoft.Matrix(M11=" + this.get(0) + ", M12=" + this.get(2) + ", M21=" + this.get(1) + ", M22=" + this.get(3) + ", Dx=" + this.get(4) + ", Dy=" + this.get(5) + ", sizingmethod='auto expand')"
        }
        ,
        b.offset = function() {
            return [this.e.toFixed(4), this.f.toFixed(4)]
        }
        ,
        b.split = function() {
            var b = {};
            b.dx = this.e,
            b.dy = this.f;
            var e = [[this.a, this.c], [this.b, this.d]];
            b.scalex = w.sqrt(c(e[0])),
            d(e[0]),
            b.shear = e[0][0] * e[1][0] + e[0][1] * e[1][1],
            e[1] = [e[1][0] - e[0][0] * b.shear, e[1][1] - e[0][1] * b.shear],
            b.scaley = w.sqrt(c(e[1])),
            d(e[1]),
            b.shear /= b.scaley;
            var f = -e[0][1]
              , g = e[1][1];
            g < 0 ? (b.rotate = a.deg(w.acos(g)),
            f < 0 && (b.rotate = 360 - b.rotate)) : b.rotate = a.deg(w.asin(f)),
            b.isSimple = !+b.shear.toFixed(9) && (b.scalex.toFixed(9) == b.scaley.toFixed(9) || !b.rotate),
            b.isSuperSimple = !+b.shear.toFixed(9) && b.scalex.toFixed(9) == b.scaley.toFixed(9) && !b.rotate,
            b.noRotation = !+b.shear.toFixed(9) && !b.rotate;
            return b
        }
        ,
        b.toTransformString = function(a) {
            var b = a || this[s]();
            if (b.isSimple) {
                b.scalex = +b.scalex.toFixed(4),
                b.scaley = +b.scaley.toFixed(4),
                b.rotate = +b.rotate.toFixed(4);
                return (b.dx || b.dy ? "t" + [b.dx, b.dy] : p) + (b.scalex != 1 || b.scaley != 1 ? "s" + [b.scalex, b.scaley, 0, 0] : p) + (b.rotate ? "r" + [b.rotate, 0, 0] : p)
            }
            return "m" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)]
        }
    }(cb.prototype);
    var cc = navigator.userAgent.match(/Version\/(.*?)\s/) || navigator.userAgent.match(/Chrome\/(\d+)/);
    navigator.vendor == "Apple Computer, Inc." && (cc && cc[1] < 4 || navigator.platform.slice(0, 2) == "iP") || navigator.vendor == "Google Inc." && cc && cc[1] < 8 ? k.safari = function() {
        var a = this.rect(-99, -99, this.width + 99, this.height + 99).attr({
            stroke: "none"
        });
        setTimeout(function() {
            a.remove()
        })
    }
    : k.safari = be;
    var cd = function() {
        this.returnValue = !1
    }
      , ce = function() {
        return this.originalEvent.preventDefault()
    }
      , cf = function() {
        this.cancelBubble = !0
    }
      , cg = function() {
        return this.originalEvent.stopPropagation()
    }
      , ch = function() {
        if (h.doc.addEventListener)
            return function(a, b, c, d) {
                var e = o && u[b] ? u[b] : b
                  , f = function(e) {
                    var f = h.doc.documentElement.scrollTop || h.doc.body.scrollTop
                      , i = h.doc.documentElement.scrollLeft || h.doc.body.scrollLeft
                      , j = e.clientX + i
                      , k = e.clientY + f;
                    if (o && u[g](b))
                        for (var l = 0, m = e.targetTouches && e.targetTouches.length; l < m; l++)
                            if (e.targetTouches[l].target == a) {
                                var n = e;
                                e = e.targetTouches[l],
                                e.originalEvent = n,
                                e.preventDefault = ce,
                                e.stopPropagation = cg;
                                break
                            }
                    return c.call(d, e, j, k)
                };
                a.addEventListener(e, f, !1);
                return function() {
                    a.removeEventListener(e, f, !1);
                    return !0
                }
            }
            ;
        if (h.doc.attachEvent)
            return function(a, b, c, d) {
                var e = function(a) {
                    a = a || h.win.event;
                    var b = h.doc.documentElement.scrollTop || h.doc.body.scrollTop
                      , e = h.doc.documentElement.scrollLeft || h.doc.body.scrollLeft
                      , f = a.clientX + e
                      , g = a.clientY + b;
                    a.preventDefault = a.preventDefault || cd,
                    a.stopPropagation = a.stopPropagation || cf;
                    return c.call(d, a, f, g)
                };
                a.attachEvent("on" + b, e);
                var f = function() {
                    a.detachEvent("on" + b, e);
                    return !0
                };
                return f
            }
    }()
      , ci = []
      , cj = function(a) {
        var b = a.clientX, c = a.clientY, d = h.doc.documentElement.scrollTop || h.doc.body.scrollTop, e = h.doc.documentElement.scrollLeft || h.doc.body.scrollLeft, f, g = ci.length;
        while (g--) {
            f = ci[g];
            if (o) {
                var i = a.touches.length, j;
                while (i--) {
                    j = a.touches[i];
                    if (j.identifier == f.el._drag.id) {
                        b = j.clientX,
                        c = j.clientY,
                        (a.originalEvent ? a.originalEvent : a).preventDefault();
                        break
                    }
                }
            } else
                a.preventDefault();
            var k = f.el.node, l, m = k.nextSibling, n = k.parentNode, p = k.style.display;
            h.win.opera && n.removeChild(k),
            k.style.display = "none",
            l = f.el.paper.getElementByPoint(b, c),
            k.style.display = p,
            h.win.opera && (m ? n.insertBefore(k, m) : n.appendChild(k)),
            l && eve("raphael.drag.over." + f.el.id, f.el, l),
            b += e,
            c += d,
            eve("raphael.drag.move." + f.el.id, f.move_scope || f.el, b - f.el._drag.x, c - f.el._drag.y, b, c, a)
        }
    }
      , ck = function(b) {
        a.unmousemove(cj).unmouseup(ck);
        var c = ci.length, d;
        while (c--)
            d = ci[c],
            d.el._drag = {},
            eve("raphael.drag.end." + d.el.id, d.end_scope || d.start_scope || d.move_scope || d.el, b);
        ci = []
    }
      , cl = a.el = {};
    for (var cm = t.length; cm--; )
        (function(b) {
            a[b] = cl[b] = function(c, d) {
                a.is(c, "function") && (this.events = this.events || [],
                this.events.push({
                    name: b,
                    f: c,
                    unbind: ch(this.shape || this.node || h.doc, b, c, d || this)
                }));
                return this
            }
            ,
            a["un" + b] = cl["un" + b] = function(a) {
                var c = this.events || []
                  , d = c.length;
                while (d--)
                    if (c[d].name == b && c[d].f == a) {
                        c[d].unbind(),
                        c.splice(d, 1),
                        !c.length && delete this.events;
                        return this
                    }
                return this
            }
        }
        )(t[cm]);
    cl.data = function(b, c) {
        var d = bb[this.id] = bb[this.id] || {};
        if (arguments.length == 1) {
            if (a.is(b, "object")) {
                for (var e in b)
                    b[g](e) && this.data(e, b[e]);
                return this
            }
            eve("raphael.data.get." + this.id, this, d[b], b);
            return d[b]
        }
        d[b] = c,
        eve("raphael.data.set." + this.id, this, c, b);
        return this
    }
    ,
    cl.removeData = function(a) {
        a == null ? bb[this.id] = {} : bb[this.id] && delete bb[this.id][a];
        return this
    }
    ,
    cl.hover = function(a, b, c, d) {
        return this.mouseover(a, c).mouseout(b, d || c)
    }
    ,
    cl.unhover = function(a, b) {
        return this.unmouseover(a).unmouseout(b)
    }
    ;
    var cn = [];
    cl.drag = function(b, c, d, e, f, g) {
        function i(i) {
            (i.originalEvent || i).preventDefault();
            var j = h.doc.documentElement.scrollTop || h.doc.body.scrollTop
              , k = h.doc.documentElement.scrollLeft || h.doc.body.scrollLeft;
            this._drag.x = i.clientX + k,
            this._drag.y = i.clientY + j,
            this._drag.id = i.identifier,
            !ci.length && a.mousemove(cj).mouseup(ck),
            ci.push({
                el: this,
                move_scope: e,
                start_scope: f,
                end_scope: g
            }),
            c && eve.on("raphael.drag.start." + this.id, c),
            b && eve.on("raphael.drag.move." + this.id, b),
            d && eve.on("raphael.drag.end." + this.id, d),
            eve("raphael.drag.start." + this.id, f || e || this, i.clientX + k, i.clientY + j, i)
        }
        this._drag = {},
        cn.push({
            el: this,
            start: i
        }),
        this.mousedown(i);
        return this
    }
    ,
    cl.onDragOver = function(a) {
        a ? eve.on("raphael.drag.over." + this.id, a) : eve.unbind("raphael.drag.over." + this.id)
    }
    ,
    cl.undrag = function() {
        var b = cn.length;
        while (b--)
            cn[b].el == this && (this.unmousedown(cn[b].start),
            cn.splice(b, 1),
            eve.unbind("raphael.drag.*." + this.id));
        !cn.length && a.unmousemove(cj).unmouseup(ck)
    }
    ,
    k.circle = function(b, c, d) {
        var e = a._engine.circle(this, b || 0, c || 0, d || 0);
        this.__set__ && this.__set__.push(e);
        return e
    }
    ,
    k.rect = function(b, c, d, e, f) {
        var g = a._engine.rect(this, b || 0, c || 0, d || 0, e || 0, f || 0);
        this.__set__ && this.__set__.push(g);
        return g
    }
    ,
    k.ellipse = function(b, c, d, e) {
        var f = a._engine.ellipse(this, b || 0, c || 0, d || 0, e || 0);
        this.__set__ && this.__set__.push(f);
        return f
    }
    ,
    k.path = function(b) {
        b && !a.is(b, D) && !a.is(b[0], E) && (b += p);
        var c = a._engine.path(a.format[m](a, arguments), this);
        this.__set__ && this.__set__.push(c);
        return c
    }
    ,
    k.image = function(b, c, d, e, f) {
        var g = a._engine.image(this, b || "about:blank", c || 0, d || 0, e || 0, f || 0);
        this.__set__ && this.__set__.push(g);
        return g
    }
    ,
    k.text = function(b, c, d) {
        var e = a._engine.text(this, b || 0, c || 0, r(d));
        this.__set__ && this.__set__.push(e);
        return e
    }
    ,
    k.set = function(b) {
        !a.is(b, "array") && (b = Array.prototype.splice.call(arguments, 0, arguments.length));
        var c = new cG(b);
        this.__set__ && this.__set__.push(c);
        return c
    }
    ,
    k.setStart = function(a) {
        this.__set__ = a || this.set()
    }
    ,
    k.setFinish = function(a) {
        var b = this.__set__;
        delete this.__set__;
        return b
    }
    ,
    k.setSize = function(b, c) {
        return a._engine.setSize.call(this, b, c)
    }
    ,
    k.setViewBox = function(b, c, d, e, f) {
        return a._engine.setViewBox.call(this, b, c, d, e, f)
    }
    ,
    k.top = k.bottom = null,
    k.raphael = a;
    var co = function(a) {
        var b = a.getBoundingClientRect()
          , c = a.ownerDocument
          , d = c.body
          , e = c.documentElement
          , f = e.clientTop || d.clientTop || 0
          , g = e.clientLeft || d.clientLeft || 0
          , i = b.top + (h.win.pageYOffset || e.scrollTop || d.scrollTop) - f
          , j = b.left + (h.win.pageXOffset || e.scrollLeft || d.scrollLeft) - g;
        return {
            y: i,
            x: j
        }
    };
    k.getElementByPoint = function(a, b) {
        var c = this
          , d = c.canvas
          , e = h.doc.elementFromPoint(a, b);
        if (h.win.opera && e.tagName == "svg") {
            var f = co(d)
              , g = d.createSVGRect();
            g.x = a - f.x,
            g.y = b - f.y,
            g.width = g.height = 1;
            var i = d.getIntersectionList(g, null);
            i.length && (e = i[i.length - 1])
        }
        if (!e)
            return null;
        while (e.parentNode && e != d.parentNode && !e.raphael)
            e = e.parentNode;
        e == c.canvas.parentNode && (e = d),
        e = e && e.raphael ? c.getById(e.raphaelid) : null;
        return e
    }
    ,
    k.getById = function(a) {
        var b = this.bottom;
        while (b) {
            if (b.id == a)
                return b;
            b = b.next
        }
        return null
    }
    ,
    k.forEach = function(a, b) {
        var c = this.bottom;
        while (c) {
            if (a.call(b, c) === !1)
                return this;
            c = c.next
        }
        return this
    }
    ,
    k.getElementsByPoint = function(a, b) {
        var c = this.set();
        this.forEach(function(d) {
            d.isPointInside(a, b) && c.push(d)
        });
        return c
    }
    ,
    cl.isPointInside = function(b, c) {
        var d = this.realPath = this.realPath || bi[this.type](this);
        return a.isPointInsidePath(d, b, c)
    }
    ,
    cl.getBBox = function(a) {
        if (this.removed)
            return {};
        var b = this._;
        if (a) {
            if (b.dirty || !b.bboxwt)
                this.realPath = bi[this.type](this),
                b.bboxwt = bI(this.realPath),
                b.bboxwt.toString = cq,
                b.dirty = 0;
            return b.bboxwt
        }
        if (b.dirty || b.dirtyT || !b.bbox) {
            if (b.dirty || !this.realPath)
                b.bboxwt = 0,
                this.realPath = bi[this.type](this);
            b.bbox = bI(bj(this.realPath, this.matrix)),
            b.bbox.toString = cq,
            b.dirty = b.dirtyT = 0
        }
        return b.bbox
    }
    ,
    cl.clone = function() {
        if (this.removed)
            return null;
        var a = this.paper[this.type]().attr(this.attr());
        this.__set__ && this.__set__.push(a);
        return a
    }
    ,
    cl.glow = function(a) {
        if (this.type == "text")
            return null;
        a = a || {};
        var b = {
            width: (a.width || 10) + (+this.attr("stroke-width") || 1),
            fill: a.fill || !1,
            opacity: a.opacity || .5,
            offsetx: a.offsetx || 0,
            offsety: a.offsety || 0,
            color: a.color || "#000"
        }
          , c = b.width / 2
          , d = this.paper
          , e = d.set()
          , f = this.realPath || bi[this.type](this);
        f = this.matrix ? bj(f, this.matrix) : f;
        for (var g = 1; g < c + 1; g++)
            e.push(d.path(f).attr({
                stroke: b.color,
                fill: b.fill ? b.color : "none",
                "stroke-linejoin": "round",
                "stroke-linecap": "round",
                "stroke-width": +(b.width / c * g).toFixed(3),
                opacity: +(b.opacity / c).toFixed(3)
            }));
        return e.insertBefore(this).translate(b.offsetx, b.offsety)
    }
    ;
    var cr = {}
      , cs = function(b, c, d, e, f, g, h, i, j) {
        return j == null ? bB(b, c, d, e, f, g, h, i) : a.findDotsAtSegment(b, c, d, e, f, g, h, i, bC(b, c, d, e, f, g, h, i, j))
    }
      , ct = function(b, c) {
        return function(d, e, f) {
            d = bR(d);
            var g, h, i, j, k = "", l = {}, m, n = 0;
            for (var o = 0, p = d.length; o < p; o++) {
                i = d[o];
                if (i[0] == "M")
                    g = +i[1],
                    h = +i[2];
                else {
                    j = cs(g, h, i[1], i[2], i[3], i[4], i[5], i[6]);
                    if (n + j > e) {
                        if (c && !l.start) {
                            m = cs(g, h, i[1], i[2], i[3], i[4], i[5], i[6], e - n),
                            k += ["C" + m.start.x, m.start.y, m.m.x, m.m.y, m.x, m.y];
                            if (f)
                                return k;
                            l.start = k,
                            k = ["M" + m.x, m.y + "C" + m.n.x, m.n.y, m.end.x, m.end.y, i[5], i[6]].join(),
                            n += j,
                            g = +i[5],
                            h = +i[6];
                            continue
                        }
                        if (!b && !c) {
                            m = cs(g, h, i[1], i[2], i[3], i[4], i[5], i[6], e - n);
                            return {
                                x: m.x,
                                y: m.y,
                                alpha: m.alpha
                            }
                        }
                    }
                    n += j,
                    g = +i[5],
                    h = +i[6]
                }
                k += i.shift() + i
            }
            l.end = k,
            m = b ? n : c ? l : a.findDotsAtSegment(g, h, i[0], i[1], i[2], i[3], i[4], i[5], 1),
            m.alpha && (m = {
                x: m.x,
                y: m.y,
                alpha: m.alpha
            });
            return m
        }
    }
      , cu = ct(1)
      , cv = ct()
      , cw = ct(0, 1);
    a.getTotalLength = cu,
    a.getPointAtLength = cv,
    a.getSubpath = function(a, b, c) {
        if (this.getTotalLength(a) - c < 1e-6)
            return cw(a, b).end;
        var d = cw(a, c, 1);
        return b ? cw(d, b).end : d
    }
    ,
    cl.getTotalLength = function() {
        if (this.type == "path") {
            if (this.node.getTotalLength)
                return this.node.getTotalLength();
            return cu(this.attrs.path)
        }
    }
    ,
    cl.getPointAtLength = function(a) {
        if (this.type == "path")
            return cv(this.attrs.path, a)
    }
    ,
    cl.getSubpath = function(b, c) {
        if (this.type == "path")
            return a.getSubpath(this.attrs.path, b, c)
    }
    ;
    var cx = a.easing_formulas = {
        linear: function(a) {
            return a
        },
        "<": function(a) {
            return A(a, 1.7)
        },
        ">": function(a) {
            return A(a, .48)
        },
        "<>": function(a) {
            var b = .48 - a / 1.04
              , c = w.sqrt(.1734 + b * b)
              , d = c - b
              , e = A(z(d), 1 / 3) * (d < 0 ? -1 : 1)
              , f = -c - b
              , g = A(z(f), 1 / 3) * (f < 0 ? -1 : 1)
              , h = e + g + .5;
            return (1 - h) * 3 * h * h + h * h * h
        },
        backIn: function(a) {
            var b = 1.70158;
            return a * a * ((b + 1) * a - b)
        },
        backOut: function(a) {
            a = a - 1;
            var b = 1.70158;
            return a * a * ((b + 1) * a + b) + 1
        },
        elastic: function(a) {
            if (a == !!a)
                return a;
            return A(2, -10 * a) * w.sin((a - .075) * 2 * B / .3) + 1
        },
        bounce: function(a) {
            var b = 7.5625, c = 2.75, d;
            a < 1 / c ? d = b * a * a : a < 2 / c ? (a -= 1.5 / c,
            d = b * a * a + .75) : a < 2.5 / c ? (a -= 2.25 / c,
            d = b * a * a + .9375) : (a -= 2.625 / c,
            d = b * a * a + .984375);
            return d
        }
    };
    cx.easeIn = cx["ease-in"] = cx["<"],
    cx.easeOut = cx["ease-out"] = cx[">"],
    cx.easeInOut = cx["ease-in-out"] = cx["<>"],
    cx["back-in"] = cx.backIn,
    cx["back-out"] = cx.backOut;
    var cy = []
      , cz = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(a) {
        setTimeout(a, 16)
    }
      , cA = function() {
        var b = +(new Date)
          , c = 0;
        for (; c < cy.length; c++) {
            var d = cy[c];
            if (d.el.removed || d.paused)
                continue;
            var e = b - d.start, f = d.ms, h = d.easing, i = d.from, j = d.diff, k = d.to, l = d.t, m = d.el, o = {}, p, r = {}, s;
            d.initstatus ? (e = (d.initstatus * d.anim.top - d.prev) / (d.percent - d.prev) * f,
            d.status = d.initstatus,
            delete d.initstatus,
            d.stop && cy.splice(c--, 1)) : d.status = (d.prev + (d.percent - d.prev) * (e / f)) / d.anim.top;
            if (e < 0)
                continue;
            if (e < f) {
                var t = h(e / f);
                for (var u in i)
                    if (i[g](u)) {
                        switch (U[u]) {
                        case C:
                            p = +i[u] + t * f * j[u];
                            break;
                        case "colour":
                            p = "rgb(" + [cB(O(i[u].r + t * f * j[u].r)), cB(O(i[u].g + t * f * j[u].g)), cB(O(i[u].b + t * f * j[u].b))].join(",") + ")";
                            break;
                        case "path":
                            p = [];
                            for (var v = 0, w = i[u].length; v < w; v++) {
                                p[v] = [i[u][v][0]];
                                for (var x = 1, y = i[u][v].length; x < y; x++)
                                    p[v][x] = +i[u][v][x] + t * f * j[u][v][x];
                                p[v] = p[v].join(q)
                            }
                            p = p.join(q);
                            break;
                        case "transform":
                            if (j[u].real) {
                                p = [];
                                for (v = 0,
                                w = i[u].length; v < w; v++) {
                                    p[v] = [i[u][v][0]];
                                    for (x = 1,
                                    y = i[u][v].length; x < y; x++)
                                        p[v][x] = i[u][v][x] + t * f * j[u][v][x]
                                }
                            } else {
                                var z = function(a) {
                                    return +i[u][a] + t * f * j[u][a]
                                };
                                p = [["m", z(0), z(1), z(2), z(3), z(4), z(5)]]
                            }
                            break;
                        case "csv":
                            if (u == "clip-rect") {
                                p = [],
                                v = 4;
                                while (v--)
                                    p[v] = +i[u][v] + t * f * j[u][v]
                            }
                            break;
                        default:
                            var A = [][n](i[u]);
                            p = [],
                            v = m.paper.customAttributes[u].length;
                            while (v--)
                                p[v] = +A[v] + t * f * j[u][v]
                        }
                        o[u] = p
                    }
                m.attr(o),
                function(a, b, c) {
                    setTimeout(function() {
                        eve("raphael.anim.frame." + a, b, c)
                    })
                }(m.id, m, d.anim)
            } else {
                (function(b, c, d) {
                    setTimeout(function() {
                        eve("raphael.anim.frame." + c.id, c, d),
                        eve("raphael.anim.finish." + c.id, c, d),
                        a.is(b, "function") && b.call(c)
                    })
                }
                )(d.callback, m, d.anim),
                m.attr(k),
                cy.splice(c--, 1);
                if (d.repeat > 1 && !d.next) {
                    for (s in k)
                        k[g](s) && (r[s] = d.totalOrigin[s]);
                    d.el.attr(r),
                    cE(d.anim, d.el, d.anim.percents[0], null, d.totalOrigin, d.repeat - 1)
                }
                d.next && !d.stop && cE(d.anim, d.el, d.next, null, d.totalOrigin, d.repeat)
            }
        }
        a.svg && m && m.paper && m.paper.safari(),
        cy.length && cz(cA)
    }
      , cB = function(a) {
        return a > 255 ? 255 : a < 0 ? 0 : a
    };
    cl.animateWith = function(b, c, d, e, f, g) {
        var h = this;
        if (h.removed) {
            g && g.call(h);
            return h
        }
        var i = d instanceof cD ? d : a.animation(d, e, f, g), j, k;
        cE(i, h, i.percents[0], null, h.attr());
        for (var l = 0, m = cy.length; l < m; l++)
            if (cy[l].anim == c && cy[l].el == b) {
                cy[m - 1].start = cy[l].start;
                break
            }
        return h
    }
    ,
    cl.onAnimation = function(a) {
        a ? eve.on("raphael.anim.frame." + this.id, a) : eve.unbind("raphael.anim.frame." + this.id);
        return this
    }
    ,
    cD.prototype.delay = function(a) {
        var b = new cD(this.anim,this.ms);
        b.times = this.times,
        b.del = +a || 0;
        return b
    }
    ,
    cD.prototype.repeat = function(a) {
        var b = new cD(this.anim,this.ms);
        b.del = this.del,
        b.times = w.floor(x(a, 0)) || 1;
        return b
    }
    ,
    a.animation = function(b, c, d, e) {
        if (b instanceof cD)
            return b;
        if (a.is(d, "function") || !d)
            e = e || d || null,
            d = null;
        b = Object(b),
        c = +c || 0;
        var f = {}, h, i;
        for (i in b)
            b[g](i) && Q(i) != i && Q(i) + "%" != i && (h = !0,
            f[i] = b[i]);
        if (!h)
            return new cD(b,c);
        d && (f.easing = d),
        e && (f.callback = e);
        return new cD({
            100: f
        },c)
    }
    ,
    cl.animate = function(b, c, d, e) {
        var f = this;
        if (f.removed) {
            e && e.call(f);
            return f
        }
        var g = b instanceof cD ? b : a.animation(b, c, d, e);
        cE(g, f, g.percents[0], null, f.attr());
        return f
    }
    ,
    cl.setTime = function(a, b) {
        a && b != null && this.status(a, y(b, a.ms) / a.ms);
        return this
    }
    ,
    cl.status = function(a, b) {
        var c = [], d = 0, e, f;
        if (b != null) {
            cE(a, this, -1, y(b, 1));
            return this
        }
        e = cy.length;
        for (; d < e; d++) {
            f = cy[d];
            if (f.el.id == this.id && (!a || f.anim == a)) {
                if (a)
                    return f.status;
                c.push({
                    anim: f.anim,
                    status: f.status
                })
            }
        }
        if (a)
            return 0;
        return c
    }
    ,
    cl.pause = function(a) {
        for (var b = 0; b < cy.length; b++)
            cy[b].el.id == this.id && (!a || cy[b].anim == a) && eve("raphael.anim.pause." + this.id, this, cy[b].anim) !== !1 && (cy[b].paused = !0);
        return this
    }
    ,
    cl.resume = function(a) {
        for (var b = 0; b < cy.length; b++)
            if (cy[b].el.id == this.id && (!a || cy[b].anim == a)) {
                var c = cy[b];
                eve("raphael.anim.resume." + this.id, this, c.anim) !== !1 && (delete c.paused,
                this.status(c.anim, c.status))
            }
        return this
    }
    ,
    cl.stop = function(a) {
        for (var b = 0; b < cy.length; b++)
            cy[b].el.id == this.id && (!a || cy[b].anim == a) && eve("raphael.anim.stop." + this.id, this, cy[b].anim) !== !1 && cy.splice(b--, 1);
        return this
    }
    ,
    eve.on("raphael.remove", cF),
    eve.on("raphael.clear", cF),
    cl.toString = function() {
        return "Raphaël’s object"
    }
    ;
    var cG = function(a) {
        this.items = [],
        this.length = 0,
        this.type = "set";
        if (a)
            for (var b = 0, c = a.length; b < c; b++)
                a[b] && (a[b].constructor == cl.constructor || a[b].constructor == cG) && (this[this.items.length] = this.items[this.items.length] = a[b],
                this.length++)
    }
      , cH = cG.prototype;
    cH.push = function() {
        var a, b;
        for (var c = 0, d = arguments.length; c < d; c++)
            a = arguments[c],
            a && (a.constructor == cl.constructor || a.constructor == cG) && (b = this.items.length,
            this[b] = this.items[b] = a,
            this.length++);
        return this
    }
    ,
    cH.pop = function() {
        this.length && delete this[this.length--];
        return this.items.pop()
    }
    ,
    cH.forEach = function(a, b) {
        for (var c = 0, d = this.items.length; c < d; c++)
            if (a.call(b, this.items[c], c) === !1)
                return this;
        return this
    }
    ;
    for (var cI in cl)
        cl[g](cI) && (cH[cI] = function(a) {
            return function() {
                var b = arguments;
                return this.forEach(function(c) {
                    c[a][m](c, b)
                })
            }
        }(cI));
    cH.attr = function(b, c) {
        if (b && a.is(b, E) && a.is(b[0], "object"))
            for (var d = 0, e = b.length; d < e; d++)
                this.items[d].attr(b[d]);
        else
            for (var f = 0, g = this.items.length; f < g; f++)
                this.items[f].attr(b, c);
        return this
    }
    ,
    cH.clear = function() {
        while (this.length)
            this.pop()
    }
    ,
    cH.splice = function(a, b, c) {
        a = a < 0 ? x(this.length + a, 0) : a,
        b = x(0, y(this.length - a, b));
        var d = [], e = [], f = [], g;
        for (g = 2; g < arguments.length; g++)
            f.push(arguments[g]);
        for (g = 0; g < b; g++)
            e.push(this[a + g]);
        for (; g < this.length - a; g++)
            d.push(this[a + g]);
        var h = f.length;
        for (g = 0; g < h + d.length; g++)
            this.items[a + g] = this[a + g] = g < h ? f[g] : d[g - h];
        g = this.items.length = this.length -= b - h;
        while (this[g])
            delete this[g++];
        return new cG(e)
    }
    ,
    cH.exclude = function(a) {
        for (var b = 0, c = this.length; b < c; b++)
            if (this[b] == a) {
                this.splice(b, 1);
                return !0
            }
    }
    ,
    cH.animate = function(b, c, d, e) {
        (a.is(d, "function") || !d) && (e = d || null);
        var f = this.items.length, g = f, h, i = this, j;
        if (!f)
            return this;
        e && (j = function() {
            !--f && e.call(i)
        }
        ),
        d = a.is(d, D) ? d : j;
        var k = a.animation(b, c, d, j);
        h = this.items[--g].animate(k);
        while (g--)
            this.items[g] && !this.items[g].removed && this.items[g].animateWith(h, k, k);
        return this
    }
    ,
    cH.insertAfter = function(a) {
        var b = this.items.length;
        while (b--)
            this.items[b].insertAfter(a);
        return this
    }
    ,
    cH.getBBox = function() {
        var a = []
          , b = []
          , c = []
          , d = [];
        for (var e = this.items.length; e--; )
            if (!this.items[e].removed) {
                var f = this.items[e].getBBox();
                a.push(f.x),
                b.push(f.y),
                c.push(f.x + f.width),
                d.push(f.y + f.height)
            }
        a = y[m](0, a),
        b = y[m](0, b),
        c = x[m](0, c),
        d = x[m](0, d);
        return {
            x: a,
            y: b,
            x2: c,
            y2: d,
            width: c - a,
            height: d - b
        }
    }
    ,
    cH.clone = function(a) {
        a = new cG;
        for (var b = 0, c = this.items.length; b < c; b++)
            a.push(this.items[b].clone());
        return a
    }
    ,
    cH.toString = function() {
        return "Raphaël‘s set"
    }
    ,
    a.registerFont = function(a) {
        if (!a.face)
            return a;
        this.fonts = this.fonts || {};
        var b = {
            w: a.w,
            face: {},
            glyphs: {}
        }
          , c = a.face["font-family"];
        for (var d in a.face)
            a.face[g](d) && (b.face[d] = a.face[d]);
        this.fonts[c] ? this.fonts[c].push(b) : this.fonts[c] = [b];
        if (!a.svg) {
            b.face["units-per-em"] = R(a.face["units-per-em"], 10);
            for (var e in a.glyphs)
                if (a.glyphs[g](e)) {
                    var f = a.glyphs[e];
                    b.glyphs[e] = {
                        w: f.w,
                        k: {},
                        d: f.d && "M" + f.d.replace(/[mlcxtrv]/g, function(a) {
                            return {
                                l: "L",
                                c: "C",
                                x: "z",
                                t: "m",
                                r: "l",
                                v: "c"
                            }[a] || "M"
                        }) + "z"
                    };
                    if (f.k)
                        for (var h in f.k)
                            f[g](h) && (b.glyphs[e].k[h] = f.k[h])
                }
        }
        return a
    }
    ,
    k.getFont = function(b, c, d, e) {
        e = e || "normal",
        d = d || "normal",
        c = +c || {
            normal: 400,
            bold: 700,
            lighter: 300,
            bolder: 800
        }[c] || 400;
        if (!!a.fonts) {
            var f = a.fonts[b];
            if (!f) {
                var h = new RegExp("(^|\\s)" + b.replace(/[^\w\d\s+!~.:_-]/g, p) + "(\\s|$)","i");
                for (var i in a.fonts)
                    if (a.fonts[g](i) && h.test(i)) {
                        f = a.fonts[i];
                        break
                    }
            }
            var j;
            if (f)
                for (var k = 0, l = f.length; k < l; k++) {
                    j = f[k];
                    if (j.face["font-weight"] == c && (j.face["font-style"] == d || !j.face["font-style"]) && j.face["font-stretch"] == e)
                        break
                }
            return j
        }
    }
    ,
    k.print = function(b, d, e, f, g, h, i) {
        h = h || "middle",
        i = x(y(i || 0, 1), -1);
        var j = r(e)[s](p), k = 0, l = 0, m = p, n;
        a.is(f, e) && (f = this.getFont(f));
        if (f) {
            n = (g || 16) / f.face["units-per-em"];
            var o = f.face.bbox[s](c)
              , q = +o[0]
              , t = o[3] - o[1]
              , u = 0
              , v = +o[1] + (h == "baseline" ? t + +f.face.descent : t / 2);
            for (var w = 0, z = j.length; w < z; w++) {
                if (j[w] == "\n")
                    k = 0,
                    B = 0,
                    l = 0,
                    u += t;
                else {
                    var A = l && f.glyphs[j[w - 1]] || {}
                      , B = f.glyphs[j[w]];
                    k += l ? (A.w || f.w) + (A.k && A.k[j[w]] || 0) + f.w * i : 0,
                    l = 1
                }
                B && B.d && (m += a.transformPath(B.d, ["t", k * n, u * n, "s", n, n, q, v, "t", (b - q) / n, (d - v) / n]))
            }
        }
        return this.path(m).attr({
            fill: "#000",
            stroke: "none"
        })
    }
    ,
    k.add = function(b) {
        if (a.is(b, "array")) {
            var c = this.set(), e = 0, f = b.length, h;
            for (; e < f; e++)
                h = b[e] || {},
                d[g](h.type) && c.push(this[h.type]().attr(h))
        }
        return c
    }
    ,
    a.format = function(b, c) {
        var d = a.is(c, E) ? [0][n](c) : arguments;
        b && a.is(b, D) && d.length - 1 && (b = b.replace(e, function(a, b) {
            return d[++b] == null ? p : d[b]
        }));
        return b || p
    }
    ,
    a.fullfill = function() {
        var a = /\{([^\}]+)\}/g
          , b = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g
          , c = function(a, c, d) {
            var e = d;
            c.replace(b, function(a, b, c, d, f) {
                b = b || d,
                e && (b in e && (e = e[b]),
                typeof e == "function" && f && (e = e()))
            }),
            e = (e == null || e == d ? a : e) + "";
            return e
        };
        return function(b, d) {
            return String(b).replace(a, function(a, b) {
                return c(a, b, d)
            })
        }
    }(),
    a.ninja = function() {
        i.was ? h.win.Raphael = i.is : delete Raphael;
        return a
    }
    ,
    a.st = cH,
    function(b, c, d) {
        function e() {
            /in/.test(b.readyState) ? setTimeout(e, 9) : a.eve("raphael.DOMload")
        }
        b.readyState == null && b.addEventListener && (b.addEventListener(c, d = function() {
            b.removeEventListener(c, d, !1),
            b.readyState = "complete"
        }
        , !1),
        b.readyState = "loading"),
        e()
    }(document, "DOMContentLoaded"),
    i.was ? h.win.Raphael = a : Raphael = a,
    eve.on("raphael.DOMload", function() {
        b = !0
    })
}(),
window.Raphael.svg && function(a) {
    var b = "hasOwnProperty"
      , c = String
      , d = parseFloat
      , e = parseInt
      , f = Math
      , g = f.max
      , h = f.abs
      , i = f.pow
      , j = /[, ]+/
      , k = a.eve
      , l = ""
      , m = " "
      , n = "http://www.w3.org/1999/xlink"
      , o = {
        block: "M5,0 0,2.5 5,5z",
        classic: "M5,0 0,2.5 5,5 3.5,3 3.5,2z",
        diamond: "M2.5,0 5,2.5 2.5,5 0,2.5z",
        open: "M6,1 1,3.5 6,6",
        oval: "M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z"
    }
      , p = {};
    a.toString = function() {
        return "Your browser supports SVG.\nYou are running Raphaël " + this.version
    }
    ;
    var q = function(d, e) {
        if (e) {
            typeof d == "string" && (d = q(d));
            for (var f in e)
                e[b](f) && (f.substring(0, 6) == "xlink:" ? d.setAttributeNS(n, f.substring(6), c(e[f])) : d.setAttribute(f, c(e[f])))
        } else
            d = a._g.doc.createElementNS("http://www.w3.org/2000/svg", d),
            d.style && (d.style.webkitTapHighlightColor = "rgba(0,0,0,0)");
        return d
    }
      , r = function(b, e) {
        var j = "linear"
          , k = b.id + e
          , m = .5
          , n = .5
          , o = b.node
          , p = b.paper
          , r = o.style
          , s = a._g.doc.getElementById(k);
        if (!s) {
            e = c(e).replace(a._radial_gradient, function(a, b, c) {
                j = "radial";
                if (b && c) {
                    m = d(b),
                    n = d(c);
                    var e = (n > .5) * 2 - 1;
                    i(m - .5, 2) + i(n - .5, 2) > .25 && (n = f.sqrt(.25 - i(m - .5, 2)) * e + .5) && n != .5 && (n = n.toFixed(5) - 1e-5 * e)
                }
                return l
            }),
            e = e.split(/\s*\-\s*/);
            if (j == "linear") {
                var t = e.shift();
                t = -d(t);
                if (isNaN(t))
                    return null;
                var u = [0, 0, f.cos(a.rad(t)), f.sin(a.rad(t))]
                  , v = 1 / (g(h(u[2]), h(u[3])) || 1);
                u[2] *= v,
                u[3] *= v,
                u[2] < 0 && (u[0] = -u[2],
                u[2] = 0),
                u[3] < 0 && (u[1] = -u[3],
                u[3] = 0)
            }
            var w = a._parseDots(e);
            if (!w)
                return null;
            k = k.replace(/[\(\)\s,\xb0#]/g, "_"),
            b.gradient && k != b.gradient.id && (p.defs.removeChild(b.gradient),
            delete b.gradient);
            if (!b.gradient) {
                s = q(j + "Gradient", {
                    id: k
                }),
                b.gradient = s,
                q(s, j == "radial" ? {
                    fx: m,
                    fy: n
                } : {
                    x1: u[0],
                    y1: u[1],
                    x2: u[2],
                    y2: u[3],
                    gradientTransform: b.matrix.invert()
                }),
                p.defs.appendChild(s);
                for (var x = 0, y = w.length; x < y; x++)
                    s.appendChild(q("stop", {
                        offset: w[x].offset ? w[x].offset : x ? "100%" : "0%",
                        "stop-color": w[x].color || "#fff"
                    }))
            }
        }
        q(o, {
            fill: "url(#" + k + ")",
            opacity: 1,
            "fill-opacity": 1
        }),
        r.fill = l,
        r.opacity = 1,
        r.fillOpacity = 1;
        return 1
    }
      , s = function(a) {
        var b = a.getBBox(1);
        q(a.pattern, {
            patternTransform: a.matrix.invert() + " translate(" + b.x + "," + b.y + ")"
        })
    }
      , t = function(d, e, f) {
        if (d.type == "path") {
            var g = c(e).toLowerCase().split("-"), h = d.paper, i = f ? "end" : "start", j = d.node, k = d.attrs, m = k["stroke-width"], n = g.length, r = "classic", s, t, u, v, w, x = 3, y = 3, z = 5;
            while (n--)
                switch (g[n]) {
                case "block":
                case "classic":
                case "oval":
                case "diamond":
                case "open":
                case "none":
                    r = g[n];
                    break;
                case "wide":
                    y = 5;
                    break;
                case "narrow":
                    y = 2;
                    break;
                case "long":
                    x = 5;
                    break;
                case "short":
                    x = 2
                }
            r == "open" ? (x += 2,
            y += 2,
            z += 2,
            u = 1,
            v = f ? 4 : 1,
            w = {
                fill: "none",
                stroke: k.stroke
            }) : (v = u = x / 2,
            w = {
                fill: k.stroke,
                stroke: "none"
            }),
            d._.arrows ? f ? (d._.arrows.endPath && p[d._.arrows.endPath]--,
            d._.arrows.endMarker && p[d._.arrows.endMarker]--) : (d._.arrows.startPath && p[d._.arrows.startPath]--,
            d._.arrows.startMarker && p[d._.arrows.startMarker]--) : d._.arrows = {};
            if (r != "none") {
                var A = "raphael-marker-" + r
                  , B = "raphael-marker-" + i + r + x + y;
                a._g.doc.getElementById(A) ? p[A]++ : (h.defs.appendChild(q(q("path"), {
                    "stroke-linecap": "round",
                    d: o[r],
                    id: A
                })),
                p[A] = 1);
                var C = a._g.doc.getElementById(B), D;
                C ? (p[B]++,
                D = C.getElementsByTagName("use")[0]) : (C = q(q("marker"), {
                    id: B,
                    markerHeight: y,
                    markerWidth: x,
                    orient: "auto",
                    refX: v,
                    refY: y / 2
                }),
                D = q(q("use"), {
                    "xlink:href": "#" + A,
                    transform: (f ? "rotate(180 " + x / 2 + " " + y / 2 + ") " : l) + "scale(" + x / z + "," + y / z + ")",
                    "stroke-width": (1 / ((x / z + y / z) / 2)).toFixed(4)
                }),
                C.appendChild(D),
                h.defs.appendChild(C),
                p[B] = 1),
                q(D, w);
                var F = u * (r != "diamond" && r != "oval");
                f ? (s = d._.arrows.startdx * m || 0,
                t = a.getTotalLength(k.path) - F * m) : (s = F * m,
                t = a.getTotalLength(k.path) - (d._.arrows.enddx * m || 0)),
                w = {},
                w["marker-" + i] = "url(#" + B + ")";
                if (t || s)
                    w.d = Raphael.getSubpath(k.path, s, t);
                q(j, w),
                d._.arrows[i + "Path"] = A,
                d._.arrows[i + "Marker"] = B,
                d._.arrows[i + "dx"] = F,
                d._.arrows[i + "Type"] = r,
                d._.arrows[i + "String"] = e
            } else
                f ? (s = d._.arrows.startdx * m || 0,
                t = a.getTotalLength(k.path) - s) : (s = 0,
                t = a.getTotalLength(k.path) - (d._.arrows.enddx * m || 0)),
                d._.arrows[i + "Path"] && q(j, {
                    d: Raphael.getSubpath(k.path, s, t)
                }),
                delete d._.arrows[i + "Path"],
                delete d._.arrows[i + "Marker"],
                delete d._.arrows[i + "dx"],
                delete d._.arrows[i + "Type"],
                delete d._.arrows[i + "String"];
            for (w in p)
                if (p[b](w) && !p[w]) {
                    var G = a._g.doc.getElementById(w);
                    G && G.parentNode.removeChild(G)
                }
        }
    }
      , u = {
        "": [0],
        none: [0],
        "-": [3, 1],
        ".": [1, 1],
        "-.": [3, 1, 1, 1],
        "-..": [3, 1, 1, 1, 1, 1],
        ". ": [1, 3],
        "- ": [4, 3],
        "--": [8, 3],
        "- .": [4, 3, 1, 3],
        "--.": [8, 3, 1, 3],
        "--..": [8, 3, 1, 3, 1, 3]
    }
      , v = function(a, b, d) {
        b = u[c(b).toLowerCase()];
        if (b) {
            var e = a.attrs["stroke-width"] || "1"
              , f = {
                round: e,
                square: e,
                butt: 0
            }[a.attrs["stroke-linecap"] || d["stroke-linecap"]] || 0
              , g = []
              , h = b.length;
            while (h--)
                g[h] = b[h] * e + (h % 2 ? 1 : -1) * f;
            q(a.node, {
                "stroke-dasharray": g.join(",")
            })
        }
    }
      , w = function(d, f) {
        var i = d.node
          , k = d.attrs
          , m = i.style.visibility;
        i.style.visibility = "hidden";
        for (var o in f)
            if (f[b](o)) {
                if (!a._availableAttrs[b](o))
                    continue;
                var p = f[o];
                k[o] = p;
                switch (o) {
                case "blur":
                    d.blur(p);
                    break;
                case "href":
                case "title":
                case "target":
                    var u = i.parentNode;
                    if (u.tagName.toLowerCase() != "a") {
                        var w = q("a");
                        u.insertBefore(w, i),
                        w.appendChild(i),
                        u = w
                    }
                    o == "target" ? u.setAttributeNS(n, "show", p == "blank" ? "new" : p) : u.setAttributeNS(n, o, p);
                    break;
                case "cursor":
                    i.style.cursor = p;
                    break;
                case "transform":
                    d.transform(p);
                    break;
                case "arrow-start":
                    t(d, p);
                    break;
                case "arrow-end":
                    t(d, p, 1);
                    break;
                case "clip-rect":
                    var x = c(p).split(j);
                    if (x.length == 4) {
                        d.clip && d.clip.parentNode.parentNode.removeChild(d.clip.parentNode);
                        var z = q("clipPath")
                          , A = q("rect");
                        z.id = a.createUUID(),
                        q(A, {
                            x: x[0],
                            y: x[1],
                            width: x[2],
                            height: x[3]
                        }),
                        z.appendChild(A),
                        d.paper.defs.appendChild(z),
                        q(i, {
                            "clip-path": "url(#" + z.id + ")"
                        }),
                        d.clip = A
                    }
                    if (!p) {
                        var B = i.getAttribute("clip-path");
                        if (B) {
                            var C = a._g.doc.getElementById(B.replace(/(^url\(#|\)$)/g, l));
                            C && C.parentNode.removeChild(C),
                            q(i, {
                                "clip-path": l
                            }),
                            delete d.clip
                        }
                    }
                    break;
                case "path":
                    d.type == "path" && (q(i, {
                        d: p ? k.path = a._pathToAbsolute(p) : "M0,0"
                    }),
                    d._.dirty = 1,
                    d._.arrows && ("startString"in d._.arrows && t(d, d._.arrows.startString),
                    "endString"in d._.arrows && t(d, d._.arrows.endString, 1)));
                    break;
                case "width":
                    i.setAttribute(o, p),
                    d._.dirty = 1;
                    if (k.fx)
                        o = "x",
                        p = k.x;
                    else
                        break;
                case "x":
                    k.fx && (p = -k.x - (k.width || 0));
                case "rx":
                    if (o == "rx" && d.type == "rect")
                        break;
                case "cx":
                    i.setAttribute(o, p),
                    d.pattern && s(d),
                    d._.dirty = 1;
                    break;
                case "height":
                    i.setAttribute(o, p),
                    d._.dirty = 1;
                    if (k.fy)
                        o = "y",
                        p = k.y;
                    else
                        break;
                case "y":
                    k.fy && (p = -k.y - (k.height || 0));
                case "ry":
                    if (o == "ry" && d.type == "rect")
                        break;
                case "cy":
                    i.setAttribute(o, p),
                    d.pattern && s(d),
                    d._.dirty = 1;
                    break;
                case "r":
                    d.type == "rect" ? q(i, {
                        rx: p,
                        ry: p
                    }) : i.setAttribute(o, p),
                    d._.dirty = 1;
                    break;
                case "src":
                    d.type == "image" && i.setAttributeNS(n, "href", p);
                    break;
                case "stroke-width":
                    if (d._.sx != 1 || d._.sy != 1)
                        p /= g(h(d._.sx), h(d._.sy)) || 1;
                    d.paper._vbSize && (p *= d.paper._vbSize),
                    i.setAttribute(o, p),
                    k["stroke-dasharray"] && v(d, k["stroke-dasharray"], f),
                    d._.arrows && ("startString"in d._.arrows && t(d, d._.arrows.startString),
                    "endString"in d._.arrows && t(d, d._.arrows.endString, 1));
                    break;
                case "stroke-dasharray":
                    v(d, p, f);
                    break;
                case "fill":
                    var D = c(p).match(a._ISURL);
                    if (D) {
                        z = q("pattern");
                        var F = q("image");
                        z.id = a.createUUID(),
                        q(z, {
                            x: 0,
                            y: 0,
                            patternUnits: "userSpaceOnUse",
                            height: 1,
                            width: 1
                        }),
                        q(F, {
                            x: 0,
                            y: 0,
                            "xlink:href": D[1]
                        }),
                        z.appendChild(F),
                        function(b) {
                            a._preload(D[1], function() {
                                var a = this.offsetWidth
                                  , c = this.offsetHeight;
                                q(b, {
                                    width: a,
                                    height: c
                                }),
                                q(F, {
                                    width: a,
                                    height: c
                                }),
                                d.paper.safari()
                            })
                        }(z),
                        d.paper.defs.appendChild(z),
                        q(i, {
                            fill: "url(#" + z.id + ")"
                        }),
                        d.pattern = z,
                        d.pattern && s(d);
                        break
                    }
                    var G = a.getRGB(p);
                    if (!G.error)
                        delete f.gradient,
                        delete k.gradient,
                        !a.is(k.opacity, "undefined") && a.is(f.opacity, "undefined") && q(i, {
                            opacity: k.opacity
                        }),
                        !a.is(k["fill-opacity"], "undefined") && a.is(f["fill-opacity"], "undefined") && q(i, {
                            "fill-opacity": k["fill-opacity"]
                        });
                    else if ((d.type == "circle" || d.type == "ellipse" || c(p).charAt() != "r") && r(d, p)) {
                        if ("opacity"in k || "fill-opacity"in k) {
                            var H = a._g.doc.getElementById(i.getAttribute("fill").replace(/^url\(#|\)$/g, l));
                            if (H) {
                                var I = H.getElementsByTagName("stop");
                                q(I[I.length - 1], {
                                    "stop-opacity": ("opacity"in k ? k.opacity : 1) * ("fill-opacity"in k ? k["fill-opacity"] : 1)
                                })
                            }
                        }
                        k.gradient = p,
                        k.fill = "none";
                        break
                    }
                    G[b]("opacity") && q(i, {
                        "fill-opacity": G.opacity > 1 ? G.opacity / 100 : G.opacity
                    });
                case "stroke":
                    G = a.getRGB(p),
                    i.setAttribute(o, G.hex),
                    o == "stroke" && G[b]("opacity") && q(i, {
                        "stroke-opacity": G.opacity > 1 ? G.opacity / 100 : G.opacity
                    }),
                    o == "stroke" && d._.arrows && ("startString"in d._.arrows && t(d, d._.arrows.startString),
                    "endString"in d._.arrows && t(d, d._.arrows.endString, 1));
                    break;
                case "gradient":
                    (d.type == "circle" || d.type == "ellipse" || c(p).charAt() != "r") && r(d, p);
                    break;
                case "opacity":
                    k.gradient && !k[b]("stroke-opacity") && q(i, {
                        "stroke-opacity": p > 1 ? p / 100 : p
                    });
                case "fill-opacity":
                    if (k.gradient) {
                        H = a._g.doc.getElementById(i.getAttribute("fill").replace(/^url\(#|\)$/g, l)),
                        H && (I = H.getElementsByTagName("stop"),
                        q(I[I.length - 1], {
                            "stop-opacity": p
                        }));
                        break
                    }
                    ;
                default:
                    o == "font-size" && (p = e(p, 10) + "px");
                    var J = o.replace(/(\-.)/g, function(a) {
                        return a.substring(1).toUpperCase()
                    });
                    i.style[J] = p,
                    d._.dirty = 1,
                    i.setAttribute(o, p)
                }
            }
        y(d, f),
        i.style.visibility = m
    }
      , x = 1.2
      , y = function(d, f) {
        if (d.type == "text" && !!(f[b]("text") || f[b]("font") || f[b]("font-size") || f[b]("x") || f[b]("y"))) {
            var g = d.attrs
              , h = d.node
              , i = h.firstChild ? e(a._g.doc.defaultView.getComputedStyle(h.firstChild, l).getPropertyValue("font-size"), 10) : 10;
            if (f[b]("text")) {
                g.text = f.text;
                while (h.firstChild)
                    h.removeChild(h.firstChild);
                var j = c(f.text).split("\n"), k = [], m;
                for (var n = 0, o = j.length; n < o; n++)
                    m = q("tspan"),
                    n && q(m, {
                        dy: i * x,
                        x: g.x
                    }),
                    m.appendChild(a._g.doc.createTextNode(j[n])),
                    h.appendChild(m),
                    k[n] = m
            } else {
                k = h.getElementsByTagName("tspan");
                for (n = 0,
                o = k.length; n < o; n++)
                    n ? q(k[n], {
                        dy: i * x,
                        x: g.x
                    }) : q(k[0], {
                        dy: 0
                    })
            }
            q(h, {
                x: g.x,
                y: g.y
            }),
            d._.dirty = 1;
            var p = d._getBBox()
              , r = g.y - (p.y + p.height / 2);
            r && a.is(r, "finite") && q(k[0], {
                dy: r
            })
        }
    }
      , z = function(b, c) {
        var d = 0
          , e = 0;
        this[0] = this.node = b,
        b.raphael = !0,
        this.id = a._oid++,
        b.raphaelid = this.id,
        this.matrix = a.matrix(),
        this.realPath = null,
        this.paper = c,
        this.attrs = this.attrs || {},
        this._ = {
            transform: [],
            sx: 1,
            sy: 1,
            deg: 0,
            dx: 0,
            dy: 0,
            dirty: 1
        },
        !c.bottom && (c.bottom = this),
        this.prev = c.top,
        c.top && (c.top.next = this),
        c.top = this,
        this.next = null
    }
      , A = a.el;
    z.prototype = A,
    A.constructor = z,
    a._engine.path = function(a, b) {
        var c = q("path");
        b.canvas && b.canvas.appendChild(c);
        var d = new z(c,b);
        d.type = "path",
        w(d, {
            fill: "none",
            stroke: "#000",
            path: a
        });
        return d
    }
    ,
    A.rotate = function(a, b, e) {
        if (this.removed)
            return this;
        a = c(a).split(j),
        a.length - 1 && (b = d(a[1]),
        e = d(a[2])),
        a = d(a[0]),
        e == null && (b = e);
        if (b == null || e == null) {
            var f = this.getBBox(1);
            b = f.x + f.width / 2,
            e = f.y + f.height / 2
        }
        this.transform(this._.transform.concat([["r", a, b, e]]));
        return this
    }
    ,
    A.scale = function(a, b, e, f) {
        if (this.removed)
            return this;
        a = c(a).split(j),
        a.length - 1 && (b = d(a[1]),
        e = d(a[2]),
        f = d(a[3])),
        a = d(a[0]),
        b == null && (b = a),
        f == null && (e = f);
        if (e == null || f == null)
            var g = this.getBBox(1);
        e = e == null ? g.x + g.width / 2 : e,
        f = f == null ? g.y + g.height / 2 : f,
        this.transform(this._.transform.concat([["s", a, b, e, f]]));
        return this
    }
    ,
    A.translate = function(a, b) {
        if (this.removed)
            return this;
        a = c(a).split(j),
        a.length - 1 && (b = d(a[1])),
        a = d(a[0]) || 0,
        b = +b || 0,
        this.transform(this._.transform.concat([["t", a, b]]));
        return this
    }
    ,
    A.transform = function(c) {
        var d = this._;
        if (c == null)
            return d.transform;
        a._extractTransform(this, c),
        this.clip && q(this.clip, {
            transform: this.matrix.invert()
        }),
        this.pattern && s(this),
        this.node && q(this.node, {
            transform: this.matrix
        });
        if (d.sx != 1 || d.sy != 1) {
            var e = this.attrs[b]("stroke-width") ? this.attrs["stroke-width"] : 1;
            this.attr({
                "stroke-width": e
            })
        }
        return this
    }
    ,
    A.hide = function() {
        !this.removed && this.paper.safari(this.node.style.display = "none");
        return this
    }
    ,
    A.show = function() {
        !this.removed && this.paper.safari(this.node.style.display = "");
        return this
    }
    ,
    A.remove = function() {
        if (!this.removed && !!this.node.parentNode) {
            var b = this.paper;
            b.__set__ && b.__set__.exclude(this),
            k.unbind("raphael.*.*." + this.id),
            this.gradient && b.defs.removeChild(this.gradient),
            a._tear(this, b),
            this.node.parentNode.tagName.toLowerCase() == "a" ? this.node.parentNode.parentNode.removeChild(this.node.parentNode) : this.node.parentNode.removeChild(this.node);
            for (var c in this)
                this[c] = typeof this[c] == "function" ? a._removedFactory(c) : null;
            this.removed = !0
        }
    }
    ,
    A._getBBox = function() {
        if (this.node.style.display == "none") {
            this.show();
            var a = !0
        }
        var b = {};
        try {
            b = this.node.getBBox()
        } catch (c) {} finally {
            b = b || {}
        }
        a && this.hide();
        return b
    }
    ,
    A.attr = function(c, d) {
        if (this.removed)
            return this;
        if (c == null) {
            var e = {};
            for (var f in this.attrs)
                this.attrs[b](f) && (e[f] = this.attrs[f]);
            e.gradient && e.fill == "none" && (e.fill = e.gradient) && delete e.gradient,
            e.transform = this._.transform;
            return e
        }
        if (d == null && a.is(c, "string")) {
            if (c == "fill" && this.attrs.fill == "none" && this.attrs.gradient)
                return this.attrs.gradient;
            if (c == "transform")
                return this._.transform;
            var g = c.split(j)
              , h = {};
            for (var i = 0, l = g.length; i < l; i++)
                c = g[i],
                c in this.attrs ? h[c] = this.attrs[c] : a.is(this.paper.customAttributes[c], "function") ? h[c] = this.paper.customAttributes[c].def : h[c] = a._availableAttrs[c];
            return l - 1 ? h : h[g[0]]
        }
        if (d == null && a.is(c, "array")) {
            h = {};
            for (i = 0,
            l = c.length; i < l; i++)
                h[c[i]] = this.attr(c[i]);
            return h
        }
        if (d != null) {
            var m = {};
            m[c] = d
        } else
            c != null && a.is(c, "object") && (m = c);
        for (var n in m)
            k("raphael.attr." + n + "." + this.id, this, m[n]);
        for (n in this.paper.customAttributes)
            if (this.paper.customAttributes[b](n) && m[b](n) && a.is(this.paper.customAttributes[n], "function")) {
                var o = this.paper.customAttributes[n].apply(this, [].concat(m[n]));
                this.attrs[n] = m[n];
                for (var p in o)
                    o[b](p) && (m[p] = o[p])
            }
        w(this, m);
        return this
    }
    ,
    A.toFront = function() {
        if (this.removed)
            return this;
        this.node.parentNode.tagName.toLowerCase() == "a" ? this.node.parentNode.parentNode.appendChild(this.node.parentNode) : this.node.parentNode.appendChild(this.node);
        var b = this.paper;
        b.top != this && a._tofront(this, b);
        return this
    }
    ,
    A.toBack = function() {
        if (this.removed)
            return this;
        var b = this.node.parentNode;
        b.tagName.toLowerCase() == "a" ? b.parentNode.insertBefore(this.node.parentNode, this.node.parentNode.parentNode.firstChild) : b.firstChild != this.node && b.insertBefore(this.node, this.node.parentNode.firstChild),
        a._toback(this, this.paper);
        var c = this.paper;
        return this
    }
    ,
    A.insertAfter = function(b) {
        if (this.removed)
            return this;
        var c = b.node || b[b.length - 1].node;
        c.nextSibling ? c.parentNode.insertBefore(this.node, c.nextSibling) : c.parentNode.appendChild(this.node),
        a._insertafter(this, b, this.paper);
        return this
    }
    ,
    A.insertBefore = function(b) {
        if (this.removed)
            return this;
        var c = b.node || b[0].node;
        c.parentNode.insertBefore(this.node, c),
        a._insertbefore(this, b, this.paper);
        return this
    }
    ,
    A.blur = function(b) {
        var c = this;
        if (+b !== 0) {
            var d = q("filter")
              , e = q("feGaussianBlur");
            c.attrs.blur = b,
            d.id = a.createUUID(),
            q(e, {
                stdDeviation: +b || 1.5
            }),
            d.appendChild(e),
            c.paper.defs.appendChild(d),
            c._blur = d,
            q(c.node, {
                filter: "url(#" + d.id + ")"
            })
        } else
            c._blur && (c._blur.parentNode.removeChild(c._blur),
            delete c._blur,
            delete c.attrs.blur),
            c.node.removeAttribute("filter")
    }
    ,
    a._engine.circle = function(a, b, c, d) {
        var e = q("circle");
        a.canvas && a.canvas.appendChild(e);
        var f = new z(e,a);
        f.attrs = {
            cx: b,
            cy: c,
            r: d,
            fill: "none",
            stroke: "#000"
        },
        f.type = "circle",
        q(e, f.attrs);
        return f
    }
    ,
    a._engine.rect = function(a, b, c, d, e, f) {
        var g = q("rect");
        a.canvas && a.canvas.appendChild(g);
        var h = new z(g,a);
        h.attrs = {
            x: b,
            y: c,
            width: d,
            height: e,
            r: f || 0,
            rx: f || 0,
            ry: f || 0,
            fill: "none",
            stroke: "#000"
        },
        h.type = "rect",
        q(g, h.attrs);
        return h
    }
    ,
    a._engine.ellipse = function(a, b, c, d, e) {
        var f = q("ellipse");
        a.canvas && a.canvas.appendChild(f);
        var g = new z(f,a);
        g.attrs = {
            cx: b,
            cy: c,
            rx: d,
            ry: e,
            fill: "none",
            stroke: "#000"
        },
        g.type = "ellipse",
        q(f, g.attrs);
        return g
    }
    ,
    a._engine.image = function(a, b, c, d, e, f) {
        var g = q("image");
        q(g, {
            x: c,
            y: d,
            width: e,
            height: f,
            preserveAspectRatio: "none"
        }),
        g.setAttributeNS(n, "href", b),
        a.canvas && a.canvas.appendChild(g);
        var h = new z(g,a);
        h.attrs = {
            x: c,
            y: d,
            width: e,
            height: f,
            src: b
        },
        h.type = "image";
        return h
    }
    ,
    a._engine.text = function(b, c, d, e) {
        var f = q("text");
        b.canvas && b.canvas.appendChild(f);
        var g = new z(f,b);
        g.attrs = {
            x: c,
            y: d,
            "text-anchor": "middle",
            text: e,
            font: a._availableAttrs.font,
            stroke: "none",
            fill: "#000"
        },
        g.type = "text",
        w(g, g.attrs);
        return g
    }
    ,
    a._engine.setSize = function(a, b) {
        this.width = a || this.width,
        this.height = b || this.height,
        this.canvas.setAttribute("width", this.width),
        this.canvas.setAttribute("height", this.height),
        this._viewBox && this.setViewBox.apply(this, this._viewBox);
        return this
    }
    ,
    a._engine.create = function() {
        var b = a._getContainer.apply(0, arguments)
          , c = b && b.container
          , d = b.x
          , e = b.y
          , f = b.width
          , g = b.height;
        if (!c)
            throw new Error("SVG container not found.");
        var h = q("svg"), i = "overflow:hidden;", j;
        d = d || 0,
        e = e || 0,
        f = f || 512,
        g = g || 342,
        q(h, {
            height: g,
            version: 1.1,
            width: f,
            xmlns: "http://www.w3.org/2000/svg"
        }),
        c == 1 ? (h.style.cssText = i + "position:absolute;left:" + d + "px;top:" + e + "px",
        a._g.doc.body.appendChild(h),
        j = 1) : (h.style.cssText = i + "position:relative",
        c.firstChild ? c.insertBefore(h, c.firstChild) : c.appendChild(h)),
        c = new a._Paper,
        c.width = f,
        c.height = g,
        c.canvas = h,
        c.clear(),
        c._left = c._top = 0,
        j && (c.renderfix = function() {}
        ),
        c.renderfix();
        return c
    }
    ,
    a._engine.setViewBox = function(a, b, c, d, e) {
        k("raphael.setViewBox", this, this._viewBox, [a, b, c, d, e]);
        var f = g(c / this.width, d / this.height), h = this.top, i = e ? "meet" : "xMinYMin", j, l;
        a == null ? (this._vbSize && (f = 1),
        delete this._vbSize,
        j = "0 0 " + this.width + m + this.height) : (this._vbSize = f,
        j = a + m + b + m + c + m + d),
        q(this.canvas, {
            viewBox: j,
            preserveAspectRatio: i
        });
        while (f && h)
            l = "stroke-width"in h.attrs ? h.attrs["stroke-width"] : 1,
            h.attr({
                "stroke-width": l
            }),
            h._.dirty = 1,
            h._.dirtyT = 1,
            h = h.prev;
        this._viewBox = [a, b, c, d, !!e];
        return this
    }
    ,
    a.prototype.renderfix = function() {
        var a = this.canvas, b = a.style, c;
        try {
            c = a.getScreenCTM() || a.createSVGMatrix()
        } catch (d) {
            c = a.createSVGMatrix()
        }
        var e = -c.e % 1
          , f = -c.f % 1;
        if (e || f)
            e && (this._left = (this._left + e) % 1,
            b.left = this._left + "px"),
            f && (this._top = (this._top + f) % 1,
            b.top = this._top + "px")
    }
    ,
    a.prototype.clear = function() {
        a.eve("raphael.clear", this);
        var b = this.canvas;
        while (b.firstChild)
            b.removeChild(b.firstChild);
        this.bottom = this.top = null,
        (this.desc = q("desc")).appendChild(a._g.doc.createTextNode("Created with Raphaël " + a.version)),
        b.appendChild(this.desc),
        b.appendChild(this.defs = q("defs"))
    }
    ,
    a.prototype.remove = function() {
        k("raphael.remove", this),
        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);
        for (var b in this)
            this[b] = typeof this[b] == "function" ? a._removedFactory(b) : null
    }
    ;
    var B = a.st;
    for (var C in A)
        A[b](C) && !B[b](C) && (B[C] = function(a) {
            return function() {
                var b = arguments;
                return this.forEach(function(c) {
                    c[a].apply(c, b)
                })
            }
        }(C))
}(window.Raphael),
window.Raphael.vml && function(a) {
    var b = "hasOwnProperty"
      , c = String
      , d = parseFloat
      , e = Math
      , f = e.round
      , g = e.max
      , h = e.min
      , i = e.abs
      , j = "fill"
      , k = /[, ]+/
      , l = a.eve
      , m = " progid:DXImageTransform.Microsoft"
      , n = " "
      , o = ""
      , p = {
        M: "m",
        L: "l",
        C: "c",
        Z: "x",
        m: "t",
        l: "r",
        c: "v",
        z: "x"
    }
      , q = /([clmz]),?([^clmz]*)/gi
      , r = / progid:\S+Blur\([^\)]+\)/g
      , s = /-?[^,\s-]+/g
      , t = "position:absolute;left:0;top:0;width:1px;height:1px"
      , u = 21600
      , v = {
        path: 1,
        rect: 1,
        image: 1
    }
      , w = {
        circle: 1,
        ellipse: 1
    }
      , x = function(b) {
        var d = /[ahqstv]/ig
          , e = a._pathToAbsolute;
        c(b).match(d) && (e = a._path2curve),
        d = /[clmz]/g;
        if (e == a._pathToAbsolute && !c(b).match(d)) {
            var g = c(b).replace(q, function(a, b, c) {
                var d = []
                  , e = b.toLowerCase() == "m"
                  , g = p[b];
                c.replace(s, function(a) {
                    e && d.length == 2 && (g += d + p[b == "m" ? "l" : "L"],
                    d = []),
                    d.push(f(a * u))
                });
                return g + d
            });
            return g
        }
        var h = e(b), i, j;
        g = [];
        for (var k = 0, l = h.length; k < l; k++) {
            i = h[k],
            j = h[k][0].toLowerCase(),
            j == "z" && (j = "x");
            for (var m = 1, r = i.length; m < r; m++)
                j += f(i[m] * u) + (m != r - 1 ? "," : o);
            g.push(j)
        }
        return g.join(n)
    }
      , y = function(b, c, d) {
        var e = a.matrix();
        e.rotate(-b, .5, .5);
        return {
            dx: e.x(c, d),
            dy: e.y(c, d)
        }
    }
      , z = function(a, b, c, d, e, f) {
        var g = a._, h = a.matrix, k = g.fillpos, l = a.node, m = l.style, o = 1, p = "", q, r = u / b, s = u / c;
        m.visibility = "hidden";
        if (!!b && !!c) {
            l.coordsize = i(r) + n + i(s),
            m.rotation = f * (b * c < 0 ? -1 : 1);
            if (f) {
                var t = y(f, d, e);
                d = t.dx,
                e = t.dy
            }
            b < 0 && (p += "x"),
            c < 0 && (p += " y") && (o = -1),
            m.flip = p,
            l.coordorigin = d * -r + n + e * -s;
            if (k || g.fillsize) {
                var v = l.getElementsByTagName(j);
                v = v && v[0],
                l.removeChild(v),
                k && (t = y(f, h.x(k[0], k[1]), h.y(k[0], k[1])),
                v.position = t.dx * o + n + t.dy * o),
                g.fillsize && (v.size = g.fillsize[0] * i(b) + n + g.fillsize[1] * i(c)),
                l.appendChild(v)
            }
            m.visibility = "visible"
        }
    };
    a.toString = function() {
        return "Your browser doesn’t support SVG. Falling down to VML.\nYou are running Raphaël " + this.version
    }
    ;
    var A = function(a, b, d) {
        var e = c(b).toLowerCase().split("-")
          , f = d ? "end" : "start"
          , g = e.length
          , h = "classic"
          , i = "medium"
          , j = "medium";
        while (g--)
            switch (e[g]) {
            case "block":
            case "classic":
            case "oval":
            case "diamond":
            case "open":
            case "none":
                h = e[g];
                break;
            case "wide":
            case "narrow":
                j = e[g];
                break;
            case "long":
            case "short":
                i = e[g]
            }
        var k = a.node.getElementsByTagName("stroke")[0];
        k[f + "arrow"] = h,
        k[f + "arrowlength"] = i,
        k[f + "arrowwidth"] = j
    }
      , B = function(e, i) {
        e.attrs = e.attrs || {};
        var l = e.node, m = e.attrs, p = l.style, q, r = v[e.type] && (i.x != m.x || i.y != m.y || i.width != m.width || i.height != m.height || i.cx != m.cx || i.cy != m.cy || i.rx != m.rx || i.ry != m.ry || i.r != m.r), s = w[e.type] && (m.cx != i.cx || m.cy != i.cy || m.r != i.r || m.rx != i.rx || m.ry != i.ry), t = e;
        for (var y in i)
            i[b](y) && (m[y] = i[y]);
        r && (m.path = a._getPath[e.type](e),
        e._.dirty = 1),
        i.href && (l.href = i.href),
        i.title && (l.title = i.title),
        i.target && (l.target = i.target),
        i.cursor && (p.cursor = i.cursor),
        "blur"in i && e.blur(i.blur);
        if (i.path && e.type == "path" || r)
            l.path = x(~c(m.path).toLowerCase().indexOf("r") ? a._pathToAbsolute(m.path) : m.path),
            e.type == "image" && (e._.fillpos = [m.x, m.y],
            e._.fillsize = [m.width, m.height],
            z(e, 1, 1, 0, 0, 0));
        "transform"in i && e.transform(i.transform);
        if (s) {
            var B = +m.cx
              , D = +m.cy
              , E = +m.rx || +m.r || 0
              , G = +m.ry || +m.r || 0;
            l.path = a.format("ar{0},{1},{2},{3},{4},{1},{4},{1}x", f((B - E) * u), f((D - G) * u), f((B + E) * u), f((D + G) * u), f(B * u))
        }
        if ("clip-rect"in i) {
            var H = c(i["clip-rect"]).split(k);
            if (H.length == 4) {
                H[2] = +H[2] + +H[0],
                H[3] = +H[3] + +H[1];
                var I = l.clipRect || a._g.doc.createElement("div")
                  , J = I.style;
                J.clip = a.format("rect({1}px {2}px {3}px {0}px)", H),
                l.clipRect || (J.position = "absolute",
                J.top = 0,
                J.left = 0,
                J.width = e.paper.width + "px",
                J.height = e.paper.height + "px",
                l.parentNode.insertBefore(I, l),
                I.appendChild(l),
                l.clipRect = I)
            }
            i["clip-rect"] || l.clipRect && (l.clipRect.style.clip = "auto")
        }
        if (e.textpath) {
            var K = e.textpath.style;
            i.font && (K.font = i.font),
            i["font-family"] && (K.fontFamily = '"' + i["font-family"].split(",")[0].replace(/^['"]+|['"]+$/g, o) + '"'),
            i["font-size"] && (K.fontSize = i["font-size"]),
            i["font-weight"] && (K.fontWeight = i["font-weight"]),
            i["font-style"] && (K.fontStyle = i["font-style"])
        }
        "arrow-start"in i && A(t, i["arrow-start"]),
        "arrow-end"in i && A(t, i["arrow-end"], 1);
        if (i.opacity != null || i["stroke-width"] != null || i.fill != null || i.src != null || i.stroke != null || i["stroke-width"] != null || i["stroke-opacity"] != null || i["fill-opacity"] != null || i["stroke-dasharray"] != null || i["stroke-miterlimit"] != null || i["stroke-linejoin"] != null || i["stroke-linecap"] != null) {
            var L = l.getElementsByTagName(j)
              , M = !1;
            L = L && L[0],
            !L && (M = L = F(j)),
            e.type == "image" && i.src && (L.src = i.src),
            i.fill && (L.on = !0);
            if (L.on == null || i.fill == "none" || i.fill === null)
                L.on = !1;
            if (L.on && i.fill) {
                var N = c(i.fill).match(a._ISURL);
                if (N) {
                    L.parentNode == l && l.removeChild(L),
                    L.rotate = !0,
                    L.src = N[1],
                    L.type = "tile";
                    var O = e.getBBox(1);
                    L.position = O.x + n + O.y,
                    e._.fillpos = [O.x, O.y],
                    a._preload(N[1], function() {
                        e._.fillsize = [this.offsetWidth, this.offsetHeight]
                    })
                } else
                    L.color = a.getRGB(i.fill).hex,
                    L.src = o,
                    L.type = "solid",
                    a.getRGB(i.fill).error && (t.type in {
                        circle: 1,
                        ellipse: 1
                    } || c(i.fill).charAt() != "r") && C(t, i.fill, L) && (m.fill = "none",
                    m.gradient = i.fill,
                    L.rotate = !1)
            }
            if ("fill-opacity"in i || "opacity"in i) {
                var P = ((+m["fill-opacity"] + 1 || 2) - 1) * ((+m.opacity + 1 || 2) - 1) * ((+a.getRGB(i.fill).o + 1 || 2) - 1);
                P = h(g(P, 0), 1),
                L.opacity = P,
                L.src && (L.color = "none")
            }
            l.appendChild(L);
            var Q = l.getElementsByTagName("stroke") && l.getElementsByTagName("stroke")[0]
              , T = !1;
            !Q && (T = Q = F("stroke"));
            if (i.stroke && i.stroke != "none" || i["stroke-width"] || i["stroke-opacity"] != null || i["stroke-dasharray"] || i["stroke-miterlimit"] || i["stroke-linejoin"] || i["stroke-linecap"])
                Q.on = !0;
            (i.stroke == "none" || i.stroke === null || Q.on == null || i.stroke == 0 || i["stroke-width"] == 0) && (Q.on = !1);
            var U = a.getRGB(i.stroke);
            Q.on && i.stroke && (Q.color = U.hex),
            P = ((+m["stroke-opacity"] + 1 || 2) - 1) * ((+m.opacity + 1 || 2) - 1) * ((+U.o + 1 || 2) - 1);
            var V = (d(i["stroke-width"]) || 1) * .75;
            P = h(g(P, 0), 1),
            i["stroke-width"] == null && (V = m["stroke-width"]),
            i["stroke-width"] && (Q.weight = V),
            V && V < 1 && (P *= V) && (Q.weight = 1),
            Q.opacity = P,
            i["stroke-linejoin"] && (Q.joinstyle = i["stroke-linejoin"] || "miter"),
            Q.miterlimit = i["stroke-miterlimit"] || 8,
            i["stroke-linecap"] && (Q.endcap = i["stroke-linecap"] == "butt" ? "flat" : i["stroke-linecap"] == "square" ? "square" : "round");
            if (i["stroke-dasharray"]) {
                var W = {
                    "-": "shortdash",
                    ".": "shortdot",
                    "-.": "shortdashdot",
                    "-..": "shortdashdotdot",
                    ". ": "dot",
                    "- ": "dash",
                    "--": "longdash",
                    "- .": "dashdot",
                    "--.": "longdashdot",
                    "--..": "longdashdotdot"
                };
                Q.dashstyle = W[b](i["stroke-dasharray"]) ? W[i["stroke-dasharray"]] : o
            }
            T && l.appendChild(Q)
        }
        if (t.type == "text") {
            t.paper.canvas.style.display = o;
            var X = t.paper.span
              , Y = 100
              , Z = m.font && m.font.match(/\d+(?:\.\d*)?(?=px)/);
            p = X.style,
            m.font && (p.font = m.font),
            m["font-family"] && (p.fontFamily = m["font-family"]),
            m["font-weight"] && (p.fontWeight = m["font-weight"]),
            m["font-style"] && (p.fontStyle = m["font-style"]),
            Z = d(m["font-size"] || Z && Z[0]) || 10,
            p.fontSize = Z * Y + "px",
            t.textpath.string && (X.innerHTML = c(t.textpath.string).replace(/</g, "&#60;").replace(/&/g, "&#38;").replace(/\n/g, "<br>"));
            var $ = X.getBoundingClientRect();
            t.W = m.w = ($.right - $.left) / Y,
            t.H = m.h = ($.bottom - $.top) / Y,
            t.X = m.x,
            t.Y = m.y + t.H / 2,
            ("x"in i || "y"in i) && (t.path.v = a.format("m{0},{1}l{2},{1}", f(m.x * u), f(m.y * u), f(m.x * u) + 1));
            var _ = ["x", "y", "text", "font", "font-family", "font-weight", "font-style", "font-size"];
            for (var ba = 0, bb = _.length; ba < bb; ba++)
                if (_[ba]in i) {
                    t._.dirty = 1;
                    break
                }
            switch (m["text-anchor"]) {
            case "start":
                t.textpath.style["v-text-align"] = "left",
                t.bbx = t.W / 2;
                break;
            case "end":
                t.textpath.style["v-text-align"] = "right",
                t.bbx = -t.W / 2;
                break;
            default:
                t.textpath.style["v-text-align"] = "center",
                t.bbx = 0
            }
            t.textpath.style["v-text-kern"] = !0
        }
    }
      , C = function(b, f, g) {
        b.attrs = b.attrs || {};
        var h = b.attrs, i = Math.pow, j, k, l = "linear", m = ".5 .5";
        b.attrs.gradient = f,
        f = c(f).replace(a._radial_gradient, function(a, b, c) {
            l = "radial",
            b && c && (b = d(b),
            c = d(c),
            i(b - .5, 2) + i(c - .5, 2) > .25 && (c = e.sqrt(.25 - i(b - .5, 2)) * ((c > .5) * 2 - 1) + .5),
            m = b + n + c);
            return o
        }),
        f = f.split(/\s*\-\s*/);
        if (l == "linear") {
            var p = f.shift();
            p = -d(p);
            if (isNaN(p))
                return null
        }
        var q = a._parseDots(f);
        if (!q)
            return null;
        b = b.shape || b.node;
        if (q.length) {
            b.removeChild(g),
            g.on = !0,
            g.method = "none",
            g.color = q[0].color,
            g.color2 = q[q.length - 1].color;
            var r = [];
            for (var s = 0, t = q.length; s < t; s++)
                q[s].offset && r.push(q[s].offset + n + q[s].color);
            g.colors = r.length ? r.join() : "0% " + g.color,
            l == "radial" ? (g.type = "gradientTitle",
            g.focus = "100%",
            g.focussize = "0 0",
            g.focusposition = m,
            g.angle = 0) : (g.type = "gradient",
            g.angle = (270 - p) % 360),
            b.appendChild(g)
        }
        return 1
    }
      , D = function(b, c) {
        this[0] = this.node = b,
        b.raphael = !0,
        this.id = a._oid++,
        b.raphaelid = this.id,
        this.X = 0,
        this.Y = 0,
        this.attrs = {},
        this.paper = c,
        this.matrix = a.matrix(),
        this._ = {
            transform: [],
            sx: 1,
            sy: 1,
            dx: 0,
            dy: 0,
            deg: 0,
            dirty: 1,
            dirtyT: 1
        },
        !c.bottom && (c.bottom = this),
        this.prev = c.top,
        c.top && (c.top.next = this),
        c.top = this,
        this.next = null
    }
      , E = a.el;
    D.prototype = E,
    E.constructor = D,
    E.transform = function(b) {
        if (b == null)
            return this._.transform;
        var d = this.paper._viewBoxShift, e = d ? "s" + [d.scale, d.scale] + "-1-1t" + [d.dx, d.dy] : o, f;
        d && (f = b = c(b).replace(/\.{3}|\u2026/g, this._.transform || o)),
        a._extractTransform(this, e + b);
        var g = this.matrix.clone(), h = this.skew, i = this.node, j, k = ~c(this.attrs.fill).indexOf("-"), l = !c(this.attrs.fill).indexOf("url(");
        g.translate(-0.5, -0.5);
        if (l || k || this.type == "image") {
            h.matrix = "1 0 0 1",
            h.offset = "0 0",
            j = g.split();
            if (k && j.noRotation || !j.isSimple) {
                i.style.filter = g.toFilter();
                var m = this.getBBox()
                  , p = this.getBBox(1)
                  , q = m.x - p.x
                  , r = m.y - p.y;
                i.coordorigin = q * -u + n + r * -u,
                z(this, 1, 1, q, r, 0)
            } else
                i.style.filter = o,
                z(this, j.scalex, j.scaley, j.dx, j.dy, j.rotate)
        } else
            i.style.filter = o,
            h.matrix = c(g),
            h.offset = g.offset();
        f && (this._.transform = f);
        return this
    }
    ,
    E.rotate = function(a, b, e) {
        if (this.removed)
            return this;
        if (a != null) {
            a = c(a).split(k),
            a.length - 1 && (b = d(a[1]),
            e = d(a[2])),
            a = d(a[0]),
            e == null && (b = e);
            if (b == null || e == null) {
                var f = this.getBBox(1);
                b = f.x + f.width / 2,
                e = f.y + f.height / 2
            }
            this._.dirtyT = 1,
            this.transform(this._.transform.concat([["r", a, b, e]]));
            return this
        }
    }
    ,
    E.translate = function(a, b) {
        if (this.removed)
            return this;
        a = c(a).split(k),
        a.length - 1 && (b = d(a[1])),
        a = d(a[0]) || 0,
        b = +b || 0,
        this._.bbox && (this._.bbox.x += a,
        this._.bbox.y += b),
        this.transform(this._.transform.concat([["t", a, b]]));
        return this
    }
    ,
    E.scale = function(a, b, e, f) {
        if (this.removed)
            return this;
        a = c(a).split(k),
        a.length - 1 && (b = d(a[1]),
        e = d(a[2]),
        f = d(a[3]),
        isNaN(e) && (e = null),
        isNaN(f) && (f = null)),
        a = d(a[0]),
        b == null && (b = a),
        f == null && (e = f);
        if (e == null || f == null)
            var g = this.getBBox(1);
        e = e == null ? g.x + g.width / 2 : e,
        f = f == null ? g.y + g.height / 2 : f,
        this.transform(this._.transform.concat([["s", a, b, e, f]])),
        this._.dirtyT = 1;
        return this
    }
    ,
    E.hide = function() {
        !this.removed && (this.node.style.display = "none");
        return this
    }
    ,
    E.show = function() {
        !this.removed && (this.node.style.display = o);
        return this
    }
    ,
    E._getBBox = function() {
        if (this.removed)
            return {};
        return {
            x: this.X + (this.bbx || 0) - this.W / 2,
            y: this.Y - this.H,
            width: this.W,
            height: this.H
        }
    }
    ,
    E.remove = function() {
        if (!this.removed && !!this.node.parentNode) {
            this.paper.__set__ && this.paper.__set__.exclude(this),
            a.eve.unbind("raphael.*.*." + this.id),
            a._tear(this, this.paper),
            this.node.parentNode.removeChild(this.node),
            this.shape && this.shape.parentNode.removeChild(this.shape);
            for (var b in this)
                this[b] = typeof this[b] == "function" ? a._removedFactory(b) : null;
            this.removed = !0
        }
    }
    ,
    E.attr = function(c, d) {
        if (this.removed)
            return this;
        if (c == null) {
            var e = {};
            for (var f in this.attrs)
                this.attrs[b](f) && (e[f] = this.attrs[f]);
            e.gradient && e.fill == "none" && (e.fill = e.gradient) && delete e.gradient,
            e.transform = this._.transform;
            return e
        }
        if (d == null && a.is(c, "string")) {
            if (c == j && this.attrs.fill == "none" && this.attrs.gradient)
                return this.attrs.gradient;
            var g = c.split(k)
              , h = {};
            for (var i = 0, m = g.length; i < m; i++)
                c = g[i],
                c in this.attrs ? h[c] = this.attrs[c] : a.is(this.paper.customAttributes[c], "function") ? h[c] = this.paper.customAttributes[c].def : h[c] = a._availableAttrs[c];
            return m - 1 ? h : h[g[0]]
        }
        if (this.attrs && d == null && a.is(c, "array")) {
            h = {};
            for (i = 0,
            m = c.length; i < m; i++)
                h[c[i]] = this.attr(c[i]);
            return h
        }
        var n;
        d != null && (n = {},
        n[c] = d),
        d == null && a.is(c, "object") && (n = c);
        for (var o in n)
            l("raphael.attr." + o + "." + this.id, this, n[o]);
        if (n) {
            for (o in this.paper.customAttributes)
                if (this.paper.customAttributes[b](o) && n[b](o) && a.is(this.paper.customAttributes[o], "function")) {
                    var p = this.paper.customAttributes[o].apply(this, [].concat(n[o]));
                    this.attrs[o] = n[o];
                    for (var q in p)
                        p[b](q) && (n[q] = p[q])
                }
            n.text && this.type == "text" && (this.textpath.string = n.text),
            B(this, n)
        }
        return this
    }
    ,
    E.toFront = function() {
        !this.removed && this.node.parentNode.appendChild(this.node),
        this.paper && this.paper.top != this && a._tofront(this, this.paper);
        return this
    }
    ,
    E.toBack = function() {
        if (this.removed)
            return this;
        this.node.parentNode.firstChild != this.node && (this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild),
        a._toback(this, this.paper));
        return this
    }
    ,
    E.insertAfter = function(b) {
        if (this.removed)
            return this;
        b.constructor == a.st.constructor && (b = b[b.length - 1]),
        b.node.nextSibling ? b.node.parentNode.insertBefore(this.node, b.node.nextSibling) : b.node.parentNode.appendChild(this.node),
        a._insertafter(this, b, this.paper);
        return this
    }
    ,
    E.insertBefore = function(b) {
        if (this.removed)
            return this;
        b.constructor == a.st.constructor && (b = b[0]),
        b.node.parentNode.insertBefore(this.node, b.node),
        a._insertbefore(this, b, this.paper);
        return this
    }
    ,
    E.blur = function(b) {
        var c = this.node.runtimeStyle
          , d = c.filter;
        d = d.replace(r, o),
        +b !== 0 ? (this.attrs.blur = b,
        c.filter = d + n + m + ".Blur(pixelradius=" + (+b || 1.5) + ")",
        c.margin = a.format("-{0}px 0 0 -{0}px", f(+b || 1.5))) : (c.filter = d,
        c.margin = 0,
        delete this.attrs.blur)
    }
    ,
    a._engine.path = function(a, b) {
        var c = F("shape");
        c.style.cssText = t,
        c.coordsize = u + n + u,
        c.coordorigin = b.coordorigin;
        var d = new D(c,b)
          , e = {
            fill: "none",
            stroke: "#000"
        };
        a && (e.path = a),
        d.type = "path",
        d.path = [],
        d.Path = o,
        B(d, e),
        b.canvas.appendChild(c);
        var f = F("skew");
        f.on = !0,
        c.appendChild(f),
        d.skew = f,
        d.transform(o);
        return d
    }
    ,
    a._engine.rect = function(b, c, d, e, f, g) {
        var h = a._rectPath(c, d, e, f, g)
          , i = b.path(h)
          , j = i.attrs;
        i.X = j.x = c,
        i.Y = j.y = d,
        i.W = j.width = e,
        i.H = j.height = f,
        j.r = g,
        j.path = h,
        i.type = "rect";
        return i
    }
    ,
    a._engine.ellipse = function(a, b, c, d, e) {
        var f = a.path()
          , g = f.attrs;
        f.X = b - d,
        f.Y = c - e,
        f.W = d * 2,
        f.H = e * 2,
        f.type = "ellipse",
        B(f, {
            cx: b,
            cy: c,
            rx: d,
            ry: e
        });
        return f
    }
    ,
    a._engine.circle = function(a, b, c, d) {
        var e = a.path()
          , f = e.attrs;
        e.X = b - d,
        e.Y = c - d,
        e.W = e.H = d * 2,
        e.type = "circle",
        B(e, {
            cx: b,
            cy: c,
            r: d
        });
        return e
    }
    ,
    a._engine.image = function(b, c, d, e, f, g) {
        var h = a._rectPath(d, e, f, g)
          , i = b.path(h).attr({
            stroke: "none"
        })
          , k = i.attrs
          , l = i.node
          , m = l.getElementsByTagName(j)[0];
        k.src = c,
        i.X = k.x = d,
        i.Y = k.y = e,
        i.W = k.width = f,
        i.H = k.height = g,
        k.path = h,
        i.type = "image",
        m.parentNode == l && l.removeChild(m),
        m.rotate = !0,
        m.src = c,
        m.type = "tile",
        i._.fillpos = [d, e],
        i._.fillsize = [f, g],
        l.appendChild(m),
        z(i, 1, 1, 0, 0, 0);
        return i
    }
    ,
    a._engine.text = function(b, d, e, g) {
        var h = F("shape")
          , i = F("path")
          , j = F("textpath");
        d = d || 0,
        e = e || 0,
        g = g || "",
        i.v = a.format("m{0},{1}l{2},{1}", f(d * u), f(e * u), f(d * u) + 1),
        i.textpathok = !0,
        j.string = c(g),
        j.on = !0,
        h.style.cssText = t,
        h.coordsize = u + n + u,
        h.coordorigin = "0 0";
        var k = new D(h,b)
          , l = {
            fill: "#000",
            stroke: "none",
            font: a._availableAttrs.font,
            text: g
        };
        k.shape = h,
        k.path = i,
        k.textpath = j,
        k.type = "text",
        k.attrs.text = c(g),
        k.attrs.x = d,
        k.attrs.y = e,
        k.attrs.w = 1,
        k.attrs.h = 1,
        B(k, l),
        h.appendChild(j),
        h.appendChild(i),
        b.canvas.appendChild(h);
        var m = F("skew");
        m.on = !0,
        h.appendChild(m),
        k.skew = m,
        k.transform(o);
        return k
    }
    ,
    a._engine.setSize = function(b, c) {
        var d = this.canvas.style;
        this.width = b,
        this.height = c,
        b == +b && (b += "px"),
        c == +c && (c += "px"),
        d.width = b,
        d.height = c,
        d.clip = "rect(0 " + b + " " + c + " 0)",
        this._viewBox && a._engine.setViewBox.apply(this, this._viewBox);
        return this
    }
    ,
    a._engine.setViewBox = function(b, c, d, e, f) {
        a.eve("raphael.setViewBox", this, this._viewBox, [b, c, d, e, f]);
        var h = this.width, i = this.height, j = 1 / g(d / h, e / i), k, l;
        f && (k = i / e,
        l = h / d,
        d * k < h && (b -= (h - d * k) / 2 / k),
        e * l < i && (c -= (i - e * l) / 2 / l)),
        this._viewBox = [b, c, d, e, !!f],
        this._viewBoxShift = {
            dx: -b,
            dy: -c,
            scale: j
        },
        this.forEach(function(a) {
            a.transform("...")
        });
        return this
    }
    ;
    var F;
    a._engine.initWin = function(a) {
        var b = a.document;
        b.createStyleSheet().addRule(".rvml", "behavior:url(#default#VML)");
        try {
            !b.namespaces.rvml && b.namespaces.add("rvml", "urn:schemas-microsoft-com:vml"),
            F = function(a) {
                return b.createElement("<rvml:" + a + ' class="rvml">')
            }
        } catch (c) {
            F = function(a) {
                return b.createElement("<" + a + ' xmlns="urn:schemas-microsoft.com:vml" class="rvml">')
            }
        }
    }
    ,
    a._engine.initWin(a._g.win),
    a._engine.create = function() {
        var b = a._getContainer.apply(0, arguments), c = b.container, d = b.height, e, f = b.width, g = b.x, h = b.y;
        if (!c)
            throw new Error("VML container not found.");
        var i = new a._Paper
          , j = i.canvas = a._g.doc.createElement("div")
          , k = j.style;
        g = g || 0,
        h = h || 0,
        f = f || 512,
        d = d || 342,
        i.width = f,
        i.height = d,
        f == +f && (f += "px"),
        d == +d && (d += "px"),
        i.coordsize = u * 1e3 + n + u * 1e3,
        i.coordorigin = "0 0",
        i.span = a._g.doc.createElement("span"),
        i.span.style.cssText = "position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;",
        j.appendChild(i.span),
        k.cssText = a.format("top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden", f, d),
        c == 1 ? (a._g.doc.body.appendChild(j),
        k.left = g + "px",
        k.top = h + "px",
        k.position = "absolute") : c.firstChild ? c.insertBefore(j, c.firstChild) : c.appendChild(j),
        i.renderfix = function() {}
        ;
        return i
    }
    ,
    a.prototype.clear = function() {
        a.eve("raphael.clear", this),
        this.canvas.innerHTML = o,
        this.span = a._g.doc.createElement("span"),
        this.span.style.cssText = "position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;",
        this.canvas.appendChild(this.span),
        this.bottom = this.top = null
    }
    ,
    a.prototype.remove = function() {
        a.eve("raphael.remove", this),
        this.canvas.parentNode.removeChild(this.canvas);
        for (var b in this)
            this[b] = typeof this[b] == "function" ? a._removedFactory(b) : null;
        return !0
    }
    ;
    var G = a.st;
    for (var H in E)
        E[b](H) && !G[b](H) && (G[H] = function(a) {
            return function() {
                var b = arguments;
                return this.forEach(function(c) {
                    c[a].apply(c, b)
                })
            }
        }(H))
}(window.Raphael)

if (window.Raphael) {
    Raphael.shadow = function(K, J, L, F, Q) {
        Q = Q || {};
        var B = jQuery(Q.target), N = jQuery("<div/>", {
            "class": "aui-shadow"
        }), A = Q.shadow || Q.color || "#000", P = Q.size * 10 || 0, O = Q.offsetSize || 3, M = Q.zindex || 0, H = Q.radius || 0, G = "0.4", D = Q.blur || 3, C, I, E;
        L += P + 2 * D;
        F += P + 2 * D;
        if (Raphael.shadow.BOX_SHADOW_SUPPORT) {
            B.addClass("aui-box-shadow");
            return N.addClass("hidden")
        }
        if (K === 0 && J === 0 && B.length > 0) {
            E = B.offset();
            K = O - D + E.left;
            J = O - D + E.top
        }
        if (jQuery.browser.msie && jQuery.browser.version < "9") {
            A = "#f0f0f0";
            G = "0.2"
        }
        N.css({
            position: "absolute",
            left: K,
            top: J,
            width: L,
            height: F,
            zIndex: M
        });
        if (B.length > 0) {
            N.appendTo(document.body);
            C = Raphael(N[0], L, F, H)
        } else {
            C = Raphael(K, J, L, F, H)
        }
        C.canvas.style.position = "absolute";
        I = C.rect(D, D, L - 2 * D, F - 2 * D).attr({
            fill: A,
            stroke: A,
            blur: "" + D,
            opacity: G
        });
        return N
    }
    ;
    Raphael.shadow.BOX_SHADOW_SUPPORT = (function() {
        var C = document.documentElement.style;
        var A = ["boxShadow", "MozBoxShadow", "WebkitBoxShadow", "msBoxShadow"];
        for (var B = 0; B < A.length; B++) {
            if (A[B]in C) {
                return true
            }
        }
        return false
    }
    )()
}
;jQuery.os = {};
var jQueryOSplatform = navigator.platform.toLowerCase();
jQuery.os.windows = (jQueryOSplatform.indexOf("win") != -1);
jQuery.os.mac = (jQueryOSplatform.indexOf("mac") != -1);
jQuery.os.linux = (jQueryOSplatform.indexOf("linux") != -1);
/**
 * Atlassian custom download containing:
 * CORE - Core, Widget, Mouse
 * INTERACTIONS - Draggable, Sortable
 * Load jquery-ui-other for droppable and other resources.
 * This load profile will be updated to something more logical in a future version.
 */
/*!
 * jQuery UI 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
(function(c, j) {
    function k(a) {
        return !c(a).parents().andSelf().filter(function() {
            return c.curCSS(this, "visibility") === "hidden" || c.expr.filters.hidden(this)
        }).length
    }
    c.ui = c.ui || {};
    if (!c.ui.version) {
        c.extend(c.ui, {
            version: "1.8.11",
            keyCode: {
                ALT: 18,
                BACKSPACE: 8,
                CAPS_LOCK: 20,
                COMMA: 188,
                COMMAND: 91,
                COMMAND_LEFT: 91,
                COMMAND_RIGHT: 93,
                CONTROL: 17,
                DELETE: 46,
                DOWN: 40,
                END: 35,
                ENTER: 13,
                ESCAPE: 27,
                HOME: 36,
                INSERT: 45,
                LEFT: 37,
                MENU: 93,
                NUMPAD_ADD: 107,
                NUMPAD_DECIMAL: 110,
                NUMPAD_DIVIDE: 111,
                NUMPAD_ENTER: 108,
                NUMPAD_MULTIPLY: 106,
                NUMPAD_SUBTRACT: 109,
                PAGE_DOWN: 34,
                PAGE_UP: 33,
                PERIOD: 190,
                RIGHT: 39,
                SHIFT: 16,
                SPACE: 32,
                TAB: 9,
                UP: 38,
                WINDOWS: 91
            }
        });
        c.fn.extend({
            _focus: c.fn.focus,
            focus: function(a, b) {
                return typeof a === "number" ? this.each(function() {
                    var d = this;
                    setTimeout(function() {
                        c(d).focus();
                        b && b.call(d)
                    }, a)
                }) : this._focus.apply(this, arguments)
            },
            scrollParent: function() {
                var a;
                a = c.browser.msie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position")) ? this.parents().filter(function() {
                    return /(relative|absolute|fixed)/.test(c.curCSS(this, "position", 1)) && /(auto|scroll)/.test(c.curCSS(this, "overflow", 1) + c.curCSS(this, "overflow-y", 1) + c.curCSS(this, "overflow-x", 1))
                }).eq(0) : this.parents().filter(function() {
                    return /(auto|scroll)/.test(c.curCSS(this, "overflow", 1) + c.curCSS(this, "overflow-y", 1) + c.curCSS(this, "overflow-x", 1))
                }).eq(0);
                return /fixed/.test(this.css("position")) || !a.length ? c(document) : a
            },
            zIndex: function(a) {
                if (a !== j)
                    return this.css("zIndex", a);
                if (this.length) {
                    a = c(this[0]);
                    for (var b; a.length && a[0] !== document; ) {
                        b = a.css("position");
                        if (b === "absolute" || b === "relative" || b === "fixed") {
                            b = parseInt(a.css("zIndex"), 10);
                            if (!isNaN(b) && b !== 0)
                                return b
                        }
                        a = a.parent()
                    }
                }
                return 0
            },
            disableSelection: function() {
                return this.bind((c.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(a) {
                    a.preventDefault()
                })
            },
            enableSelection: function() {
                return this.unbind(".ui-disableSelection")
            }
        });
        c.each(["Width", "Height"], function(a, b) {
            function d(f, g, l, m) {
                c.each(e, function() {
                    g -= parseFloat(c.curCSS(f, "padding" + this, true)) || 0;
                    if (l)
                        g -= parseFloat(c.curCSS(f, "border" + this + "Width", true)) || 0;
                    if (m)
                        g -= parseFloat(c.curCSS(f, "margin" + this, true)) || 0
                });
                return g
            }
            var e = b === "Width" ? ["Left", "Right"] : ["Top", "Bottom"]
              , h = b.toLowerCase()
              , i = {
                innerWidth: c.fn.innerWidth,
                innerHeight: c.fn.innerHeight,
                outerWidth: c.fn.outerWidth,
                outerHeight: c.fn.outerHeight
            };
            c.fn["inner" + b] = function(f) {
                if (f === j)
                    return i["inner" + b].call(this);
                return this.each(function() {
                    c(this).css(h, d(this, f) + "px")
                })
            }
            ;
            c.fn["outer" + b] = function(f, g) {
                if (typeof f !== "number")
                    return i["outer" + b].call(this, f);
                return this.each(function() {
                    c(this).css(h, d(this, f, true, g) + "px")
                })
            }
        });
        c.extend(c.expr[":"], {
            data: function(a, b, d) {
                return !!c.data(a, d[3])
            },
            focusable: function(a) {
                var b = a.nodeName.toLowerCase()
                  , d = c.attr(a, "tabindex");
                if ("area" === b) {
                    b = a.parentNode;
                    d = b.name;
                    if (!a.href || !d || b.nodeName.toLowerCase() !== "map")
                        return false;
                    a = c("img[usemap=#" + d + "]")[0];
                    return !!a && k(a)
                }
                return (/input|select|textarea|button|object/.test(b) ? !a.disabled : "a" == b ? a.href || !isNaN(d) : !isNaN(d)) && k(a)
            },
            tabbable: function(a) {
                var b = c.attr(a, "tabindex");
                return (isNaN(b) || b >= 0) && c(a).is(":focusable")
            }
        });
        c(function() {
            var a = document.body
              , b = a.appendChild(b = document.createElement("div"));
            c.extend(b.style, {
                minHeight: "100px",
                height: "auto",
                padding: 0,
                borderWidth: 0
            });
            c.support.minHeight = b.offsetHeight === 100;
            c.support.selectstart = "onselectstart"in b;
            a.removeChild(b).style.display = "none"
        });
        c.extend(c.ui, {
            plugin: {
                add: function(a, b, d) {
                    a = c.ui[a].prototype;
                    for (var e in d) {
                        a.plugins[e] = a.plugins[e] || [];
                        a.plugins[e].push([b, d[e]])
                    }
                },
                call: function(a, b, d) {
                    if ((b = a.plugins[b]) && a.element[0].parentNode)
                        for (var e = 0; e < b.length; e++)
                            a.options[b[e][0]] && b[e][1].apply(a.element, d)
                }
            },
            contains: function(a, b) {
                return document.compareDocumentPosition ? a.compareDocumentPosition(b) & 16 : a !== b && a.contains(b)
            },
            hasScroll: function(a, b) {
                if (c(a).css("overflow") === "hidden")
                    return false;
                b = b && b === "left" ? "scrollLeft" : "scrollTop";
                var d = false;
                if (a[b] > 0)
                    return true;
                a[b] = 1;
                d = a[b] > 0;
                a[b] = 0;
                return d
            },
            isOverAxis: function(a, b, d) {
                return a > b && a < b + d
            },
            isOver: function(a, b, d, e, h, i) {
                return c.ui.isOverAxis(a, d, h) && c.ui.isOverAxis(b, e, i)
            }
        })
    }
}
)(jQuery);
;/*!
 * jQuery UI Widget 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Widget
 */
(function(b, j) {
    if (b.cleanData) {
        var k = b.cleanData;
        b.cleanData = function(a) {
            for (var c = 0, d; (d = a[c]) != null; c++)
                b(d).triggerHandler("remove");
            k(a)
        }
    } else {
        var l = b.fn.remove;
        b.fn.remove = function(a, c) {
            return this.each(function() {
                if (!c)
                    if (!a || b.filter(a, [this]).length)
                        b("*", this).add([this]).each(function() {
                            b(this).triggerHandler("remove")
                        });
                return l.call(b(this), a, c)
            })
        }
    }
    b.widget = function(a, c, d) {
        var e = a.split(".")[0], f;
        a = a.split(".")[1];
        f = e + "-" + a;
        if (!d) {
            d = c;
            c = b.Widget
        }
        b.expr[":"][f] = function(h) {
            return !!b.data(h, a)
        }
        ;
        b[e] = b[e] || {};
        b[e][a] = function(h, g) {
            arguments.length && this._createWidget(h, g)
        }
        ;
        c = new c;
        c.options = b.extend(true, {}, c.options);
        b[e][a].prototype = b.extend(true, c, {
            namespace: e,
            widgetName: a,
            widgetEventPrefix: b[e][a].prototype.widgetEventPrefix || a,
            widgetBaseClass: f
        }, d);
        b.widget.bridge(a, b[e][a])
    }
    ;
    b.widget.bridge = function(a, c) {
        b.fn[a] = function(d) {
            var e = typeof d === "string"
              , f = Array.prototype.slice.call(arguments, 1)
              , h = this;
            d = !e && f.length ? b.extend.apply(null, [true, d].concat(f)) : d;
            if (e && d.charAt(0) === "_")
                return h;
            e ? this.each(function() {
                var g = b.data(this, a)
                  , i = g && b.isFunction(g[d]) ? g[d].apply(g, f) : g;
                if (i !== g && i !== j) {
                    h = i;
                    return false
                }
            }) : this.each(function() {
                var g = b.data(this, a);
                g ? g.option(d || {})._init() : b.data(this, a, new c(d,this))
            });
            return h
        }
    }
    ;
    b.Widget = function(a, c) {
        arguments.length && this._createWidget(a, c)
    }
    ;
    b.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        options: {
            disabled: false
        },
        _createWidget: function(a, c) {
            b.data(c, this.widgetName, this);
            this.element = b(c);
            this.options = b.extend(true, {}, this.options, this._getCreateOptions(), a);
            var d = this;
            this.element.bind("remove." + this.widgetName, function() {
                d.destroy()
            });
            this._create();
            this._trigger("create");
            this._init()
        },
        _getCreateOptions: function() {
            return b.metadata && b.metadata.get(this.element[0])[this.widgetName]
        },
        _create: function() {},
        _init: function() {},
        destroy: function() {
            this.element.unbind("." + this.widgetName).removeData(this.widgetName);
            this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled ui-state-disabled")
        },
        widget: function() {
            return this.element
        },
        option: function(a, c) {
            var d = a;
            if (arguments.length === 0)
                return b.extend({}, this.options);
            if (typeof a === "string") {
                if (c === j)
                    return this.options[a];
                d = {};
                d[a] = c
            }
            this._setOptions(d);
            return this
        },
        _setOptions: function(a) {
            var c = this;
            b.each(a, function(d, e) {
                c._setOption(d, e)
            });
            return this
        },
        _setOption: function(a, c) {
            this.options[a] = c;
            if (a === "disabled")
                this.widget()[c ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled ui-state-disabled").attr("aria-disabled", c);
            return this
        },
        enable: function() {
            return this._setOption("disabled", false)
        },
        disable: function() {
            return this._setOption("disabled", true)
        },
        _trigger: function(a, c, d) {
            var e = this.options[a];
            c = b.Event(c);
            c.type = (a === this.widgetEventPrefix ? a : this.widgetEventPrefix + a).toLowerCase();
            d = d || {};
            if (c.originalEvent) {
                a = b.event.props.length;
                for (var f; a; ) {
                    f = b.event.props[--a];
                    c[f] = c.originalEvent[f]
                }
            }
            this.element.trigger(c, d);
            return !(b.isFunction(e) && e.call(this.element[0], c, d) === false || c.isDefaultPrevented())
        }
    }
}
)(jQuery);
;/*!
 * jQuery UI Mouse 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 */
(function(b) {
    b.widget("ui.mouse", {
        options: {
            cancel: ":input,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var a = this;
            this.element.bind("mousedown." + this.widgetName, function(c) {
                return a._mouseDown(c)
            }).bind("click." + this.widgetName, function(c) {
                if (true === b.data(c.target, a.widgetName + ".preventClickEvent")) {
                    b.removeData(c.target, a.widgetName + ".preventClickEvent");
                    c.stopImmediatePropagation();
                    return false
                }
            });
            this.started = false
        },
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName)
        },
        _mouseDown: function(a) {
            a.originalEvent = a.originalEvent || {};
            if (!a.originalEvent.mouseHandled) {
                this._mouseStarted && this._mouseUp(a);
                this._mouseDownEvent = a;
                var c = this
                  , e = a.which == 1
                  , f = typeof this.options.cancel == "string" ? b(a.target).parents().add(a.target).filter(this.options.cancel).length : false;
                if (!e || f || !this._mouseCapture(a))
                    return true;
                this.mouseDelayMet = !this.options.delay;
                if (!this.mouseDelayMet)
                    this._mouseDelayTimer = setTimeout(function() {
                        c.mouseDelayMet = true
                    }, this.options.delay);
                if (this._mouseDistanceMet(a) && this._mouseDelayMet(a)) {
                    this._mouseStarted = this._mouseStart(a) !== false;
                    if (!this._mouseStarted) {
                        a.preventDefault();
                        return true
                    }
                }
                true === b.data(a.target, this.widgetName + ".preventClickEvent") && b.removeData(a.target, this.widgetName + ".preventClickEvent");
                this._mouseMoveDelegate = function(d) {
                    return c._mouseMove(d)
                }
                ;
                this._mouseUpDelegate = function(d) {
                    return c._mouseUp(d)
                }
                ;
                b(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
                a.preventDefault();
                return a.originalEvent.mouseHandled = true
            }
        },
        _mouseMove: function(a) {
            if (b.browser.msie && !(document.documentMode >= 9) && !a.button)
                return this._mouseUp(a);
            if (this._mouseStarted) {
                this._mouseDrag(a);
                return a.preventDefault()
            }
            if (this._mouseDistanceMet(a) && this._mouseDelayMet(a))
                (this._mouseStarted = this._mouseStart(this._mouseDownEvent, a) !== false) ? this._mouseDrag(a) : this._mouseUp(a);
            return !this._mouseStarted
        },
        _mouseUp: function(a) {
            b(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                a.target == this._mouseDownEvent.target && b.data(a.target, this.widgetName + ".preventClickEvent", true);
                this._mouseStop(a)
            }
            return false
        },
        _mouseDistanceMet: function(a) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - a.pageX), Math.abs(this._mouseDownEvent.pageY - a.pageY)) >= this.options.distance
        },
        _mouseDelayMet: function() {
            return this.mouseDelayMet
        },
        _mouseStart: function() {},
        _mouseDrag: function() {},
        _mouseStop: function() {},
        _mouseCapture: function() {
            return true
        }
    })
}
)(jQuery);
;/*
 * jQuery UI Draggable 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Draggables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function(d) {
    d.widget("ui.draggable", d.ui.mouse, {
        widgetEventPrefix: "drag",
        options: {
            addClasses: true,
            appendTo: "parent",
            axis: false,
            connectToSortable: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            grid: false,
            handle: false,
            helper: "original",
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: "default",
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: "both",
            snapTolerance: 20,
            stack: false,
            zIndex: false
        },
        _create: function() {
            if (this.options.helper == "original" && !/^(?:r|a|f)/.test(this.element.css("position")))
                this.element[0].style.position = "relative";
            this.options.addClasses && this.element.addClass("ui-draggable");
            this.options.disabled && this.element.addClass("ui-draggable-disabled");
            this._mouseInit()
        },
        destroy: function() {
            if (this.element.data("draggable")) {
                this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
                this._mouseDestroy();
                return this
            }
        },
        _mouseCapture: function(a) {
            var b = this.options;
            if (this.helper || b.disabled || d(a.target).is(".ui-resizable-handle"))
                return false;
            this.handle = this._getHandle(a);
            if (!this.handle)
                return false;
            return true
        },
        _mouseStart: function(a) {
            var b = this.options;
            this.helper = this._createHelper(a);
            this._cacheHelperProportions();
            if (d.ui.ddmanager)
                d.ui.ddmanager.current = this;
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.positionAbs = this.element.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            d.extend(this.offset, {
                click: {
                    left: a.pageX - this.offset.left,
                    top: a.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this.position = this._generatePosition(a);
            this.originalPageX = a.pageX;
            this.originalPageY = a.pageY;
            b.cursorAt && this._adjustOffsetFromHelper(b.cursorAt);
            b.containment && this._setContainment();
            if (this._trigger("start", a) === false) {
                this._clear();
                return false
            }
            this._cacheHelperProportions();
            d.ui.ddmanager && !b.dropBehaviour && d.ui.ddmanager.prepareOffsets(this, a);
            this.helper.addClass("ui-draggable-dragging");
            this._mouseDrag(a, true);
            return true
        },
        _mouseDrag: function(a, b) {
            this.position = this._generatePosition(a);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!b) {
                b = this._uiHash();
                if (this._trigger("drag", a, b) === false) {
                    this._mouseUp({});
                    return false
                }
                this.position = b.position
            }
            if (!this.options.axis || this.options.axis != "y")
                this.helper[0].style.left = this.position.left + "px";
            if (!this.options.axis || this.options.axis != "x")
                this.helper[0].style.top = this.position.top + "px";
            d.ui.ddmanager && d.ui.ddmanager.drag(this, a);
            return false
        },
        _mouseStop: function(a) {
            var b = false;
            if (d.ui.ddmanager && !this.options.dropBehaviour)
                b = d.ui.ddmanager.drop(this, a);
            if (this.dropped) {
                b = this.dropped;
                this.dropped = false
            }
            if ((!this.element[0] || !this.element[0].parentNode) && this.options.helper == "original")
                return false;
            if (this.options.revert == "invalid" && !b || this.options.revert == "valid" && b || this.options.revert === true || d.isFunction(this.options.revert) && this.options.revert.call(this.element, b)) {
                var c = this;
                d(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                    c._trigger("stop", a) !== false && c._clear()
                })
            } else
                this._trigger("stop", a) !== false && this._clear();
            return false
        },
        cancel: function() {
            this.helper.is(".ui-draggable-dragging") ? this._mouseUp({}) : this._clear();
            return this
        },
        _getHandle: function(a) {
            var b = !this.options.handle || !d(this.options.handle, this.element).length ? true : false;
            d(this.options.handle, this.element).find("*").andSelf().each(function() {
                if (this == a.target)
                    b = true
            });
            return b
        },
        _createHelper: function(a) {
            var b = this.options;
            a = d.isFunction(b.helper) ? d(b.helper.apply(this.element[0], [a])) : b.helper == "clone" ? this.element.clone() : this.element;
            a.parents("body").length || a.appendTo(b.appendTo == "parent" ? this.element[0].parentNode : b.appendTo);
            a[0] != this.element[0] && !/(fixed|absolute)/.test(a.css("position")) && a.css("position", "absolute");
            return a
        },
        _adjustOffsetFromHelper: function(a) {
            if (typeof a == "string")
                a = a.split(" ");
            if (d.isArray(a))
                a = {
                    left: +a[0],
                    top: +a[1] || 0
                };
            if ("left"in a)
                this.offset.click.left = a.left + this.margins.left;
            if ("right"in a)
                this.offset.click.left = this.helperProportions.width - a.right + this.margins.left;
            if ("top"in a)
                this.offset.click.top = a.top + this.margins.top;
            if ("bottom"in a)
                this.offset.click.top = this.helperProportions.height - a.bottom + this.margins.top
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var a = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && d.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                a.left += this.scrollParent.scrollLeft();
                a.top += this.scrollParent.scrollTop()
            }
            if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && d.browser.msie)
                a = {
                    top: 0,
                    left: 0
                };
            return {
                top: a.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: a.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function() {
            if (this.cssPosition == "relative") {
                var a = this.element.position();
                return {
                    top: a.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: a.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else
                return {
                    top: 0,
                    left: 0
                }
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.element.css("marginLeft"), 10) || 0,
                top: parseInt(this.element.css("marginTop"), 10) || 0,
                right: parseInt(this.element.css("marginRight"), 10) || 0,
                bottom: parseInt(this.element.css("marginBottom"), 10) || 0
            }
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function() {
            var a = this.options;
            if (a.containment == "parent")
                a.containment = this.helper[0].parentNode;
            if (a.containment == "document" || a.containment == "window")
                this.containment = [(a.containment == "document" ? 0 : d(window).scrollLeft()) - this.offset.relative.left - this.offset.parent.left, (a.containment == "document" ? 0 : d(window).scrollTop()) - this.offset.relative.top - this.offset.parent.top, (a.containment == "document" ? 0 : d(window).scrollLeft()) + d(a.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (a.containment == "document" ? 0 : d(window).scrollTop()) + (d(a.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
            if (!/^(document|window|parent)$/.test(a.containment) && a.containment.constructor != Array) {
                var b = d(a.containment)[0];
                if (b) {
                    a = d(a.containment).offset();
                    var c = d(b).css("overflow") != "hidden";
                    this.containment = [a.left + (parseInt(d(b).css("borderLeftWidth"), 10) || 0) + (parseInt(d(b).css("paddingLeft"), 10) || 0), a.top + (parseInt(d(b).css("borderTopWidth"), 10) || 0) + (parseInt(d(b).css("paddingTop"), 10) || 0), a.left + (c ? Math.max(b.scrollWidth, b.offsetWidth) : b.offsetWidth) - (parseInt(d(b).css("borderLeftWidth"), 10) || 0) - (parseInt(d(b).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, a.top + (c ? Math.max(b.scrollHeight, b.offsetHeight) : b.offsetHeight) - (parseInt(d(b).css("borderTopWidth"), 10) || 0) - (parseInt(d(b).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom]
                }
            } else if (a.containment.constructor == Array)
                this.containment = a.containment
        },
        _convertPositionTo: function(a, b) {
            if (!b)
                b = this.position;
            a = a == "absolute" ? 1 : -1;
            var c = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && d.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
              , f = /(html|body)/i.test(c[0].tagName);
            return {
                top: b.top + this.offset.relative.top * a + this.offset.parent.top * a - (d.browser.safari && d.browser.version < 526 && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : f ? 0 : c.scrollTop()) * a),
                left: b.left + this.offset.relative.left * a + this.offset.parent.left * a - (d.browser.safari && d.browser.version < 526 && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : f ? 0 : c.scrollLeft()) * a)
            }
        },
        _generatePosition: function(a) {
            var b = this.options
              , c = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && d.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
              , f = /(html|body)/i.test(c[0].tagName)
              , e = a.pageX
              , g = a.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (a.pageX - this.offset.click.left < this.containment[0])
                        e = this.containment[0] + this.offset.click.left;
                    if (a.pageY - this.offset.click.top < this.containment[1])
                        g = this.containment[1] + this.offset.click.top;
                    if (a.pageX - this.offset.click.left > this.containment[2])
                        e = this.containment[2] + this.offset.click.left;
                    if (a.pageY - this.offset.click.top > this.containment[3])
                        g = this.containment[3] + this.offset.click.top
                }
                if (b.grid) {
                    g = this.originalPageY + Math.round((g - this.originalPageY) / b.grid[1]) * b.grid[1];
                    g = this.containment ? !(g - this.offset.click.top < this.containment[1] || g - this.offset.click.top > this.containment[3]) ? g : !(g - this.offset.click.top < this.containment[1]) ? g - b.grid[1] : g + b.grid[1] : g;
                    e = this.originalPageX + Math.round((e - this.originalPageX) / b.grid[0]) * b.grid[0];
                    e = this.containment ? !(e - this.offset.click.left < this.containment[0] || e - this.offset.click.left > this.containment[2]) ? e : !(e - this.offset.click.left < this.containment[0]) ? e - b.grid[0] : e + b.grid[0] : e
                }
            }
            return {
                top: g - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (d.browser.safari && d.browser.version < 526 && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : f ? 0 : c.scrollTop()),
                left: e - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (d.browser.safari && d.browser.version < 526 && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : f ? 0 : c.scrollLeft())
            }
        },
        _clear: function() {
            this.helper.removeClass("ui-draggable-dragging");
            this.helper[0] != this.element[0] && !this.cancelHelperRemoval && this.helper.remove();
            this.helper = null;
            this.cancelHelperRemoval = false
        },
        _trigger: function(a, b, c) {
            c = c || this._uiHash();
            d.ui.plugin.call(this, a, [b, c]);
            if (a == "drag")
                this.positionAbs = this._convertPositionTo("absolute");
            return d.Widget.prototype._trigger.call(this, a, b, c)
        },
        plugins: {},
        _uiHash: function() {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            }
        }
    });
    d.extend(d.ui.draggable, {
        version: "1.8.11"
    });
    d.ui.plugin.add("draggable", "connectToSortable", {
        start: function(a, b) {
            var c = d(this).data("draggable")
              , f = c.options
              , e = d.extend({}, b, {
                item: c.element
            });
            c.sortables = [];
            d(f.connectToSortable).each(function() {
                var g = d.data(this, "sortable");
                if (g && !g.options.disabled) {
                    c.sortables.push({
                        instance: g,
                        shouldRevert: g.options.revert
                    });
                    g.refreshPositions();
                    g._trigger("activate", a, e)
                }
            })
        },
        stop: function(a, b) {
            var c = d(this).data("draggable")
              , f = d.extend({}, b, {
                item: c.element
            });
            d.each(c.sortables, function() {
                if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    c.cancelHelperRemoval = true;
                    this.instance.cancelHelperRemoval = false;
                    if (this.shouldRevert)
                        this.instance.options.revert = true;
                    this.instance._mouseStop(a);
                    this.instance.options.helper = this.instance.options._helper;
                    c.options.helper == "original" && this.instance.currentItem.css({
                        top: "auto",
                        left: "auto"
                    })
                } else {
                    this.instance.cancelHelperRemoval = false;
                    this.instance._trigger("deactivate", a, f)
                }
            })
        },
        drag: function(a, b) {
            var c = d(this).data("draggable")
              , f = this;
            d.each(c.sortables, function() {
                this.instance.positionAbs = c.positionAbs;
                this.instance.helperProportions = c.helperProportions;
                this.instance.offset.click = c.offset.click;
                if (this.instance._intersectsWith(this.instance.containerCache)) {
                    if (!this.instance.isOver) {
                        this.instance.isOver = 1;
                        this.instance.currentItem = d(f).clone().appendTo(this.instance.element).data("sortable-item", true);
                        this.instance.options._helper = this.instance.options.helper;
                        this.instance.options.helper = function() {
                            return b.helper[0]
                        }
                        ;
                        a.target = this.instance.currentItem[0];
                        this.instance._mouseCapture(a, true);
                        this.instance._mouseStart(a, true, true);
                        this.instance.offset.click.top = c.offset.click.top;
                        this.instance.offset.click.left = c.offset.click.left;
                        this.instance.offset.parent.left -= c.offset.parent.left - this.instance.offset.parent.left;
                        this.instance.offset.parent.top -= c.offset.parent.top - this.instance.offset.parent.top;
                        c._trigger("toSortable", a);
                        c.dropped = this.instance.element;
                        c.currentItem = c.element;
                        this.instance.fromOutside = c
                    }
                    this.instance.currentItem && this.instance._mouseDrag(a)
                } else if (this.instance.isOver) {
                    this.instance.isOver = 0;
                    this.instance.cancelHelperRemoval = true;
                    this.instance.options.revert = false;
                    this.instance._trigger("out", a, this.instance._uiHash(this.instance));
                    this.instance._mouseStop(a, true);
                    this.instance.options.helper = this.instance.options._helper;
                    this.instance.currentItem.remove();
                    this.instance.placeholder && this.instance.placeholder.remove();
                    c._trigger("fromSortable", a);
                    c.dropped = false
                }
            })
        }
    });
    d.ui.plugin.add("draggable", "cursor", {
        start: function() {
            var a = d("body")
              , b = d(this).data("draggable").options;
            if (a.css("cursor"))
                b._cursor = a.css("cursor");
            a.css("cursor", b.cursor)
        },
        stop: function() {
            var a = d(this).data("draggable").options;
            a._cursor && d("body").css("cursor", a._cursor)
        }
    });
    d.ui.plugin.add("draggable", "iframeFix", {
        start: function() {
            var a = d(this).data("draggable").options;
            d(a.iframeFix === true ? "iframe" : a.iframeFix).each(function() {
                d('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({
                    width: this.offsetWidth + "px",
                    height: this.offsetHeight + "px",
                    position: "absolute",
                    opacity: "0.001",
                    zIndex: 1E3
                }).css(d(this).offset()).appendTo("body")
            })
        },
        stop: function() {
            d("div.ui-draggable-iframeFix").each(function() {
                this.parentNode.removeChild(this)
            })
        }
    });
    d.ui.plugin.add("draggable", "opacity", {
        start: function(a, b) {
            a = d(b.helper);
            b = d(this).data("draggable").options;
            if (a.css("opacity"))
                b._opacity = a.css("opacity");
            a.css("opacity", b.opacity)
        },
        stop: function(a, b) {
            a = d(this).data("draggable").options;
            a._opacity && d(b.helper).css("opacity", a._opacity)
        }
    });
    d.ui.plugin.add("draggable", "scroll", {
        start: function() {
            var a = d(this).data("draggable");
            if (a.scrollParent[0] != document && a.scrollParent[0].tagName != "HTML")
                a.overflowOffset = a.scrollParent.offset()
        },
        drag: function(a) {
            var b = d(this).data("draggable")
              , c = b.options
              , f = false;
            if (b.scrollParent[0] != document && b.scrollParent[0].tagName != "HTML") {
                if (!c.axis || c.axis != "x")
                    if (b.overflowOffset.top + b.scrollParent[0].offsetHeight - a.pageY < c.scrollSensitivity)
                        b.scrollParent[0].scrollTop = f = b.scrollParent[0].scrollTop + c.scrollSpeed;
                    else if (a.pageY - b.overflowOffset.top < c.scrollSensitivity)
                        b.scrollParent[0].scrollTop = f = b.scrollParent[0].scrollTop - c.scrollSpeed;
                if (!c.axis || c.axis != "y")
                    if (b.overflowOffset.left + b.scrollParent[0].offsetWidth - a.pageX < c.scrollSensitivity)
                        b.scrollParent[0].scrollLeft = f = b.scrollParent[0].scrollLeft + c.scrollSpeed;
                    else if (a.pageX - b.overflowOffset.left < c.scrollSensitivity)
                        b.scrollParent[0].scrollLeft = f = b.scrollParent[0].scrollLeft - c.scrollSpeed
            } else {
                if (!c.axis || c.axis != "x")
                    if (a.pageY - d(document).scrollTop() < c.scrollSensitivity)
                        f = d(document).scrollTop(d(document).scrollTop() - c.scrollSpeed);
                    else if (d(window).height() - (a.pageY - d(document).scrollTop()) < c.scrollSensitivity)
                        f = d(document).scrollTop(d(document).scrollTop() + c.scrollSpeed);
                if (!c.axis || c.axis != "y")
                    if (a.pageX - d(document).scrollLeft() < c.scrollSensitivity)
                        f = d(document).scrollLeft(d(document).scrollLeft() - c.scrollSpeed);
                    else if (d(window).width() - (a.pageX - d(document).scrollLeft()) < c.scrollSensitivity)
                        f = d(document).scrollLeft(d(document).scrollLeft() + c.scrollSpeed)
            }
            f !== false && d.ui.ddmanager && !c.dropBehaviour && d.ui.ddmanager.prepareOffsets(b, a)
        }
    });
    d.ui.plugin.add("draggable", "snap", {
        start: function() {
            var a = d(this).data("draggable")
              , b = a.options;
            a.snapElements = [];
            d(b.snap.constructor != String ? b.snap.items || ":data(draggable)" : b.snap).each(function() {
                var c = d(this)
                  , f = c.offset();
                this != a.element[0] && a.snapElements.push({
                    item: this,
                    width: c.outerWidth(),
                    height: c.outerHeight(),
                    top: f.top,
                    left: f.left
                })
            })
        },
        drag: function(a, b) {
            for (var c = d(this).data("draggable"), f = c.options, e = f.snapTolerance, g = b.offset.left, n = g + c.helperProportions.width, m = b.offset.top, o = m + c.helperProportions.height, h = c.snapElements.length - 1; h >= 0; h--) {
                var i = c.snapElements[h].left
                  , k = i + c.snapElements[h].width
                  , j = c.snapElements[h].top
                  , l = j + c.snapElements[h].height;
                if (i - e < g && g < k + e && j - e < m && m < l + e || i - e < g && g < k + e && j - e < o && o < l + e || i - e < n && n < k + e && j - e < m && m < l + e || i - e < n && n < k + e && j - e < o && o < l + e) {
                    if (f.snapMode != "inner") {
                        var p = Math.abs(j - o) <= e
                          , q = Math.abs(l - m) <= e
                          , r = Math.abs(i - n) <= e
                          , s = Math.abs(k - g) <= e;
                        if (p)
                            b.position.top = c._convertPositionTo("relative", {
                                top: j - c.helperProportions.height,
                                left: 0
                            }).top - c.margins.top;
                        if (q)
                            b.position.top = c._convertPositionTo("relative", {
                                top: l,
                                left: 0
                            }).top - c.margins.top;
                        if (r)
                            b.position.left = c._convertPositionTo("relative", {
                                top: 0,
                                left: i - c.helperProportions.width
                            }).left - c.margins.left;
                        if (s)
                            b.position.left = c._convertPositionTo("relative", {
                                top: 0,
                                left: k
                            }).left - c.margins.left
                    }
                    var t = p || q || r || s;
                    if (f.snapMode != "outer") {
                        p = Math.abs(j - m) <= e;
                        q = Math.abs(l - o) <= e;
                        r = Math.abs(i - g) <= e;
                        s = Math.abs(k - n) <= e;
                        if (p)
                            b.position.top = c._convertPositionTo("relative", {
                                top: j,
                                left: 0
                            }).top - c.margins.top;
                        if (q)
                            b.position.top = c._convertPositionTo("relative", {
                                top: l - c.helperProportions.height,
                                left: 0
                            }).top - c.margins.top;
                        if (r)
                            b.position.left = c._convertPositionTo("relative", {
                                top: 0,
                                left: i
                            }).left - c.margins.left;
                        if (s)
                            b.position.left = c._convertPositionTo("relative", {
                                top: 0,
                                left: k - c.helperProportions.width
                            }).left - c.margins.left
                    }
                    if (!c.snapElements[h].snapping && (p || q || r || s || t))
                        c.options.snap.snap && c.options.snap.snap.call(c.element, a, d.extend(c._uiHash(), {
                            snapItem: c.snapElements[h].item
                        }));
                    c.snapElements[h].snapping = p || q || r || s || t
                } else {
                    c.snapElements[h].snapping && c.options.snap.release && c.options.snap.release.call(c.element, a, d.extend(c._uiHash(), {
                        snapItem: c.snapElements[h].item
                    }));
                    c.snapElements[h].snapping = false
                }
            }
        }
    });
    d.ui.plugin.add("draggable", "stack", {
        start: function() {
            var a = d(this).data("draggable").options;
            a = d.makeArray(d(a.stack)).sort(function(c, f) {
                return (parseInt(d(c).css("zIndex"), 10) || 0) - (parseInt(d(f).css("zIndex"), 10) || 0)
            });
            if (a.length) {
                var b = parseInt(a[0].style.zIndex) || 0;
                d(a).each(function(c) {
                    this.style.zIndex = b + c
                });
                this[0].style.zIndex = b + a.length
            }
        }
    });
    d.ui.plugin.add("draggable", "zIndex", {
        start: function(a, b) {
            a = d(b.helper);
            b = d(this).data("draggable").options;
            if (a.css("zIndex"))
                b._zIndex = a.css("zIndex");
            a.css("zIndex", b.zIndex)
        },
        stop: function(a, b) {
            a = d(this).data("draggable").options;
            a._zIndex && d(b.helper).css("zIndex", a._zIndex)
        }
    })
}
)(jQuery);
;/*
 * jQuery UI Sortable 1.8.11
 *
 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Sortables
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.widget.js
 */
(function(d) {
    d.widget("ui.sortable", d.ui.mouse, {
        widgetEventPrefix: "sort",
        options: {
            appendTo: "parent",
            axis: false,
            connectWith: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: "original",
            items: "> *",
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1E3
        },
        _create: function() {
            this.containerCache = {};
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating = this.items.length ? /left|right/.test(this.items[0].item.css("float")) || /inline|table-cell/.test(this.items[0].item.css("display")) : false;
            this.offset = this.element.offset();
            this._mouseInit()
        },
        destroy: function() {
            this.element.removeClass("ui-sortable ui-sortable-disabled").removeData("sortable").unbind(".sortable");
            this._mouseDestroy();
            for (var a = this.items.length - 1; a >= 0; a--)
                this.items[a].item.removeData("sortable-item");
            return this
        },
        _setOption: function(a, b) {
            if (a === "disabled") {
                this.options[a] = b;
                this.widget()[b ? "addClass" : "removeClass"]("ui-sortable-disabled")
            } else
                d.Widget.prototype._setOption.apply(this, arguments)
        },
        _mouseCapture: function(a, b) {
            if (this.reverting)
                return false;
            if (this.options.disabled || this.options.type == "static")
                return false;
            this._refreshItems(a);
            var c = null
              , e = this;
            d(a.target).parents().each(function() {
                if (d.data(this, "sortable-item") == e) {
                    c = d(this);
                    return false
                }
            });
            if (d.data(a.target, "sortable-item") == e)
                c = d(a.target);
            if (!c)
                return false;
            if (this.options.handle && !b) {
                var f = false;
                d(this.options.handle, c).find("*").andSelf().each(function() {
                    if (this == a.target)
                        f = true
                });
                if (!f)
                    return false
            }
            this.currentItem = c;
            this._removeCurrentsFromItems();
            return true
        },
        _mouseStart: function(a, b, c) {
            b = this.options;
            var e = this;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(a);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            d.extend(this.offset, {
                click: {
                    left: a.pageX - this.offset.left,
                    top: a.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.originalPosition = this._generatePosition(a);
            this.originalPageX = a.pageX;
            this.originalPageY = a.pageY;
            b.cursorAt && this._adjustOffsetFromHelper(b.cursorAt);
            this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            };
            this.helper[0] != this.currentItem[0] && this.currentItem.hide();
            this._createPlaceholder();
            b.containment && this._setContainment();
            if (b.cursor) {
                if (d("body").css("cursor"))
                    this._storedCursor = d("body").css("cursor");
                d("body").css("cursor", b.cursor)
            }
            if (b.opacity) {
                if (this.helper.css("opacity"))
                    this._storedOpacity = this.helper.css("opacity");
                this.helper.css("opacity", b.opacity)
            }
            if (b.zIndex) {
                if (this.helper.css("zIndex"))
                    this._storedZIndex = this.helper.css("zIndex");
                this.helper.css("zIndex", b.zIndex)
            }
            if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML")
                this.overflowOffset = this.scrollParent.offset();
            this._trigger("start", a, this._uiHash());
            this._preserveHelperProportions || this._cacheHelperProportions();
            if (!c)
                for (c = this.containers.length - 1; c >= 0; c--)
                    this.containers[c]._trigger("activate", a, e._uiHash(this));
            if (d.ui.ddmanager)
                d.ui.ddmanager.current = this;
            d.ui.ddmanager && !b.dropBehaviour && d.ui.ddmanager.prepareOffsets(this, a);
            this.dragging = true;
            this.helper.addClass("ui-sortable-helper");
            this._mouseDrag(a);
            return true
        },
        _mouseDrag: function(a) {
            this.position = this._generatePosition(a);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs)
                this.lastPositionAbs = this.positionAbs;
            if (this.options.scroll) {
                var b = this.options
                  , c = false;
                if (this.scrollParent[0] != document && this.scrollParent[0].tagName != "HTML") {
                    if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - a.pageY < b.scrollSensitivity)
                        this.scrollParent[0].scrollTop = c = this.scrollParent[0].scrollTop + b.scrollSpeed;
                    else if (a.pageY - this.overflowOffset.top < b.scrollSensitivity)
                        this.scrollParent[0].scrollTop = c = this.scrollParent[0].scrollTop - b.scrollSpeed;
                    if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - a.pageX < b.scrollSensitivity)
                        this.scrollParent[0].scrollLeft = c = this.scrollParent[0].scrollLeft + b.scrollSpeed;
                    else if (a.pageX - this.overflowOffset.left < b.scrollSensitivity)
                        this.scrollParent[0].scrollLeft = c = this.scrollParent[0].scrollLeft - b.scrollSpeed
                } else {
                    if (a.pageY - d(document).scrollTop() < b.scrollSensitivity)
                        c = d(document).scrollTop(d(document).scrollTop() - b.scrollSpeed);
                    else if (d(window).height() - (a.pageY - d(document).scrollTop()) < b.scrollSensitivity)
                        c = d(document).scrollTop(d(document).scrollTop() + b.scrollSpeed);
                    if (a.pageX - d(document).scrollLeft() < b.scrollSensitivity)
                        c = d(document).scrollLeft(d(document).scrollLeft() - b.scrollSpeed);
                    else if (d(window).width() - (a.pageX - d(document).scrollLeft()) < b.scrollSensitivity)
                        c = d(document).scrollLeft(d(document).scrollLeft() + b.scrollSpeed)
                }
                c !== false && d.ui.ddmanager && !b.dropBehaviour && d.ui.ddmanager.prepareOffsets(this, a)
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || this.options.axis != "y")
                this.helper[0].style.left = this.position.left + "px";
            if (!this.options.axis || this.options.axis != "x")
                this.helper[0].style.top = this.position.top + "px";
            for (b = this.items.length - 1; b >= 0; b--) {
                c = this.items[b];
                var e = c.item[0]
                  , f = this._intersectsWithPointer(c);
                if (f)
                    if (e != this.currentItem[0] && this.placeholder[f == 1 ? "next" : "prev"]()[0] != e && !d.ui.contains(this.placeholder[0], e) && (this.options.type == "semi-dynamic" ? !d.ui.contains(this.element[0], e) : true)) {
                        this.direction = f == 1 ? "down" : "up";
                        if (this.options.tolerance == "pointer" || this._intersectsWithSides(c))
                            this._rearrange(a, c);
                        else
                            break;
                        this._trigger("change", a, this._uiHash());
                        break
                    }
            }
            this._contactContainers(a);
            d.ui.ddmanager && d.ui.ddmanager.drag(this, a);
            this._trigger("sort", a, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false
        },
        _mouseStop: function(a, b) {
            if (a) {
                d.ui.ddmanager && !this.options.dropBehaviour && d.ui.ddmanager.drop(this, a);
                if (this.options.revert) {
                    var c = this;
                    b = c.placeholder.offset();
                    c.reverting = true;
                    d(this.helper).animate({
                        left: b.left - this.offset.parent.left - c.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
                        top: b.top - this.offset.parent.top - c.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
                    }, parseInt(this.options.revert, 10) || 500, function() {
                        c._clear(a)
                    })
                } else
                    this._clear(a, b);
                return false
            }
        },
        cancel: function() {
            var a = this;
            if (this.dragging) {
                this._mouseUp({
                    target: null
                });
                this.options.helper == "original" ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();
                for (var b = this.containers.length - 1; b >= 0; b--) {
                    this.containers[b]._trigger("deactivate", null, a._uiHash(this));
                    if (this.containers[b].containerCache.over) {
                        this.containers[b]._trigger("out", null, a._uiHash(this));
                        this.containers[b].containerCache.over = 0
                    }
                }
            }
            if (this.placeholder) {
                this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                this.options.helper != "original" && this.helper && this.helper[0].parentNode && this.helper.remove();
                d.extend(this, {
                    helper: null,
                    dragging: false,
                    reverting: false,
                    _noFinalSort: null
                });
                this.domPosition.prev ? d(this.domPosition.prev).after(this.currentItem) : d(this.domPosition.parent).prepend(this.currentItem)
            }
            return this
        },
        serialize: function(a) {
            var b = this._getItemsAsjQuery(a && a.connected)
              , c = [];
            a = a || {};
            d(b).each(function() {
                var e = (d(a.item || this).attr(a.attribute || "id") || "").match(a.expression || /(.+)[-=_](.+)/);
                if (e)
                    c.push((a.key || e[1] + "[]") + "=" + (a.key && a.expression ? e[1] : e[2]))
            });
            !c.length && a.key && c.push(a.key + "=");
            return c.join("&")
        },
        toArray: function(a) {
            var b = this._getItemsAsjQuery(a && a.connected)
              , c = [];
            a = a || {};
            b.each(function() {
                c.push(d(a.item || this).attr(a.attribute || "id") || "")
            });
            return c
        },
        _intersectsWith: function(a) {
            var b = this.positionAbs.left
              , c = b + this.helperProportions.width
              , e = this.positionAbs.top
              , f = e + this.helperProportions.height
              , g = a.left
              , h = g + a.width
              , i = a.top
              , k = i + a.height
              , j = this.offset.click.top
              , l = this.offset.click.left;
            j = e + j > i && e + j < k && b + l > g && b + l < h;
            return this.options.tolerance == "pointer" || this.options.forcePointerForContainers || this.options.tolerance != "pointer" && this.helperProportions[this.floating ? "width" : "height"] > a[this.floating ? "width" : "height"] ? j : g < b + this.helperProportions.width / 2 && c - this.helperProportions.width / 2 < h && i < e + this.helperProportions.height / 2 && f - this.helperProportions.height / 2 < k
        },
        _intersectsWithPointer: function(a) {
            var b = d.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, a.top, a.height);
            a = d.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, a.left, a.width);
            b = b && a;
            a = this._getDragVerticalDirection();
            var c = this._getDragHorizontalDirection();
            if (!b)
                return false;
            return this.floating ? c && c == "right" || a == "down" ? 2 : 1 : a && (a == "down" ? 2 : 1)
        },
        _intersectsWithSides: function(a) {
            var b = d.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, a.top + a.height / 2, a.height);
            a = d.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, a.left + a.width / 2, a.width);
            var c = this._getDragVerticalDirection()
              , e = this._getDragHorizontalDirection();
            return this.floating && e ? e == "right" && a || e == "left" && !a : c && (c == "down" && b || c == "up" && !b)
        },
        _getDragVerticalDirection: function() {
            var a = this.positionAbs.top - this.lastPositionAbs.top;
            return a != 0 && (a > 0 ? "down" : "up")
        },
        _getDragHorizontalDirection: function() {
            var a = this.positionAbs.left - this.lastPositionAbs.left;
            return a != 0 && (a > 0 ? "right" : "left")
        },
        refresh: function(a) {
            this._refreshItems(a);
            this.refreshPositions();
            return this
        },
        _connectWith: function() {
            var a = this.options;
            return a.connectWith.constructor == String ? [a.connectWith] : a.connectWith
        },
        _getItemsAsjQuery: function(a) {
            var b = []
              , c = []
              , e = this._connectWith();
            if (e && a)
                for (a = e.length - 1; a >= 0; a--)
                    for (var f = d(e[a]), g = f.length - 1; g >= 0; g--) {
                        var h = d.data(f[g], "sortable");
                        if (h && h != this && !h.options.disabled)
                            c.push([d.isFunction(h.options.items) ? h.options.items.call(h.element) : d(h.options.items, h.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), h])
                    }
            c.push([d.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : d(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
            for (a = c.length - 1; a >= 0; a--)
                c[a][0].each(function() {
                    b.push(this)
                });
            return d(b)
        },
        _removeCurrentsFromItems: function() {
            for (var a = this.currentItem.find(":data(sortable-item)"), b = 0; b < this.items.length; b++)
                for (var c = 0; c < a.length; c++)
                    a[c] == this.items[b].item[0] && this.items.splice(b, 1)
        },
        _refreshItems: function(a) {
            this.items = [];
            this.containers = [this];
            var b = this.items
              , c = [[d.isFunction(this.options.items) ? this.options.items.call(this.element[0], a, {
                item: this.currentItem
            }) : d(this.options.items, this.element), this]]
              , e = this._connectWith();
            if (e)
                for (var f = e.length - 1; f >= 0; f--)
                    for (var g = d(e[f]), h = g.length - 1; h >= 0; h--) {
                        var i = d.data(g[h], "sortable");
                        if (i && i != this && !i.options.disabled) {
                            c.push([d.isFunction(i.options.items) ? i.options.items.call(i.element[0], a, {
                                item: this.currentItem
                            }) : d(i.options.items, i.element), i]);
                            this.containers.push(i)
                        }
                    }
            for (f = c.length - 1; f >= 0; f--) {
                a = c[f][1];
                e = c[f][0];
                h = 0;
                for (g = e.length; h < g; h++) {
                    i = d(e[h]);
                    i.data("sortable-item", a);
                    b.push({
                        item: i,
                        instance: a,
                        width: 0,
                        height: 0,
                        left: 0,
                        top: 0
                    })
                }
            }
        },
        refreshPositions: function(a) {
            if (this.offsetParent && this.helper)
                this.offset.parent = this._getParentOffset();
            for (var b = this.items.length - 1; b >= 0; b--) {
                var c = this.items[b]
                  , e = this.options.toleranceElement ? d(this.options.toleranceElement, c.item) : c.item;
                if (!a) {
                    c.width = e.outerWidth();
                    c.height = e.outerHeight()
                }
                e = e.offset();
                c.left = e.left;
                c.top = e.top
            }
            if (this.options.custom && this.options.custom.refreshContainers)
                this.options.custom.refreshContainers.call(this);
            else
                for (b = this.containers.length - 1; b >= 0; b--) {
                    e = this.containers[b].element.offset();
                    this.containers[b].containerCache.left = e.left;
                    this.containers[b].containerCache.top = e.top;
                    this.containers[b].containerCache.width = this.containers[b].element.outerWidth();
                    this.containers[b].containerCache.height = this.containers[b].element.outerHeight()
                }
            return this
        },
        _createPlaceholder: function(a) {
            var b = a || this
              , c = b.options;
            if (!c.placeholder || c.placeholder.constructor == String) {
                var e = c.placeholder;
                c.placeholder = {
                    element: function() {
                        var f = d(document.createElement(b.currentItem[0].nodeName)).addClass(e || b.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
                        if (!e)
                            f.style.visibility = "hidden";
                        return f
                    },
                    update: function(f, g) {
                        if (!(e && !c.forcePlaceholderSize)) {
                            g.height() || g.height(b.currentItem.innerHeight() - parseInt(b.currentItem.css("paddingTop") || 0, 10) - parseInt(b.currentItem.css("paddingBottom") || 0, 10));
                            g.width() || g.width(b.currentItem.innerWidth() - parseInt(b.currentItem.css("paddingLeft") || 0, 10) - parseInt(b.currentItem.css("paddingRight") || 0, 10))
                        }
                    }
                }
            }
            b.placeholder = d(c.placeholder.element.call(b.element, b.currentItem));
            b.currentItem.after(b.placeholder);
            c.placeholder.update(b, b.placeholder)
        },
        _contactContainers: function(a) {
            for (var b = null, c = null, e = this.containers.length - 1; e >= 0; e--)
                if (!d.ui.contains(this.currentItem[0], this.containers[e].element[0]))
                    if (this._intersectsWith(this.containers[e].containerCache)) {
                        if (!(b && d.ui.contains(this.containers[e].element[0], b.element[0]))) {
                            b = this.containers[e];
                            c = e
                        }
                    } else if (this.containers[e].containerCache.over) {
                        this.containers[e]._trigger("out", a, this._uiHash(this));
                        this.containers[e].containerCache.over = 0
                    }
            if (b)
                if (this.containers.length === 1) {
                    this.containers[c]._trigger("over", a, this._uiHash(this));
                    this.containers[c].containerCache.over = 1
                } else if (this.currentContainer != this.containers[c]) {
                    b = 1E4;
                    e = null;
                    for (var f = this.positionAbs[this.containers[c].floating ? "left" : "top"], g = this.items.length - 1; g >= 0; g--)
                        if (d.ui.contains(this.containers[c].element[0], this.items[g].item[0])) {
                            var h = this.items[g][this.containers[c].floating ? "left" : "top"];
                            if (Math.abs(h - f) < b) {
                                b = Math.abs(h - f);
                                e = this.items[g]
                            }
                        }
                    if (e || this.options.dropOnEmpty) {
                        this.currentContainer = this.containers[c];
                        e ? this._rearrange(a, e, null, true) : this._rearrange(a, null, this.containers[c].element, true);
                        this._trigger("change", a, this._uiHash());
                        this.containers[c]._trigger("change", a, this._uiHash(this));
                        this.options.placeholder.update(this.currentContainer, this.placeholder);
                        this.containers[c]._trigger("over", a, this._uiHash(this));
                        this.containers[c].containerCache.over = 1
                    }
                }
        },
        _createHelper: function(a) {
            var b = this.options;
            a = d.isFunction(b.helper) ? d(b.helper.apply(this.element[0], [a, this.currentItem])) : b.helper == "clone" ? this.currentItem.clone() : this.currentItem;
            a.parents("body").length || d(b.appendTo != "parent" ? b.appendTo : this.currentItem[0].parentNode)[0].appendChild(a[0]);
            if (a[0] == this.currentItem[0])
                this._storedCSS = {
                    width: this.currentItem[0].style.width,
                    height: this.currentItem[0].style.height,
                    position: this.currentItem.css("position"),
                    top: this.currentItem.css("top"),
                    left: this.currentItem.css("left")
                };
            if (a[0].style.width == "" || b.forceHelperSize)
                a.width(this.currentItem.width());
            if (a[0].style.height == "" || b.forceHelperSize)
                a.height(this.currentItem.height());
            return a
        },
        _adjustOffsetFromHelper: function(a) {
            if (typeof a == "string")
                a = a.split(" ");
            if (d.isArray(a))
                a = {
                    left: +a[0],
                    top: +a[1] || 0
                };
            if ("left"in a)
                this.offset.click.left = a.left + this.margins.left;
            if ("right"in a)
                this.offset.click.left = this.helperProportions.width - a.right + this.margins.left;
            if ("top"in a)
                this.offset.click.top = a.top + this.margins.top;
            if ("bottom"in a)
                this.offset.click.top = this.helperProportions.height - a.bottom + this.margins.top
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var a = this.offsetParent.offset();
            if (this.cssPosition == "absolute" && this.scrollParent[0] != document && d.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                a.left += this.scrollParent.scrollLeft();
                a.top += this.scrollParent.scrollTop()
            }
            if (this.offsetParent[0] == document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == "html" && d.browser.msie)
                a = {
                    top: 0,
                    left: 0
                };
            return {
                top: a.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: a.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function() {
            if (this.cssPosition == "relative") {
                var a = this.currentItem.position();
                return {
                    top: a.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: a.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else
                return {
                    top: 0,
                    left: 0
                }
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                top: parseInt(this.currentItem.css("marginTop"), 10) || 0
            }
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function() {
            var a = this.options;
            if (a.containment == "parent")
                a.containment = this.helper[0].parentNode;
            if (a.containment == "document" || a.containment == "window")
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, d(a.containment == "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (d(a.containment == "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
            if (!/^(document|window|parent)$/.test(a.containment)) {
                var b = d(a.containment)[0];
                a = d(a.containment).offset();
                var c = d(b).css("overflow") != "hidden";
                this.containment = [a.left + (parseInt(d(b).css("borderLeftWidth"), 10) || 0) + (parseInt(d(b).css("paddingLeft"), 10) || 0) - this.margins.left, a.top + (parseInt(d(b).css("borderTopWidth"), 10) || 0) + (parseInt(d(b).css("paddingTop"), 10) || 0) - this.margins.top, a.left + (c ? Math.max(b.scrollWidth, b.offsetWidth) : b.offsetWidth) - (parseInt(d(b).css("borderLeftWidth"), 10) || 0) - (parseInt(d(b).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, a.top + (c ? Math.max(b.scrollHeight, b.offsetHeight) : b.offsetHeight) - (parseInt(d(b).css("borderTopWidth"), 10) || 0) - (parseInt(d(b).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            }
        },
        _convertPositionTo: function(a, b) {
            if (!b)
                b = this.position;
            a = a == "absolute" ? 1 : -1;
            var c = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && d.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
              , e = /(html|body)/i.test(c[0].tagName);
            return {
                top: b.top + this.offset.relative.top * a + this.offset.parent.top * a - (d.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : e ? 0 : c.scrollTop()) * a),
                left: b.left + this.offset.relative.left * a + this.offset.parent.left * a - (d.browser.safari && this.cssPosition == "fixed" ? 0 : (this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : e ? 0 : c.scrollLeft()) * a)
            }
        },
        _generatePosition: function(a) {
            var b = this.options
              , c = this.cssPosition == "absolute" && !(this.scrollParent[0] != document && d.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
              , e = /(html|body)/i.test(c[0].tagName);
            if (this.cssPosition == "relative" && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0]))
                this.offset.relative = this._getRelativeOffset();
            var f = a.pageX
              , g = a.pageY;
            if (this.originalPosition) {
                if (this.containment) {
                    if (a.pageX - this.offset.click.left < this.containment[0])
                        f = this.containment[0] + this.offset.click.left;
                    if (a.pageY - this.offset.click.top < this.containment[1])
                        g = this.containment[1] + this.offset.click.top;
                    if (a.pageX - this.offset.click.left > this.containment[2])
                        f = this.containment[2] + this.offset.click.left;
                    if (a.pageY - this.offset.click.top > this.containment[3])
                        g = this.containment[3] + this.offset.click.top
                }
                if (b.grid) {
                    g = this.originalPageY + Math.round((g - this.originalPageY) / b.grid[1]) * b.grid[1];
                    g = this.containment ? !(g - this.offset.click.top < this.containment[1] || g - this.offset.click.top > this.containment[3]) ? g : !(g - this.offset.click.top < this.containment[1]) ? g - b.grid[1] : g + b.grid[1] : g;
                    f = this.originalPageX + Math.round((f - this.originalPageX) / b.grid[0]) * b.grid[0];
                    f = this.containment ? !(f - this.offset.click.left < this.containment[0] || f - this.offset.click.left > this.containment[2]) ? f : !(f - this.offset.click.left < this.containment[0]) ? f - b.grid[0] : f + b.grid[0] : f
                }
            }
            return {
                top: g - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (d.browser.safari && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollTop() : e ? 0 : c.scrollTop()),
                left: f - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (d.browser.safari && this.cssPosition == "fixed" ? 0 : this.cssPosition == "fixed" ? -this.scrollParent.scrollLeft() : e ? 0 : c.scrollLeft())
            }
        },
        _rearrange: function(a, b, c, e) {
            c ? c[0].appendChild(this.placeholder[0]) : b.item[0].parentNode.insertBefore(this.placeholder[0], this.direction == "down" ? b.item[0] : b.item[0].nextSibling);
            this.counter = this.counter ? ++this.counter : 1;
            var f = this
              , g = this.counter;
            window.setTimeout(function() {
                g == f.counter && f.refreshPositions(!e)
            }, 0)
        },
        _clear: function(a, b) {
            this.reverting = false;
            var c = [];
            !this._noFinalSort && this.currentItem[0].parentNode && this.placeholder.before(this.currentItem);
            this._noFinalSort = null;
            if (this.helper[0] == this.currentItem[0]) {
                for (var e in this._storedCSS)
                    if (this._storedCSS[e] == "auto" || this._storedCSS[e] == "static")
                        this._storedCSS[e] = "";
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
            } else
                this.currentItem.show();
            this.fromOutside && !b && c.push(function(f) {
                this._trigger("receive", f, this._uiHash(this.fromOutside))
            });
            if ((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !b)
                c.push(function(f) {
                    this._trigger("update", f, this._uiHash())
                });
            if (!d.ui.contains(this.element[0], this.currentItem[0])) {
                b || c.push(function(f) {
                    this._trigger("remove", f, this._uiHash())
                });
                for (e = this.containers.length - 1; e >= 0; e--)
                    if (d.ui.contains(this.containers[e].element[0], this.currentItem[0]) && !b) {
                        c.push(function(f) {
                            return function(g) {
                                f._trigger("receive", g, this._uiHash(this))
                            }
                        }
                        .call(this, this.containers[e]));
                        c.push(function(f) {
                            return function(g) {
                                f._trigger("update", g, this._uiHash(this))
                            }
                        }
                        .call(this, this.containers[e]))
                    }
            }
            for (e = this.containers.length - 1; e >= 0; e--) {
                b || c.push(function(f) {
                    return function(g) {
                        f._trigger("deactivate", g, this._uiHash(this))
                    }
                }
                .call(this, this.containers[e]));
                if (this.containers[e].containerCache.over) {
                    c.push(function(f) {
                        return function(g) {
                            f._trigger("out", g, this._uiHash(this))
                        }
                    }
                    .call(this, this.containers[e]));
                    this.containers[e].containerCache.over = 0
                }
            }
            this._storedCursor && d("body").css("cursor", this._storedCursor);
            this._storedOpacity && this.helper.css("opacity", this._storedOpacity);
            if (this._storedZIndex)
                this.helper.css("zIndex", this._storedZIndex == "auto" ? "" : this._storedZIndex);
            this.dragging = false;
            if (this.cancelHelperRemoval) {
                if (!b) {
                    this._trigger("beforeStop", a, this._uiHash());
                    for (e = 0; e < c.length; e++)
                        c[e].call(this, a);
                    this._trigger("stop", a, this._uiHash())
                }
                return false
            }
            b || this._trigger("beforeStop", a, this._uiHash());
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            this.helper[0] != this.currentItem[0] && this.helper.remove();
            this.helper = null;
            if (!b) {
                for (e = 0; e < c.length; e++)
                    c[e].call(this, a);
                this._trigger("stop", a, this._uiHash())
            }
            this.fromOutside = false;
            return true
        },
        _trigger: function() {
            d.Widget.prototype._trigger.apply(this, arguments) === false && this.cancel()
        },
        _uiHash: function(a) {
            var b = a || this;
            return {
                helper: b.helper,
                placeholder: b.placeholder || d([]),
                position: b.position,
                originalPosition: b.originalPosition,
                offset: b.positionAbs,
                item: b.currentItem,
                sender: a ? a.element : null
            }
        }
    });
    d.extend(d.ui.sortable, {
        version: "1.8.11"
    })
}
)(jQuery);
;jQuery.ui.draggable.prototype._mouseCapture = (function(A) {
    return function(C) {
        var B = A.call(this, C);
        if (B && jQuery.browser.msie) {
            C.stopPropagation()
        }
        return B
    }
}
)(jQuery.ui.draggable.prototype._mouseCapture);
/*
 * jQuery Form Plugin
 * version: 2.67 (12-MAR-2011)
 * @requires jQuery v1.3.2 or later
 *
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */
(function(B) {
    B.fn.ajaxSubmit = function(Q) {
        if (!this.length) {
            A("ajaxSubmit: skipping submit process - no element selected");
            return this
        }
        if (typeof Q == "function") {
            Q = {
                success: Q
            }
        }
        var H = this.attr("action");
        var D = (typeof H === "string") ? B.trim(H) : "";
        if (D) {
            D = (D.match(/^([^#]+)/) || [])[1]
        }
        D = D || window.location.href || "";
        Q = B.extend(true, {
            url: D,
            type: this[0].getAttribute("method") || "GET",
            iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
        }, Q);
        var R = {};
        this.trigger("form-pre-serialize", [this, Q, R]);
        if (R.veto) {
            A("ajaxSubmit: submit vetoed via form-pre-serialize trigger");
            return this
        }
        if (Q.beforeSerialize && Q.beforeSerialize(this, Q) === false) {
            A("ajaxSubmit: submit aborted via beforeSerialize callback");
            return this
        }
        var F, N, L = this.formToArray(Q.semantic);
        if (Q.data) {
            Q.extraData = Q.data;
            for (F in Q.data) {
                if (Q.data[F]instanceof Array) {
                    for (var I in Q.data[F]) {
                        L.push({
                            name: F,
                            value: Q.data[F][I]
                        })
                    }
                } else {
                    N = Q.data[F];
                    N = B.isFunction(N) ? N() : N;
                    L.push({
                        name: F,
                        value: N
                    })
                }
            }
        }
        if (Q.beforeSubmit && Q.beforeSubmit(L, this, Q) === false) {
            A("ajaxSubmit: submit aborted via beforeSubmit callback");
            return this
        }
        this.trigger("form-submit-validate", [L, this, Q, R]);
        if (R.veto) {
            A("ajaxSubmit: submit vetoed via form-submit-validate trigger");
            return this
        }
        var C = B.param(L);
        if (Q.type.toUpperCase() == "GET") {
            Q.url += (Q.url.indexOf("?") >= 0 ? "&" : "?") + C;
            Q.data = null
        } else {
            Q.data = C
        }
        var P = this
          , K = [];
        if (Q.resetForm) {
            K.push(function() {
                P.resetForm()
            })
        }
        if (Q.clearForm) {
            K.push(function() {
                P.clearForm()
            })
        }
        if (!Q.dataType && Q.target) {
            var O = Q.success || function() {}
            ;
            K.push(function(T) {
                var S = Q.replaceTarget ? "replaceWith" : "html";
                B(Q.target)[S](T).each(O, arguments)
            })
        } else {
            if (Q.success) {
                K.push(Q.success)
            }
        }
        Q.success = function(W, T, X) {
            var V = Q.context || Q;
            for (var U = 0, S = K.length; U < S; U++) {
                K[U].apply(V, [W, T, X || P, P])
            }
        }
        ;
        var G = B("input:file", this).length > 0;
        var E = "multipart/form-data";
        var J = (P.attr("enctype") == E || P.attr("encoding") == E);
        if (Q.iframe !== false && (G || Q.iframe || J)) {
            if (Q.closeKeepAlive) {
                B.get(Q.closeKeepAlive, M)
            } else {
                M()
            }
        } else {
            B.ajax(Q)
        }
        this.trigger("form-submit-notify", [this, Q]);
        return this;
        function M() {
            var U = P[0];
            if (B(":input[name=submit],:input[id=submit]", U).length) {
                alert('Error: Form elements must not have name or id of "submit".');
                return
            }
            var a = B.extend(true, {}, B.ajaxSettings, Q);
            a.context = a.context || a;
            var d = "jqFormIO" + (new Date().getTime())
              , Y = "_" + d;
            var V = B('<iframe id="' + d + '" name="' + d + '" src="' + a.iframeSrc + '" />');
            var Z = V[0];
            V.css({
                position: "absolute",
                top: "-1000px",
                left: "-1000px"
            });
            var W = {
                aborted: 0,
                responseText: null,
                responseXML: null,
                status: 0,
                statusText: "n/a",
                getAllResponseHeaders: function() {},
                getResponseHeader: function() {},
                setRequestHeader: function() {},
                abort: function() {
                    A("aborting upload...");
                    var g = "aborted";
                    this.aborted = 1;
                    V.attr("src", a.iframeSrc);
                    W.error = g;
                    a.error && a.error.call(a.context, W, "error", g);
                    i && B.event.trigger("ajaxError", [W, a, g]);
                    a.complete && a.complete.call(a.context, W, "error")
                }
            };
            var i = a.global;
            if (i && !B.active++) {
                B.event.trigger("ajaxStart")
            }
            if (i) {
                B.event.trigger("ajaxSend", [W, a])
            }
            if (a.beforeSend && a.beforeSend.call(a.context, W, a) === false) {
                if (a.global) {
                    B.active--
                }
                return
            }
            if (W.aborted) {
                return
            }
            var h = 0;
            var X = U.clk;
            if (X) {
                var e = X.name;
                if (e && !X.disabled) {
                    a.extraData = a.extraData || {};
                    a.extraData[e] = X.value;
                    if (X.type == "image") {
                        a.extraData[e + ".x"] = U.clk_x;
                        a.extraData[e + ".y"] = U.clk_y
                    }
                }
            }
            function f() {
                var o = P.attr("target")
                  , g = P.attr("action");
                U.setAttribute("target", d);
                if (U.getAttribute("method") != "POST") {
                    U.setAttribute("method", "POST")
                }
                if (U.getAttribute("action") != a.url) {
                    U.setAttribute("action", a.url)
                }
                if (!a.skipEncodingOverride) {
                    P.attr({
                        encoding: "multipart/form-data",
                        enctype: "multipart/form-data"
                    })
                }
                if (a.timeout) {
                    setTimeout(function() {
                        h = true;
                        c()
                    }, a.timeout)
                }
                var m = [];
                try {
                    if (a.extraData) {
                        for (var p in a.extraData) {
                            m.push(B('<input type="hidden" name="' + p + '" value="' + a.extraData[p] + '" />').appendTo(U)[0])
                        }
                    }
                    V.appendTo("body");
                    Z.attachEvent ? Z.attachEvent("onload", c) : Z.addEventListener("load", c, false);
                    U.submit()
                } finally {
                    U.setAttribute("action", g);
                    if (o) {
                        U.setAttribute("target", o)
                    } else {
                        P.removeAttr("target")
                    }
                    B(m).remove()
                }
            }
            if (a.forceSync) {
                f()
            } else {
                setTimeout(f, 10)
            }
            var k, l, j = 50;
            function c() {
                if (W.aborted) {
                    return
                }
                var r = Z.contentWindow ? Z.contentWindow.document : Z.contentDocument ? Z.contentDocument : Z.document;
                if (!r || r.location.href == a.iframeSrc) {
                    return
                }
                Z.detachEvent ? Z.detachEvent("onload", c) : Z.removeEventListener("load", c, false);
                var n = true;
                try {
                    if (h) {
                        throw "timeout"
                    }
                    var s = a.dataType == "xml" || r.XMLDocument || B.isXMLDoc(r);
                    A("isXml=" + s);
                    if (!s && window.opera && (r.body == null || r.body.innerHTML == "")) {
                        if (--j) {
                            A("requeing onLoad callback, DOM not available");
                            setTimeout(c, 250);
                            return
                        }
                    }
                    W.responseText = r.body ? r.body.innerHTML : r.documentElement ? r.documentElement.innerHTML : null;
                    W.responseXML = r.XMLDocument ? r.XMLDocument : r;
                    W.getResponseHeader = function(u) {
                        var t = {
                            "content-type": a.dataType
                        };
                        return t[u]
                    }
                    ;
                    var q = /(json|script)/.test(a.dataType);
                    if (q || a.textarea) {
                        var m = r.getElementsByTagName("textarea")[0];
                        if (m) {
                            W.responseText = m.value
                        } else {
                            if (q) {
                                var p = r.getElementsByTagName("pre")[0];
                                var g = r.getElementsByTagName("body")[0];
                                if (p) {
                                    W.responseText = p.textContent
                                } else {
                                    if (g) {
                                        W.responseText = g.innerHTML
                                    }
                                }
                            }
                        }
                    } else {
                        if (a.dataType == "xml" && !W.responseXML && W.responseText != null) {
                            W.responseXML = b(W.responseText)
                        }
                    }
                    k = S(W, a.dataType, a)
                } catch (o) {
                    A("error caught:", o);
                    n = false;
                    W.error = o;
                    a.error && a.error.call(a.context, W, "error", o);
                    i && B.event.trigger("ajaxError", [W, a, o])
                }
                if (W.aborted) {
                    A("upload aborted");
                    n = false
                }
                if (n) {
                    a.success && a.success.call(a.context, k, "success", W);
                    i && B.event.trigger("ajaxSuccess", [W, a])
                }
                i && B.event.trigger("ajaxComplete", [W, a]);
                if (i && !--B.active) {
                    B.event.trigger("ajaxStop")
                }
                a.complete && a.complete.call(a.context, W, n ? "success" : "error");
                setTimeout(function() {
                    V.removeData("form-plugin-onload");
                    V.remove();
                    W.responseXML = null
                }, 100)
            }
            var b = B.parseXML || function(g, m) {
                if (window.ActiveXObject) {
                    m = new ActiveXObject("Microsoft.XMLDOM");
                    m.async = "false";
                    m.loadXML(g)
                } else {
                    m = (new DOMParser()).parseFromString(g, "text/xml")
                }
                return (m && m.documentElement && m.documentElement.nodeName != "parsererror") ? m : null
            }
            ;
            var T = B.parseJSON || function(g) {
                return window["eval"]("(" + g + ")")
            }
            ;
            var S = function(q, o, n) {
                var m = q.getResponseHeader("content-type") || ""
                  , g = o === "xml" || !o && m.indexOf("xml") >= 0
                  , p = g ? q.responseXML : q.responseText;
                if (g && p.documentElement.nodeName === "parsererror") {
                    B.error && B.error("parsererror")
                }
                if (n && n.dataFilter) {
                    p = n.dataFilter(p, o)
                }
                if (typeof p === "string") {
                    if (o === "json" || !o && m.indexOf("json") >= 0) {
                        p = T(p)
                    } else {
                        if (o === "script" || !o && m.indexOf("javascript") >= 0) {
                            B.globalEval(p)
                        }
                    }
                }
                return p
            }
        }
    }
    ;
    B.fn.ajaxForm = function(C) {
        if (this.length === 0) {
            var D = {
                s: this.selector,
                c: this.context
            };
            if (!B.isReady && D.s) {
                A("DOM not ready, queuing ajaxForm");
                B(function() {
                    B(D.s, D.c).ajaxForm(C)
                });
                return this
            }
            A("terminating; zero elements found by selector" + (B.isReady ? "" : " (DOM not ready)"));
            return this
        }
        return this.ajaxFormUnbind().bind("submit.form-plugin", function(E) {
            if (!E.isDefaultPrevented()) {
                E.preventDefault();
                B(this).ajaxSubmit(C)
            }
        }).bind("click.form-plugin", function(I) {
            var H = I.target;
            var F = B(H);
            if (!(F.is(":submit,input:image"))) {
                var E = F.closest(":submit");
                if (E.length == 0) {
                    return
                }
                H = E[0]
            }
            var G = this;
            G.clk = H;
            if (H.type == "image") {
                if (I.offsetX != undefined) {
                    G.clk_x = I.offsetX;
                    G.clk_y = I.offsetY
                } else {
                    if (typeof B.fn.offset == "function") {
                        var J = F.offset();
                        G.clk_x = I.pageX - J.left;
                        G.clk_y = I.pageY - J.top
                    } else {
                        G.clk_x = I.pageX - H.offsetLeft;
                        G.clk_y = I.pageY - H.offsetTop
                    }
                }
            }
            setTimeout(function() {
                G.clk = G.clk_x = G.clk_y = null
            }, 100)
        })
    }
    ;
    B.fn.ajaxFormUnbind = function() {
        return this.unbind("submit.form-plugin click.form-plugin")
    }
    ;
    B.fn.formToArray = function(N) {
        var M = [];
        if (this.length === 0) {
            return M
        }
        var D = this[0];
        var G = N ? D.getElementsByTagName("*") : D.elements;
        if (!G) {
            return M
        }
        var I, H, F, O, E, K, C;
        for (I = 0,
        K = G.length; I < K; I++) {
            E = G[I];
            F = E.name;
            if (!F) {
                continue
            }
            if (N && D.clk && E.type == "image") {
                if (!E.disabled && D.clk == E) {
                    M.push({
                        name: F,
                        value: B(E).val()
                    });
                    M.push({
                        name: F + ".x",
                        value: D.clk_x
                    }, {
                        name: F + ".y",
                        value: D.clk_y
                    })
                }
                continue
            }
            O = B.fieldValue(E, true);
            if (O && O.constructor == Array) {
                for (H = 0,
                C = O.length; H < C; H++) {
                    M.push({
                        name: F,
                        value: O[H]
                    })
                }
            } else {
                if (O !== null && typeof O != "undefined") {
                    M.push({
                        name: F,
                        value: O
                    })
                }
            }
        }
        if (!N && D.clk) {
            var J = B(D.clk)
              , L = J[0];
            F = L.name;
            if (F && !L.disabled && L.type == "image") {
                M.push({
                    name: F,
                    value: J.val()
                });
                M.push({
                    name: F + ".x",
                    value: D.clk_x
                }, {
                    name: F + ".y",
                    value: D.clk_y
                })
            }
        }
        return M
    }
    ;
    B.fn.formSerialize = function(C) {
        return B.param(this.formToArray(C))
    }
    ;
    B.fn.fieldSerialize = function(D) {
        var C = [];
        this.each(function() {
            var H = this.name;
            if (!H) {
                return
            }
            var F = B.fieldValue(this, D);
            if (F && F.constructor == Array) {
                for (var G = 0, E = F.length; G < E; G++) {
                    C.push({
                        name: H,
                        value: F[G]
                    })
                }
            } else {
                if (F !== null && typeof F != "undefined") {
                    C.push({
                        name: this.name,
                        value: F
                    })
                }
            }
        });
        return B.param(C)
    }
    ;
    B.fn.fieldValue = function(H) {
        for (var G = [], E = 0, C = this.length; E < C; E++) {
            var F = this[E];
            var D = B.fieldValue(F, H);
            if (D === null || typeof D == "undefined" || (D.constructor == Array && !D.length)) {
                continue
            }
            D.constructor == Array ? B.merge(G, D) : G.push(D)
        }
        return G
    }
    ;
    B.fieldValue = function(C, I) {
        var E = C.name
          , N = C.type
          , O = C.tagName.toLowerCase();
        if (I === undefined) {
            I = true
        }
        if (I && (!E || C.disabled || N == "reset" || N == "button" || (N == "checkbox" || N == "radio") && !C.checked || (N == "submit" || N == "image") && C.form && C.form.clk != C || O == "select" && C.selectedIndex == -1)) {
            return null
        }
        if (O == "select") {
            var J = C.selectedIndex;
            if (J < 0) {
                return null
            }
            var L = []
              , D = C.options;
            var G = (N == "select-one");
            var K = (G ? J + 1 : D.length);
            for (var F = (G ? J : 0); F < K; F++) {
                var H = D[F];
                if (H.selected) {
                    var M = H.value;
                    if (!M) {
                        M = (H.attributes && H.attributes.value && !(H.attributes.value.specified)) ? H.text : H.value
                    }
                    if (G) {
                        return M
                    }
                    L.push(M)
                }
            }
            return L
        }
        return B(C).val()
    }
    ;
    B.fn.clearForm = function() {
        return this.each(function() {
            B("input,select,textarea", this).clearFields()
        })
    }
    ;
    B.fn.clearFields = B.fn.clearInputs = function() {
        return this.each(function() {
            var D = this.type
              , C = this.tagName.toLowerCase();
            if (D == "text" || D == "password" || C == "textarea") {
                this.value = ""
            } else {
                if (D == "checkbox" || D == "radio") {
                    this.checked = false
                } else {
                    if (C == "select") {
                        this.selectedIndex = -1
                    }
                }
            }
        })
    }
    ;
    B.fn.resetForm = function() {
        return this.each(function() {
            if (typeof this.reset == "function" || (typeof this.reset == "object" && !this.reset.nodeType)) {
                this.reset()
            }
        })
    }
    ;
    B.fn.enable = function(C) {
        if (C === undefined) {
            C = true
        }
        return this.each(function() {
            this.disabled = !C
        })
    }
    ;
    B.fn.selected = function(C) {
        if (C === undefined) {
            C = true
        }
        return this.each(function() {
            var D = this.type;
            if (D == "checkbox" || D == "radio") {
                this.checked = C
            } else {
                if (this.tagName.toLowerCase() == "option") {
                    var E = B(this).parent("select");
                    if (C && E[0] && E[0].type == "select-one") {
                        E.find("option").selected(false)
                    }
                    this.selected = C
                }
            }
        })
    }
    ;
    function A() {
        if (B.fn.ajaxSubmit.debug) {
            var C = "[jquery.form] " + Array.prototype.join.call(arguments, "");
            if (window.console && window.console.log) {
                window.console.log(C)
            } else {
                if (window.opera && window.opera.postError) {
                    window.opera.postError(C)
                }
            }
        }
    }
}
)(jQuery);
(function(D) {
    D.hotkeys = {
        version: "0.8",
        specialKeys: {
            8: "backspace",
            9: "tab",
            13: "return",
            16: "shift",
            17: "ctrl",
            18: "alt",
            19: "pause",
            20: "capslock",
            27: "esc",
            32: "space",
            33: "pageup",
            34: "pagedown",
            35: "end",
            36: "home",
            37: "left",
            38: "up",
            39: "right",
            40: "down",
            45: "insert",
            46: "del",
            91: "meta",
            96: "0",
            97: "1",
            98: "2",
            99: "3",
            100: "4",
            101: "5",
            102: "6",
            103: "7",
            104: "8",
            105: "9",
            106: "*",
            107: "+",
            109: "-",
            110: ".",
            111: "/",
            112: "f1",
            113: "f2",
            114: "f3",
            115: "f4",
            116: "f5",
            117: "f6",
            118: "f7",
            119: "f8",
            120: "f9",
            121: "f10",
            122: "f11",
            123: "f12",
            144: "numlock",
            145: "scroll",
            188: ",",
            190: ".",
            191: "/",
            224: "meta",
            219: "[",
            221: "]"
        },
        keypressKeys: ["<", ">", "?"],
        shiftNums: {
            "`": "~",
            "1": "!",
            "2": "@",
            "3": "#",
            "4": "$",
            "5": "%",
            "6": "^",
            "7": "&",
            "8": "*",
            "9": "(",
            "0": ")",
            "-": "_",
            "=": "+",
            ";": ":",
            "'": '"',
            ",": "<",
            ".": ">",
            "/": "?",
            "\\": "|"
        }
    };
    D.each(D.hotkeys.keypressKeys, function(E, F) {
        D.hotkeys.shiftNums[F] = F
    });
    function A(E) {
        this.num = 0;
        this.timer = E > 0 ? E : false
    }
    A.prototype.val = function() {
        return this.num
    }
    ;
    A.prototype.inc = function() {
        if (this.timer) {
            clearTimeout(this.timeout);
            this.timeout = setTimeout(D.proxy(A.prototype.reset, this), this.timer)
        }
        this.num++
    }
    ;
    A.prototype.reset = function() {
        if (this.timer) {
            clearTimeout(this.timeout)
        }
        this.num = 0
    }
    ;
    function C(G) {
        if (!(D.isPlainObject(G.data) || D.isArray(G.data) || typeof G.data === "string")) {
            return
        }
        var F = G.handler
          , E = {
            timer: 700
        };
        (function(H) {
            if (typeof H === "string") {
                E.combo = [H]
            } else {
                if (D.isArray(H)) {
                    E.combo = H
                } else {
                    D.extend(E, H)
                }
            }
            E.combo = D.map(E.combo, function(I) {
                return I.toLowerCase()
            })
        }
        )(G.data);
        G.index = new A(E.timer);
        G.handler = function(M) {
            if (this !== M.target && (/textarea|select|input/i.test(M.target.nodeName))) {
                return
            }
            var J = M.type !== "keypress" ? D.hotkeys.specialKeys[M.which] : null, N = String.fromCharCode(M.which).toLowerCase(), K, L = "", I = {};
            if (M.altKey && J !== "alt") {
                L += "alt+"
            }
            if (M.ctrlKey && J !== "ctrl") {
                L += "ctrl+"
            }
            if (M.metaKey && !M.ctrlKey && J !== "meta") {
                L += "meta+"
            }
            if (M.shiftKey && J !== "shift") {
                L += "shift+"
            }
            if (J) {
                I[L + J] = true
            }
            if (N) {
                I[L + N] = true
            }
            if (/shift+/.test(L)) {
                I[L.replace("shift+", "") + D.hotkeys.shiftNums[(J || N)]] = true
            }
            var H = G.index
              , O = E.combo;
            if (B(O[H.val()], I)) {
                if (H.val() === O.length - 1) {
                    H.reset();
                    return F.apply(this, arguments)
                } else {
                    H.inc()
                }
            } else {
                H.reset();
                if (B(O[0], I)) {
                    H.inc()
                }
            }
        }
    }
    function B(H, F) {
        var I = H.split(" ");
        for (var G = 0, E = I.length; G < E; G++) {
            if (F[I[G]]) {
                return true
            }
        }
        return false
    }
    D.each(["keydown", "keyup", "keypress"], function() {
        D.event.special[this] = {
            add: C
        }
    })
}
)(jQuery);
jQuery.fn.moveTo = function(D) {
    var H = {
        transition: false,
        scrollOffset: 35
    };
    var G = jQuery.extend(H, D), A = this, E = A.offset().top, F = jQuery("#stalker"), B = F.outerHeight() + G.scrollOffset, C;
    if (F.length === 0 || (!F.hasClass("detached") && (E <= F.offset().top))) {
        B = 0
    }
    if ((jQuery(window).scrollTop() + jQuery(window).height() - this.outerHeight() < E || jQuery(window).scrollTop() + B > E) && jQuery(window).height() > B) {
        if (jQuery(window).scrollTop() + B > E) {
            C = E - (jQuery(window).height() - this.outerHeight()) + G.scrollOffset
        } else {
            C = E - B
        }
        if (!jQuery.fn.moveTo.animating && G.transition) {
            jQuery(document).trigger("moveToStarted", this);
            jQuery.fn.moveTo.animating = true;
            jQuery("html,body").animate({
                scrollTop: C
            }, 1000, function() {
                F.trigger("positionChanged");
                jQuery(document).trigger("moveToFinished", A);
                delete jQuery.fn.moveTo.animating
            });
            return this
        } else {
            if (jQuery("html, body").is(":animated")) {
                jQuery("html, body").stop();
                delete jQuery.fn.moveTo.animating
            }
            jQuery(document).trigger("moveToStarted");
            jQuery(window).scrollTop(C);
            F.trigger("positionChanged");
            setTimeout(function() {
                jQuery(document).trigger("moveToFinished", A)
            }, 100);
            return this
        }
    }
    jQuery(document).trigger("moveToFinished", this);
    return this
}
;
AJS.bind = function(A, C, B) {
    try {
        if (typeof B === "function") {
            return jQuery(window).bind(A, C, B)
        } else {
            return jQuery(window).bind(A, C)
        }
    } catch (D) {
        AJS.log("error while binding: " + D.message)
    }
}
;
AJS.unbind = function(A, B) {
    try {
        return jQuery(window).unbind(A, B)
    } catch (C) {
        AJS.log("error while unbinding: " + C.message)
    }
}
;
AJS.trigger = function(A, C) {
    try {
        return jQuery(window).trigger(A, C)
    } catch (B) {
        AJS.log("error while triggering: " + B.message)
    }
}
;
(function() {
    var B = "AJS.conglomerate.cookie"
      , F = /(\\|^"|"$)/g
      , G = /\|\|+/g
      , I = /"/g
      , C = /[.*+?|^$()[\]{\\]/g;
    function E(L, O) {
        O = O || "";
        var N = new RegExp(D(L) + "=([^|]+)")
          , M = O.match(N);
        return M && M[1]
    }
    function J(L, N, P) {
        var M = new RegExp("(\\s|\\|)*\\b" + D(L) + "=[^|]*[|]*");
        P = P || "";
        P = P.replace(M, "|");
        if (N !== "") {
            var O = L + "=" + N;
            if (P.length + O.length < 4020) {
                P += "|" + O
            }
        }
        return P.replace(G, "|")
    }
    function H(L) {
        return L.replace(F, "")
    }
    function K(L) {
        var N = new RegExp("\\b" + D(L) + "=((?:[^\\\\;]+|\\\\.)*)(?:;|$)")
          , M = document.cookie.match(N);
        return M && H(M[1])
    }
    function A(M, O, Q) {
        var N = "", P, L = '"' + O.replace(I, '\\"') + '"';
        if (Q) {
            P = new Date();
            P.setTime(+P + Q * 24 * 60 * 60 * 1000);
            N = "; expires=" + P.toGMTString()
        }
        document.cookie = M + "=" + L + N + ";path=/"
    }
    function D(L) {
        return L.replace(C, "\\$&")
    }
    AJS.Cookie = {
        save: function(M, N, L) {
            var O = K(B);
            O = J(M, N, O);
            A(B, O, L || 365)
        },
        read: function(M, L) {
            var O = K(B);
            var N = E(M, O);
            if (N != null) {
                return N
            }
            return L
        },
        erase: function(L) {
            this.save(L, "")
        }
    }
}
)();
AJS.popup = function(I) {
    var D = {
        width: 800,
        height: 600,
        closeOnOutsideClick: false,
        keypressListener: function(J) {
            if (J.keyCode === 27 && B.is(":visible")) {
                F.hide()
            }
        }
    };
    if (typeof I != "object") {
        I = {
            width: arguments[0],
            height: arguments[1],
            id: arguments[2]
        };
        I = AJS.$.extend({}, I, arguments[3])
    }
    I = AJS.$.extend({}, D, I);
    var B = AJS("div").addClass("aui-popup");
    if (I.id) {
        B.attr("id", I.id)
    }
    var E = 3000;
    AJS.$(".aui-dialog").each(function() {
        var J = AJS.$(this);
        E = (J.css("z-index") > E) ? J.css("z-index") : E
    });
    var G = (function(K, J) {
        I.width = (K = (K || I.width));
        I.height = (J = (J || I.height));
        B.css({
            marginTop: -Math.round(J / 2) + "px",
            marginLeft: -Math.round(K / 2) + "px",
            width: K,
            height: J,
            background: "#fff",
            "z-index": parseInt(E, 10) + 2
        });
        return arguments.callee
    }
    )(I.width, I.height);
    AJS.$("body").append(B);
    B.hide();
    B.enable();
    var C = AJS.$(".aui-blanket")
      , A = function(J, K) {
        var L = AJS.$(J, K);
        if (L.length) {
            L.focus();
            return true
        }
        return false
    }
      , H = function(J) {
        if (I.focusSelector) {
            return A(I.focusSelector, J)
        }
        var K = ":input:visible:enabled:first";
        if (A(K, AJS.$(".dialog-page-body", J))) {
            return
        }
        if (A(K, AJS.$(".dialog-button-panel", J))) {
            return
        }
        A(K, AJS.$(".dialog-page-menu", J))
    };
    var F = {
        changeSize: function(J, K) {
            if ((J && J != I.width) || (K && K != I.height)) {
                G(J, K);
                if (this.shadow) {
                    this.shadow.remove();
                    this.shadow = null
                }
            }
            this.show()
        },
        show: function() {
            var J = function() {
                var K = 5;
                if (AJS.$.browser.msie && ~~(AJS.$.browser.version) < 9) {
                    K = 3
                }
                AJS.$(document).keydown(I.keypressListener);
                AJS.dim();
                C = AJS.$(".aui-blanket");
                if (C.size() != 0 && I.closeOnOutsideClick) {
                    C.click(function() {
                        if (B.is(":visible")) {
                            F.hide()
                        }
                    })
                }
                B.show();
                if (!this.shadow) {
                    var L = B.offset();
                    this.shadow = Raphael.shadow(L.top, L.left, I.width, I.height, {
                        target: B[0],
                        zindex: (B.css("z-index") - 1)
                    });
                    this.shadow.css({
                        position: "fixed",
                        top: "50%",
                        left: "50%",
                        marginLeft: -(I.width / 2 - K) + "px",
                        marginTop: -(I.height / 2 - K) + "px"
                    })
                }
                AJS.popup.current = this;
                H(B);
                AJS.$(document).trigger("showLayer", ["popup", this])
            };
            J.call(this);
            this.show = J
        },
        hide: function() {
            AJS.$(document).unbind("keydown", I.keypressListener);
            C.unbind();
            this.element.hide();
            if (this.shadow) {
                this.shadow.remove();
                this.shadow = null
            }
            if (AJS.$(".aui-dialog:visible").size() == 0) {
                AJS.undim()
            }
            AJS.$(document).trigger("hideLayer", ["popup", this]);
            AJS.popup.current = null;
            this.enable()
        },
        element: B,
        remove: function() {
            if (this.shadow) {
                this.shadow.remove();
                this.shadow = null;
                this.shadowParent.remove();
                this.shadowParent = null
            }
            B.remove();
            this.element = null
        },
        disable: function() {
            if (!this.disabled) {
                this.popupBlanket = AJS.$("<div class='dialog-blanket'> </div>").css({
                    height: B.height(),
                    width: B.width()
                });
                B.append(this.popupBlanket);
                this.disabled = true
            }
        },
        enable: function() {
            if (this.disabled) {
                this.disabled = false;
                this.popupBlanket.remove();
                this.popupBlanket = null
            }
        }
    };
    return F
}
;
(function() {
    function A(J, H, G, I) {
        if (!J.buttonpanel) {
            J.addButtonPanel()
        }
        this.page = J;
        this.onclick = G;
        this._onclick = function() {
            return G.call(this, J.dialog, J) === true
        }
        ;
        this.item = AJS("button", H).addClass("button-panel-button");
        if (I) {
            this.item.addClass(I)
        }
        if (typeof G == "function") {
            this.item.click(this._onclick)
        }
        J.buttonpanel.append(this.item);
        this.id = J.button.length;
        J.button[this.id] = this
    }
    function B(K, I, H, J, G) {
        if (!K.buttonpanel) {
            K.addButtonPanel()
        }
        if (!G) {
            G = "#"
        }
        this.page = K;
        this.onclick = H;
        this._onclick = function() {
            return H.call(this, K.dialog, K) === true
        }
        ;
        this.item = AJS("a", I).attr("href", G).addClass("button-panel-link");
        if (J) {
            this.item.addClass(J)
        }
        if (typeof H == "function") {
            this.item.click(this._onclick)
        }
        K.buttonpanel.append(this.item);
        this.id = K.button.length;
        K.button[this.id] = this
    }
    function D(I, H) {
        var G = I == "left" ? -1 : 1;
        return function(M) {
            var K = this.page[H];
            if (this.id != ((G == 1) ? K.length - 1 : 0)) {
                G *= (M || 1);
                K[this.id + G].item[(G < 0 ? "before" : "after")](this.item);
                K.splice(this.id, 1);
                K.splice(this.id + G, 0, this);
                for (var J = 0, L = K.length; J < L; J++) {
                    if (H == "panel" && this.page.curtab == K[J].id) {
                        this.page.curtab = J
                    }
                    K[J].id = J
                }
            }
            return this
        }
    }
    function F(G) {
        return function() {
            this.page[G].splice(this.id, 1);
            for (var H = 0, I = this.page[G].length; H < I; H++) {
                this.page[G][H].id = H
            }
            this.item.remove()
        }
    }
    A.prototype.moveUp = A.prototype.moveLeft = D("left", "button");
    A.prototype.moveDown = A.prototype.moveRight = D("right", "button");
    A.prototype.remove = F("button");
    A.prototype.html = function(G) {
        return this.item.html(G)
    }
    ;
    A.prototype.onclick = function(G) {
        if (typeof G == "undefined") {
            return this.onclick
        } else {
            this.item.unbind("click", this._onclick);
            this._onclick = function() {
                return G.call(this, page.dialog, page) === true
            }
            ;
            if (typeof G == "function") {
                this.item.click(this._onclick)
            }
        }
    }
    ;
    var E = function(M, N, G, L, J) {
        if (!(G instanceof AJS.$)) {
            G = AJS.$(G)
        }
        this.dialog = M.dialog;
        this.page = M;
        this.id = M.panel.length;
        this.button = AJS("button").html(N).addClass("item-button");
        if (J) {
            this.button[0].id = J
        }
        this.item = AJS("li").append(this.button).addClass("page-menu-item");
        this.body = AJS("div").append(G).addClass("dialog-panel-body").css("height", M.dialog.height + "px");
        this.padding = 10;
        if (L) {
            this.body.addClass(L)
        }
        var I = M.panel.length
          , K = this;
        M.menu.append(this.item);
        M.body.append(this.body);
        M.panel[I] = this;
        var H = function() {
            var O;
            if (M.curtab + 1) {
                O = M.panel[M.curtab];
                O.body.hide();
                O.item.removeClass("selected");
                (typeof O.onblur == "function") && O.onblur()
            }
            M.curtab = K.id;
            K.body.show();
            K.item.addClass("selected");
            (typeof K.onselect == "function") && K.onselect();
            (typeof M.ontabchange == "function") && M.ontabchange(K, O)
        };
        if (!this.button.click) {
            AJS.log("atlassian-dialog:Panel:constructor - this.button.click false");
            this.button.onclick = H
        } else {
            this.button.click(H)
        }
        H();
        if (I == 0) {
            M.menu.css("display", "none")
        } else {
            M.menu.show()
        }
    };
    E.prototype.select = function() {
        this.button.click()
    }
    ;
    E.prototype.moveUp = E.prototype.moveLeft = D("left", "panel");
    E.prototype.moveDown = E.prototype.moveRight = D("right", "panel");
    E.prototype.remove = F("panel");
    E.prototype.html = function(G) {
        if (G) {
            this.body.html(G);
            return this
        } else {
            return this.body.html()
        }
    }
    ;
    E.prototype.setPadding = function(G) {
        if (!isNaN(+G)) {
            this.body.css("padding", +G);
            this.padding = +G;
            this.page.recalcSize()
        }
        return this
    }
    ;
    var C = function(G, H) {
        this.dialog = G;
        this.id = G.page.length;
        this.element = AJS("div").addClass("dialog-components");
        this.body = AJS("div").addClass("dialog-page-body");
        this.menu = AJS("ul").addClass("dialog-page-menu").css("height", G.height + "px");
        this.body.append(this.menu);
        this.curtab;
        this.panel = [];
        this.button = [];
        if (H) {
            this.body.addClass(H)
        }
        G.popup.element.append(this.element.append(this.menu).append(this.body));
        G.page[G.page.length] = this
    };
    C.prototype.recalcSize = function() {
        var G = this.header ? 43 : 0;
        var J = this.buttonpanel ? 43 : 0;
        for (var I = this.panel.length; I--; ) {
            var H = this.dialog.height - G - J;
            this.panel[I].body.css("height", H - this.panel[I].padding * 2);
            this.menu.css("height", H - parseFloat(this.menu.css("padding-top")))
        }
    }
    ;
    C.prototype.addButtonPanel = function() {
        this.buttonpanel = AJS("div").addClass("dialog-button-panel");
        this.element.append(this.buttonpanel)
    }
    ;
    C.prototype.addPanel = function(J, G, I, H) {
        new E(this,J,G,I,H);
        this.recalcSize();
        return this
    }
    ;
    C.prototype.addHeader = function(H, G) {
        if (this.header) {
            this.header.remove()
        }
        this.header = AJS("h2").text(H || "").addClass("dialog-title");
        G && this.header.addClass(G);
        this.element.prepend(this.header);
        this.recalcSize();
        return this
    }
    ;
    C.prototype.addButton = function(H, G, I) {
        new A(this,H,G,I);
        this.recalcSize();
        return this
    }
    ;
    C.prototype.addLink = function(I, H, J, G) {
        new B(this,I,H,J,G);
        this.recalcSize();
        return this
    }
    ;
    C.prototype.gotoPanel = function(G) {
        this.panel[G.id || G].select()
    }
    ;
    C.prototype.getCurrentPanel = function() {
        return this.panel[this.curtab]
    }
    ;
    C.prototype.hide = function() {
        this.element.hide()
    }
    ;
    C.prototype.show = function() {
        this.element.show()
    }
    ;
    C.prototype.remove = function() {
        this.element.remove()
    }
    ;
    AJS.Dialog = function(I, G, J) {
        var H = {};
        if (!+I) {
            H = Object(I);
            I = H.width;
            G = H.height;
            J = H.id
        }
        this.height = G || 480;
        this.width = I || 640;
        this.id = J;
        H = AJS.$.extend({}, H, {
            width: this.width,
            height: this.height,
            id: this.id
        });
        this.popup = AJS.popup(H);
        this.popup.element.addClass("aui-dialog");
        this.page = [];
        this.curpage = 0;
        new C(this)
    }
    ;
    AJS.Dialog.prototype.addHeader = function(H, G) {
        this.page[this.curpage].addHeader(H, G);
        return this
    }
    ;
    AJS.Dialog.prototype.addButton = function(H, G, I) {
        this.page[this.curpage].addButton(H, G, I);
        return this
    }
    ;
    AJS.Dialog.prototype.addLink = function(I, H, J, G) {
        this.page[this.curpage].addLink(I, H, J, G);
        return this
    }
    ;
    AJS.Dialog.prototype.addSubmit = function(H, G) {
        this.page[this.curpage].addButton(H, G, "button-panel-submit-button");
        return this
    }
    ;
    AJS.Dialog.prototype.addCancel = function(H, G) {
        this.page[this.curpage].addLink(H, G, "button-panel-cancel-link");
        return this
    }
    ;
    AJS.Dialog.prototype.addButtonPanel = function() {
        this.page[this.curpage].addButtonPanel();
        return this
    }
    ;
    AJS.Dialog.prototype.addPanel = function(J, G, I, H) {
        this.page[this.curpage].addPanel(J, G, I, H);
        return this
    }
    ;
    AJS.Dialog.prototype.addPage = function(G) {
        new C(this,G);
        this.page[this.curpage].hide();
        this.curpage = this.page.length - 1;
        return this
    }
    ;
    AJS.Dialog.prototype.nextPage = function() {
        this.page[this.curpage++].hide();
        if (this.curpage >= this.page.length) {
            this.curpage = 0
        }
        this.page[this.curpage].show();
        return this
    }
    ;
    AJS.Dialog.prototype.prevPage = function() {
        this.page[this.curpage--].hide();
        if (this.curpage < 0) {
            this.curpage = this.page.length - 1
        }
        this.page[this.curpage].show();
        return this
    }
    ;
    AJS.Dialog.prototype.gotoPage = function(G) {
        this.page[this.curpage].hide();
        this.curpage = G;
        if (this.curpage < 0) {
            this.curpage = this.page.length - 1
        } else {
            if (this.curpage >= this.page.length) {
                this.curpage = 0
            }
        }
        this.page[this.curpage].show();
        return this
    }
    ;
    AJS.Dialog.prototype.getPanel = function(H, I) {
        var G = (I == null) ? this.curpage : H;
        if (I == null) {
            I = H
        }
        return this.page[G].panel[I]
    }
    ;
    AJS.Dialog.prototype.getPage = function(G) {
        return this.page[G]
    }
    ;
    AJS.Dialog.prototype.getCurrentPanel = function() {
        return this.page[this.curpage].getCurrentPanel()
    }
    ;
    AJS.Dialog.prototype.gotoPanel = function(I, H) {
        if (H != null) {
            var G = I.id || I;
            this.gotoPage(G)
        }
        this.page[this.curpage].gotoPanel(typeof H == "undefined" ? I : H)
    }
    ;
    AJS.Dialog.prototype.show = function() {
        this.popup.show();
        AJS.trigger("show.dialog", {
            dialog: this
        });
        return this
    }
    ;
    AJS.Dialog.prototype.hide = function() {
        this.popup.hide();
        AJS.trigger("hide.dialog", {
            dialog: this
        });
        return this
    }
    ;
    AJS.Dialog.prototype.remove = function() {
        this.popup.hide();
        this.popup.remove();
        AJS.trigger("remove.dialog", {
            dialog: this
        })
    }
    ;
    AJS.Dialog.prototype.disable = function() {
        this.popup.disable();
        return this
    }
    ;
    AJS.Dialog.prototype.enable = function() {
        this.popup.enable();
        return this
    }
    ;
    AJS.Dialog.prototype.get = function(O) {
        var H = []
          , N = this;
        var P = '#([^"][^ ]*|"[^"]*")';
        var Q = ":(\\d+)";
        var I = "page|panel|button|header";
        var J = "(?:(" + I + ")(?:" + P + "|" + Q + ")?|" + P + ")";
        var L = new RegExp("(?:^|,)\\s*" + J + "(?:\\s+" + J + ")?\\s*(?=,|$)","ig");
        (O + "").replace(L, function(b, R, a, S, Y, X, U, c, Z) {
            R = R && R.toLowerCase();
            var T = [];
            if (R == "page" && N.page[S]) {
                T.push(N.page[S]);
                R = X;
                R = R && R.toLowerCase();
                a = U;
                S = c;
                Y = Z
            } else {
                T = N.page
            }
            a = a && (a + "").replace(/"/g, "");
            U = U && (U + "").replace(/"/g, "");
            Y = Y && (Y + "").replace(/"/g, "");
            Z = Z && (Z + "").replace(/"/g, "");
            if (R || Y) {
                for (var W = T.length; W--; ) {
                    if (Y || (R == "panel" && (a || (!a && S == null)))) {
                        for (var V = T[W].panel.length; V--; ) {
                            if (T[W].panel[V].button.html() == Y || T[W].panel[V].button.html() == a || (R == "panel" && !a && S == null)) {
                                H.push(T[W].panel[V])
                            }
                        }
                    }
                    if (Y || (R == "button" && (a || (!a && S == null)))) {
                        for (var V = T[W].button.length; V--; ) {
                            if (T[W].button[V].item.html() == Y || T[W].button[V].item.html() == a || (R == "button" && !a && S == null)) {
                                H.push(T[W].button[V])
                            }
                        }
                    }
                    if (T[W][R] && T[W][R][S]) {
                        H.push(T[W][R][S])
                    }
                    if (R == "header" && T[W].header) {
                        H.push(T[W].header)
                    }
                }
            } else {
                H = H.concat(T)
            }
        });
        var M = {
            length: H.length
        };
        for (var K = H.length; K--; ) {
            M[K] = H[K];
            for (var G in H[K]) {
                if (!(G in M)) {
                    (function(R) {
                        M[R] = function() {
                            for (var S = this.length; S--; ) {
                                if (typeof this[S][R] == "function") {
                                    this[S][R].apply(this[S], arguments)
                                }
                            }
                        }
                    }
                    )(G)
                }
            }
        }
        return M
    }
    ;
    AJS.Dialog.prototype.updateHeight = function() {
        var G = 0;
        for (var H = 0; this.getPanel(H); H++) {
            if (this.getPanel(H).body.css({
                height: "auto",
                display: "block"
            }).outerHeight() > G) {
                G = this.getPanel(H).body.outerHeight()
            }
            if (H !== this.page[this.curpage].curtab) {
                this.getPanel(H).body.css({
                    display: "none"
                })
            }
        }
        for (H = 0; this.getPanel(H); H++) {
            this.getPanel(H).body.css({
                height: G || this.height
            })
        }
        this.page[0].menu.height(G);
        this.height = G + 87;
        this.popup.changeSize(undefined, G + 87)
    }
    ;
    AJS.Dialog.prototype.getCurPanel = function() {
        return this.getPanel(this.page[this.curpage].curtab)
    }
    ;
    AJS.Dialog.prototype.getCurPanelButton = function() {
        return this.getCurPanel().button
    }
}
)();
(function() {
    AJS.icons = AJS.icons || {};
    AJS.icons.addIcon = function(B, C) {
        AJS.icons[B] = function(E, D) {
            return A(C, E, D)
        }
    }
    ;
    AJS.icons.addIcon.init = function() {
        var D = this.className.split(" ")
          , B = D.length
          , C = this.className.match(/(^|\s)size-(\d+)(\s|$)/);
        C = C && +C[2];
        while (B--) {
            if (D[B] != "addIcon" && D[B]in AJS.icons) {
                AJS.icons[D[B]](this, C)
            }
        }
    }
    ;
    function A(E, C, B) {
        B = B || 24;
        var D = Raphael([C, B + 1, B + 1].concat(E));
        D.scale(B / 24, B / 24, 0, 0)
    }
}
)();
AJS.$(function() {
    AJS.$(".svg-icon").each(AJS.icons.addIcon.init)
});
AJS.icons.addIcon("generic", [{
    stroke: "none",
    fill: "#999",
    type: "path",
    path: "M22.465,8.464c1.944,1.944,1.944,5.126,0,7.07l-6.93,6.93c-1.944,1.945-5.126,1.945-7.07,0l-6.929-6.93c-1.945-1.943-1.945-5.125,0-7.07l6.929-6.93c1.944-1.944,5.126-1.944,7.07,0L22.465,8.464z"
}, {
    type: "path",
    stroke: "none",
    fill: "90-#999996-#a1a19f:20-#b8b8b7:70-#ccc",
    path: "M9.172,2.242L9.172,2.242l-6.929,6.93C1.491,9.923,1.077,10.927,1.077,12c0,1.072,0.414,2.076,1.166,2.828l6.929,6.93c0.751,0.752,1.756,1.166,2.828,1.166s2.076-0.414,2.828-1.166l6.93-6.93c0.751-0.752,1.165-1.756,1.165-2.828c0-1.072-0.414-2.076-1.165-2.828l-6.93-6.93C13.269,0.682,10.731,0.682,9.172,2.242z"
}, {
    type: "path",
    stroke: "none",
    fill: "270-#999996-#a1a19f:20-#b8b8b7:70-#ccc",
    path: "M7.181,5.869 7.181,17.95 16.974,17.95 16.974,9.205 13.638,5.869"
}, {
    type: "path",
    stroke: "none",
    fill: "#fff",
    path: "M12.724,9.619v-2.75H8.181V16.95h7.793v-6.832h-2.75C12.946,10.119,12.724,9.894,12.724,9.619zM13.724,7.369c0,0.521,0,1.32,0,1.75c0.428,0,1.229,0,1.75,0L13.724,7.369z"
}]);
AJS.icons.addIcon("error", [{
    type: "path",
    stroke: "none",
    fill: "#c00",
    path: "M7.857,22L2,16.143 2,7.857 7.857,1.999 16.143,1.999 22,7.857 22,16.143 16.143,22z"
}, {
    type: "path",
    stroke: "none",
    fill: "90-#c00-#d50909-#ed2121-#f33",
    path: "M8.271,2.999C7.771,3.5,3.501,7.77,3,8.271c0,0.708,0,6.748,0,7.457c0.501,0.5,4.771,4.77,5.271,5.271c0.708,0,6.749,0,7.457,0c0.501-0.502,4.771-4.771,5.271-5.271c0-0.709,0-6.749,0-7.457c-0.501-0.501-4.771-4.771-5.271-5.272C15.021,2.999,8.979,2.999,8.271,2.999z"
}, {
    type: "rect",
    x: 5.318,
    y: 9.321,
    fill: "270-#c00-#d50909-#ed2121-#f33",
    stroke: "none",
    width: 13.363,
    height: 5.356
}, {
    type: "rect",
    x: 6.318,
    y: 10.321,
    fill: "#fff",
    stroke: "none",
    width: 11.363,
    height: 3.356
}]);
AJS.icons.addIcon("success", [{
    type: "path",
    stroke: "none",
    path: "M22,18.801C22,20.559,20.561,22,18.799,22H5.201C3.439,22,2,20.559,2,18.801V5.199C2,3.44,3.439,2,5.201,2h13.598C20.561,2,22,3.44,22,5.199V18.801z",
    fill: "#393"
}, {
    type: "path",
    path: "M5.201,3C3.987,3,3,3.986,3,5.199v13.602C3,20.014,3.987,21,5.201,21h13.598C20.013,21,21,20.014,21,18.801V5.199C21,3.986,20.013,3,18.799,3H5.201z",
    stroke: "none",
    fill: "90-#393-#33a23c-#3c6"
}, {
    type: "path",
    path: "M10.675,12.158c-0.503-0.57-1.644-1.862-1.644-1.862l-3.494,2.833l3.663,5.313l4.503,1.205L17.73,4.624l-4.361-0.056C13.369,4.568,11.424,10.047,10.675,12.158z",
    stroke: "none",
    fill: "270-#393-#33a23c-#3c6"
}, {
    type: "path",
    path: "M14.072,5.577 11.05,14.092 8.917,11.677 6.886,13.324 9.815,17.57 12.997,18.422 16.432,5.607",
    stroke: "none",
    fill: "#fff"
}]);
AJS.icons.addIcon("hint", [{
    type: "path",
    path: "M22.465,8.464c1.944,1.944,1.944,5.126,0,7.07l-6.93,6.93c-1.944,1.945-5.126,1.945-7.07,0l-6.929-6.93c-1.945-1.943-1.945-5.125,0-7.07l6.929-6.93c1.944-1.944,5.126-1.944,7.07,0L22.465,8.464z",
    stroke: "none",
    fill: "#009898"
}, {
    type: "path",
    path: "M9.172,2.242L9.172,2.242l-6.929,6.93C1.491,9.923,1.077,10.927,1.077,12c0,1.072,0.414,2.076,1.166,2.828l6.929,6.93c0.751,0.752,1.756,1.166,2.828,1.166s2.076-0.414,2.828-1.166l6.93-6.93c0.751-0.752,1.165-1.756,1.165-2.828c0-1.072-0.414-2.076-1.165-2.828l-6.93-6.93C13.269,0.682,10.731,0.682,9.172,2.242z",
    stroke: "none",
    fill: "270-#099-#00a2a2-#00baba-#0cc"
}, {
    type: "path",
    path: "M12,5.077c-2.679,0-4.857,2.179-4.857,4.857c0,1.897,0.741,2.864,1.337,3.639c0.385,0.502,0.662,0.863,0.761,1.443l0.045,0.264v2.25c0,0.854,0.693,1.547,1.546,1.547h2.338c0.852,0,1.545-0.693,1.545-1.547v-2.254l0.044-0.258c0.1-0.582,0.377-0.943,0.762-1.443c0.596-0.777,1.338-1.743,1.338-3.641C16.857,7.255,14.679,5.077,12,5.077z",
    stroke: "none",
    fill: "270-#099-#00a2a2-#00baba-#0cc"
}, {
    type: "path",
    path: "M10.227,14.849c-0.331-1.936-2.084-2.197-2.084-4.915c0-2.131,1.727-3.857,3.857-3.857c2.13,0,3.857,1.727,3.857,3.857c0,2.717-1.754,2.979-2.085,4.915H10.227z M10.285,15.849v1.682c0,0.301,0.246,0.547,0.546,0.547h2.338c0.3,0,0.545-0.246,0.545-0.547v-1.682H10.285z",
    stroke: "none",
    fill: "#fff"
}]);
AJS.icons.addIcon("info", [{
    type: "circle",
    cx: 12,
    cy: 12,
    r: 10,
    stroke: "none",
    fill: "#06c"
}, {
    type: "path",
    path: "M3,12c0,4.962,4.037,9,9,9s9-4.038,9-9s-4.037-9-9-9S3,7.037,3,12z",
    stroke: "none",
    fill: "90-#06c-#006FD5-#0087ED-#0099FF"
}, {
    type: "path",
    path: "M9.409,7.472c0,0.694,0.282,1.319,0.729,1.785c-0.288,0-0.729,0-0.729,0v9.425h5.182V9.257c0,0-0.44,0-0.729,0c0.446-0.466,0.729-1.09,0.729-1.785c0-1.429-1.162-2.591-2.591-2.591S9.409,6.043,9.409,7.472z",
    stroke: "none",
    fill: "270-#06c-#006FD5-#0087ED-#0099FF"
}, {
    type: "path",
    path: "M13.591,10.257v7.425h-3.182v-7.425H13.591z M12,9.063c0.879,0,1.591-0.712,1.591-1.591S12.879,5.881,12,5.881s-1.591,0.712-1.591,1.591S11.121,9.063,12,9.063z",
    stroke: "none",
    fill: "#fff"
}]);
AJS.icons.addIcon("warning", [{
    type: "path",
    path: "M8.595,4.368c1.873-3.245,4.938-3.245,6.811,0c1.873,3.245,4.938,8.554,6.812,11.798c1.874,3.244,0.342,5.898-3.405,5.898c-3.746,0-9.876,0-13.624,0c-3.746,0-5.278-2.654-3.405-5.898C3.656,12.922,6.721,7.613,8.595,4.368z",
    stroke: "none",
    fill: "#f90"
}, {
    type: "path",
    path: "M9.461,4.868L2.649,16.666c-0.72,1.246-0.863,2.371-0.404,3.166s1.504,1.232,2.943,1.232h13.624c1.439,0,2.485-0.438,2.944-1.232s0.315-1.92-0.405-3.166L14.539,4.868C13.82,3.622,12.918,2.935,12,2.935S10.181,3.621,9.461,4.868z",
    stroke: "none",
    fill: "90-#f90-#ffa209-#ffba21-#fc3"
}, {
    type: "path",
    path: "M9.274,6.187c0,0,0.968,9.68,0.986,9.862c-0.532,0.476-0.881,1.148-0.881,1.916c0,1.433,1.165,2.598,2.597,2.598c1.433,0,2.598-1.165,2.598-2.598c0-0.77-0.351-1.441-0.883-1.918c0.018-0.184,0.988-9.86,0.988-9.86H9.274z",
    stroke: "none",
    fill: "270-#f90-#ffa209-#ffba21-#fc3"
}, {
    type: "path",
    path: "M11.177,15.171l-0.798-7.984h3.194l-0.8,7.984H11.177z M11.976,16.368c-0.882,0-1.597,0.716-1.597,1.597c0,0.883,0.715,1.598,1.597,1.598c0.881,0,1.598-0.715,1.598-1.598C13.573,17.084,12.856,16.368,11.976,16.368z",
    stroke: "none",
    fill: "#fff"
}]);
AJS.icons.addIcon("close", [{
    type: "path",
    path: "M15.535,12l4.95-4.95c0.977-0.977,0.977-2.559,0-3.536s-2.56-0.977-3.536,0L12,8.464l-4.95-4.95c-0.977-0.977-2.559-0.977-3.536,0s-0.977,2.559,0,3.536L8.464,12l-4.95,4.95c-0.977,0.977-0.977,2.559,0,3.535s2.559,0.977,3.536,0L12,15.535l4.949,4.949c0.977,0.977,2.56,0.977,3.536,0s0.977-2.559,0-3.535L15.535,12z",
    stroke: "none",
    fill: "#999"
}, {
    type: "path",
    path: "M18.718,20.217c-0.401,0-0.777-0.156-1.062-0.439L12,14.121l-5.657,5.656c-0.284,0.283-0.66,0.439-1.061,0.439c-0.4,0-0.777-0.156-1.061-0.439c-0.283-0.283-0.439-0.66-0.439-1.061s0.156-0.777,0.439-1.061L9.878,12L4.222,6.343c-0.283-0.284-0.439-0.66-0.439-1.061c0-0.4,0.156-0.777,0.439-1.061c0.284-0.283,0.66-0.439,1.061-0.439c0.401,0,0.777,0.156,1.061,0.439L12,9.878l5.656-5.657c0.284-0.283,0.66-0.439,1.062-0.439c0.4,0,0.776,0.156,1.061,0.439c0.283,0.284,0.439,0.66,0.439,1.061c0,0.401-0.156,0.777-0.439,1.061L14.121,12l5.657,5.657c0.283,0.283,0.439,0.66,0.439,1.061s-0.156,0.777-0.439,1.061C19.494,20.061,19.118,20.217,18.718,20.217L18.718,20.217z",
    stroke: "none",
    fill: "90-#999996-#a1a19f-#b8b8b7-#ccc"
}]);
(function(A) {
    AJS.InlineDialog = function(T, H, K, I) {
        if (typeof H === "undefined") {
            H = String(Math.random()).replace(".", "");
            if (A("#inline-dialog-" + H + ", #arrow-" + H + ", #inline-dialog-shim-" + H).length) {
                throw "GENERATED_IDENTIFIER_NOT_UNIQUE"
            }
        }
        var R = A.extend(false, AJS.InlineDialog.opts, I);
        var E;
        var J;
        var b;
        var N = false;
        var S = false;
        var Z = false;
        var a;
        var P;
        var B = A('<div id="inline-dialog-' + H + '" class="aui-inline-dialog"><div class="contents"></div><div id="arrow-' + H + '" class="arrow"></div></div>');
        var G = A("#arrow-" + H, B);
        var Y = B.find(".contents");
        Y.css("width", R.width + "px");
        Y.mouseover(function(c) {
            clearTimeout(J);
            B.unbind("mouseover")
        }).mouseout(function() {
            W()
        });
        var V = function() {
            if (!E) {
                E = {
                    popup: B,
                    hide: function() {
                        W(0)
                    },
                    id: H,
                    show: function() {
                        Q()
                    },
                    reset: function() {
                        function d(f, e) {
                            f.css(e.popupCss);
                            if (window.Raphael) {
                                if (!f.arrowCanvas) {
                                    f.arrowCanvas = Raphael("arrow-" + H, 16, 16)
                                }
                                var g = R.getArrowPath
                                  , h = A.isFunction(g) ? g(e) : g;
                                f.arrowCanvas.path(h).attr(R.getArrowAttributes())
                            }
                            G.css(e.arrowCss)
                        }
                        var c = R.calculatePositions(B, P, a, R);
                        d(B, c);
                        B.fadeIn(R.fadeTime, function() {});
                        if (R.displayShadow) {
                            if (B.shadow) {
                                B.shadow.remove()
                            }
                            B.shadow = Raphael.shadow(0, 0, Y.width(), Y.height(), {
                                target: Y
                            }).hide().fadeIn(R.fadeTime)
                        }
                        if (AJS.$.browser.msie) {
                            if (A("#inline-dialog-shim-" + H).length == 0) {
                                A(B).prepend(A('<iframe class = "inline-dialog-shim" id="inline-dialog-shim-' + H + '" frameBorder="0" src="javascript:false;"></iframe>'))
                            }
                            A("#inline-dialog-shim-" + H).css({
                                width: Y.outerWidth(),
                                height: Y.outerHeight()
                            })
                        }
                    }
                }
            }
            return E
        };
        var Q = function() {
            if (B.is(":visible")) {
                return
            }
            b = setTimeout(function() {
                if (!Z || !S) {
                    return
                }
                R.addActiveClass && A(T).addClass("active");
                N = true;
                F();
                AJS.InlineDialog.current = V();
                AJS.$(document).trigger("showLayer", ["inlineDialog", V()]);
                V().reset()
            }, R.showDelay)
        };
        var W = function(c) {
            S = false;
            if (N && R.preHideCallback.call(B[0].popup)) {
                c = (c == null) ? R.hideDelay : c;
                clearTimeout(J);
                clearTimeout(b);
                if (c != null) {
                    J = setTimeout(function() {
                        U();
                        R.addActiveClass && A(T).removeClass("active");
                        B.fadeOut(R.fadeTime, function() {
                            R.hideCallback.call(B[0].popup)
                        });
                        if (R.displayShadow) {
                            B.shadow.remove();
                            B.shadow = null
                        }
                        B.arrowCanvas.remove();
                        B.arrowCanvas = null;
                        N = false;
                        S = false;
                        AJS.$(document).trigger("hideLayer", ["inlineDialog", V()]);
                        AJS.InlineDialog.current = null;
                        if (!R.cacheContent) {
                            Z = false;
                            O = false
                        }
                    }, c)
                }
            }
        };
        var X = function(g, d) {
            var c;
            R.upfrontCallback.call({
                popup: B,
                hide: function() {
                    W(0)
                },
                id: H,
                show: function() {
                    Q()
                }
            });
            B.each(function() {
                if (typeof this.popup != "undefined") {
                    this.popup.hide()
                }
            });
            if (R.closeOthers) {
                AJS.$(".aui-inline-dialog").each(function() {
                    this.popup.hide()
                })
            }
            if (!g) {
                c = A(d);
                a = {
                    x: c.offset().left,
                    y: c.offset().top
                };
                P = {
                    target: c
                }
            } else {
                a = {
                    x: g.pageX,
                    y: g.pageY
                };
                P = {
                    target: A(g.target)
                }
            }
            if (!N) {
                clearTimeout(b)
            }
            S = true;
            var f = function() {
                O = false;
                Z = true;
                R.initCallback.call({
                    popup: B,
                    hide: function() {
                        W(0)
                    },
                    id: H,
                    show: function() {
                        Q()
                    }
                });
                Q()
            };
            if (!O) {
                O = true;
                if (A.isFunction(K)) {
                    K(Y, d, f)
                } else {
                    AJS.$.get(K, function(h, e, i) {
                        Y.html(R.responseHandler(h, e, i));
                        Z = true;
                        R.initCallback.call({
                            popup: B,
                            hide: function() {
                                W(0)
                            },
                            id: H,
                            show: function() {
                                Q()
                            }
                        });
                        Q()
                    })
                }
            }
            clearTimeout(J);
            if (!N) {
                Q()
            }
            return false
        };
        B[0].popup = V();
        var O = false;
        var M = false;
        var L = function() {
            if (!M) {
                A(R.container).append(B);
                M = true
            }
        };
        if (R.onHover) {
            if (R.useLiveEvents) {
                A(T).live("mousemove", function(c) {
                    L();
                    X(c, this)
                }).live("mouseout", function() {
                    W()
                })
            } else {
                A(T).mousemove(function(c) {
                    L();
                    X(c, this)
                }).mouseout(function() {
                    W()
                })
            }
        } else {
            if (!R.noBind) {
                if (R.useLiveEvents) {
                    A(T).live("click", function(c) {
                        L();
                        X(c, this);
                        return false
                    }).live("mouseout", function() {
                        W()
                    })
                } else {
                    A(T).click(function(c) {
                        L();
                        X(c, this);
                        return false
                    }).mouseout(function() {
                        W()
                    })
                }
            }
        }
        var D = false;
        var C = H + ".inline-dialog-check";
        var F = function() {
            if (!D) {
                A("body").bind("click." + C, function(d) {
                    var c = A(d.target);
                    if (c.closest("#inline-dialog-" + H + " .contents").length === 0) {
                        W(0)
                    }
                });
                D = true
            }
        };
        var U = function() {
            if (D) {
                A("body").unbind("click." + C)
            }
            D = false
        };
        B.show = function(c) {
            if (c) {
                c.stopPropagation()
            }
            L();
            X(null, T)
        }
        ;
        B.hide = function() {
            W(0)
        }
        ;
        B.refresh = function() {
            if (N) {
                V().reset()
            }
        }
        ;
        B.getOptions = function() {
            return R
        }
        ;
        return B
    }
    ;
    AJS.InlineDialog.opts = {
        onTop: false,
        responseHandler: function(C, B, D) {
            return C
        },
        closeOthers: true,
        isRelativeToMouse: false,
        addActiveClass: true,
        onHover: false,
        useLiveEvents: false,
        noBind: false,
        fadeTime: 100,
        hideDelay: 10000,
        showDelay: 0,
        width: 300,
        offsetX: 0,
        offsetY: 10,
        container: "body",
        cacheContent: true,
        displayShadow: true,
        preHideCallback: function() {
            return true
        },
        hideCallback: function() {},
        initCallback: function() {},
        upfrontCallback: function() {},
        calculatePositions: function(C, J, S, N) {
            var K;
            var U;
            var Q;
            var G = -7;
            var H;
            var L;
            var T = J.target.offset();
            var O = parseInt(J.target.css("padding-left")) + parseInt(J.target.css("padding-right"));
            var B = J.target.width() + O;
            var E = T.left + B / 2;
            var P = (window.pageYOffset || document.documentElement.scrollTop) + A(window).height();
            var F = 10;
            Q = T.top + J.target.height() + N.offsetY;
            K = T.left + N.offsetX;
            var I = T.top > C.height();
            var D = (Q + C.height()) < P;
            L = (!D && I) || (N.onTop && I);
            var M = A(window).width() - (K + N.width + F);
            if (L) {
                Q = T.top - C.height() - 8;
                var R = N.displayShadow ? (AJS.$.browser.msie ? 10 : 9) : 0;
                G = C.height() - R
            }
            H = E - K;
            if (N.isRelativeToMouse) {
                if (M < 0) {
                    U = F;
                    K = "auto";
                    H = S.x - (A(window).width() - N.width)
                } else {
                    K = S.x - 20;
                    U = "auto";
                    H = S.x - K
                }
            } else {
                if (M < 0) {
                    U = F;
                    K = "auto";
                    H = E - (A(window).width() - N.width)
                } else {
                    if (N.width <= B / 2) {
                        H = N.width / 2;
                        K = E - N.width / 2
                    }
                }
            }
            return {
                displayAbove: L,
                popupCss: {
                    left: K,
                    right: U,
                    top: Q
                },
                arrowCss: {
                    position: "absolute",
                    left: H,
                    right: "auto",
                    top: G
                }
            }
        },
        getArrowPath: function(B) {
            return B.displayAbove ? "M0,8L8,16,16,8" : "M0,8L8,0,16,8"
        },
        getArrowAttributes: function() {
            return {
                fill: "#fff",
                stroke: "#bbb"
            }
        }
    }
}
)(jQuery);
AJS.warnAboutFirebug = function(B) {
    if (!AJS.Cookie.read("COOKIE_FB_WARNING") && window.console && window.console.firebug) {
        if (!B) {
            B = "Firebug is known to cause performance problems with Atlassian products. Try disabling it, if you notice any issues."
        }
        var A = AJS.$("<div id='firebug-warning'><p>" + B + "</p><a class='close'>Close</a></div>");
        AJS.$(".close", A).click(function() {
            A.slideUp("fast");
            AJS.Cookie.save("COOKIE_FB_WARNING", "true")
        });
        A.prependTo(AJS.$("body"))
    }
}
;
AJS.inlineHelp = function() {
    AJS.$(".icon-inline-help").click(function() {
        var A = AJS.$(this).siblings(".field-help");
        if (A.hasClass("hidden")) {
            A.removeClass("hidden")
        } else {
            A.addClass("hidden")
        }
    })
}
;
(function() {
    AJS.messages = {
        setup: function() {
            AJS.messages.createMessage("generic");
            AJS.messages.createMessage("error");
            AJS.messages.createMessage("warning");
            AJS.messages.createMessage("info");
            AJS.messages.createMessage("success");
            AJS.messages.createMessage("hint");
            AJS.messages.makeCloseable()
        },
        makeCloseable: function(A) {
            AJS.$(A || "div.aui-message.closeable").each(function() {
                var C = AJS.$(this)
                  , B = AJS.$('<span class="aui-icon icon-close" role="button" tabindex="0"></span>').click(function() {
                    C.closeMessage()
                }).keypress(function(D) {
                    if ((D.which === AJS.$.ui.keyCode.ENTER) || (D.which === AJS.$.ui.keyCode.SPACE)) {
                        C.closeMessage();
                        D.preventDefault()
                    }
                });
                C.append(B);
                B.each(AJS.icons.addIcon.init)
            })
        },
        template: '<div class="aui-message {type} {closeable} {shadowed}"><p class="title"><span class="aui-icon icon-{type}"></span><strong>{title}</strong></p>{body}</div><!-- .aui-message -->',
        createMessage: function(A) {
            AJS.messages[A] = function(D, F) {
                var E = this.template, C, B;
                if (!F) {
                    F = D;
                    D = "#aui-message-bar"
                }
                F.closeable = (F.closeable == false) ? false : true;
                F.shadowed = (F.shadowed == false) ? false : true;
                C = AJS.$(AJS.template(E).fill({
                    type: A,
                    closeable: F.closeable ? "closeable" : "",
                    shadowed: F.shadowed ? "shadowed" : "",
                    title: F.title || "",
                    "body:html": F.body || ""
                }).toString());
                if (F.id) {
                    if (/[#\'\"\.\s]/g.test(F.id)) {
                        AJS.log("AJS.Messages error: ID rejected, must not include spaces, hashes, dots or quotes.")
                    } else {
                        C.attr("id", F.id)
                    }
                }
                B = F.insert || "append";
                if (B === "prepend") {
                    C.prependTo(D)
                } else {
                    C.appendTo(D)
                }
                F.closeable && AJS.messages.makeCloseable(C)
            }
        }
    };
    AJS.$.fn.closeMessage = function() {
        var A = AJS.$(this);
        if (A.hasClass("aui-message", "closeable")) {
            A.trigger("messageClose", [this]).remove()
        }
    }
    ;
    AJS.$(function() {
        AJS.messages.setup()
    })
}
)();
(function() {
    var B, G, E, C, D = /#.*/, F = "active-tab", A = "active-pane";
    AJS.tabs = {
        setup: function() {
            B = AJS.$("div.aui-tabs:not(.aui-tabs-disabled)");
            for (var H = 0, I = B.length; H < I; H++) {
                G = AJS.$("ul.tabs-menu", B[H]);
                AJS.$("a", G).click(function(J) {
                    AJS.tabs.change(AJS.$(this), J);
                    J && J.preventDefault()
                })
            }
            AJS.$(".aui-tabs.vertical-tabs").find("a").each(function(J) {
                E = AJS.$(this);
                if (!E.attr("title")) {
                    C = E.children("strong:first");
                    if (AJS.isClipped(C)) {
                        E.attr("title", E.text())
                    }
                }
            })
        },
        change: function(I, J) {
            var H = AJS.$(I.attr("href").match(D)[0]);
            H.addClass(A).siblings().removeClass(A);
            I.parent("li.menu-item").addClass(F).siblings().removeClass(F);
            I.trigger("tabSelect", {
                tab: I,
                pane: H
            })
        }
    };
    AJS.$(AJS.tabs.setup)
}
)();
AJS.template = (function(G) {
    var J = /\{([^\}]+)\}/g
      , D = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g
      , H = /([^\\])'/g
      , F = function(O, N, P, L) {
        var M = P;
        N.replace(D, function(S, R, Q, U, T) {
            R = R || U;
            if (M) {
                if (R + ":html"in M) {
                    M = M[R + ":html"];
                    L = true
                } else {
                    if (R in M) {
                        M = M[R]
                    }
                }
                if (T && typeof M == "function") {
                    M = M()
                }
            }
        });
        if (M == null || M == P) {
            M = O
        }
        M = String(M);
        if (!L) {
            M = E.escape(M)
        }
        return M
    }
      , B = function(L) {
        this.template = this.template.replace(J, function(N, M) {
            return F(N, M, L, true)
        });
        return this
    }
      , K = function(L) {
        this.template = this.template.replace(J, function(N, M) {
            return F(N, M, L)
        });
        return this
    }
      , C = function() {
        return this.template
    };
    var E = function(M) {
        function L() {
            return L.template
        }
        L.template = String(M);
        L.toString = L.valueOf = C;
        L.fill = K;
        L.fillHtml = B;
        return L
    }
      , A = {}
      , I = [];
    E.load = function(L) {
        L = String(L);
        if (!A.hasOwnProperty(L)) {
            I.length >= 1000 && delete A[I.shift()];
            I.push(L);
            A[L] = G("script[title='" + L.replace(H, "$1\\'") + "']")[0].text
        }
        return this(A[L])
    }
    ;
    E.escape = AJS.escapeHtml;
    return E
}
)(window.jQuery);
(function(A, E) {
    var D = navigator.platform.indexOf("Mac") !== -1;
    var B = /^(backspace|tab|r(ight|eturn)|s(hift|pace|croll)|c(trl|apslock)|alt|pa(use|ge(up|down))|e(sc|nd)|home|left|up|d(el|own)|insert|f\d\d?|numlock|meta)/i;
    A.whenIType = function(P) {
        var N = []
          , O = E.Callbacks();
        function G(Q) {
            if (!AJS.popup.current && O) {
                O.fire(Q)
            }
        }
        function H(Q) {
            Q.preventDefault()
        }
        function M(Q) {
            var R = Q && Q.split ? E.trim(Q).split(" ") : [Q];
            E.each(R, function() {
                I(this)
            })
        }
        function K(R) {
            var Q = R.length;
            while (Q--) {
                if (R[Q].length > 1 && R[Q] !== "space") {
                    return true
                }
            }
            return false
        }
        function I(S) {
            var R = S instanceof Array ? S : L(S.toString());
            var Q = K(R) ? "keydown" : "keypress";
            N.push(R);
            E(document).bind(Q, R, G);
            E(document).bind(Q + " keyup", R, H)
        }
        function L(S) {
            var U = [], T = "", R, Q;
            while (S.length) {
                if (R = S.match(/^(ctrl|meta|shift|alt)\+/i)) {
                    T += R[0];
                    S = S.substring(R[0].length)
                } else {
                    if (Q = S.match(B)) {
                        U.push(T + Q[0]);
                        S = S.substring(Q[0].length);
                        T = ""
                    } else {
                        U.push(T + S[0]);
                        S = S.substring(1);
                        T = ""
                    }
                }
            }
            return U
        }
        function J(R) {
            var S = E(R)
              , U = S.attr("title") || ""
              , T = N.slice();
            var Q = !S.data("kbShortcutAppended");
            while (T.length) {
                U = F(T.shift().slice(), U, Q);
                Q = false
            }
            if (D) {
                U = U.replace(/Meta/ig, "\u2318").replace(/Shift/ig, "\u21E7")
            }
            S.attr("title", U);
            S.data("kbShortcutAppended", true)
        }
        function F(S, R, Q) {
            if (Q) {
                R += " ( " + AJS.format("Type \'\'{0}\'\'", S.shift())
            } else {
                R = R.replace(/\)$/, "");
                R += AJS.format("OR \'\'{0}\'\'", S.shift())
            }
            E.each(S, function() {
                R += " " + AJS.format("then \'\'{0}\'\'", this)
            });
            R += " )";
            return R
        }
        M(P);
        return A.whenIType.makeShortcut(O, M, J, G, H)
    }
    ;
    A.whenIType.makeShortcut = function(F, I, H, J, K) {
        function G(L) {
            return function(M, O) {
                O = O || {};
                var N = O.focusedClass || "focused";
                var P = O.hasOwnProperty("wrapAround") ? O.wrapAround : true;
                var Q = O.hasOwnProperty("escToCancel") ? O.escToCancel : true;
                F.add(function() {
                    var T = E(M)
                      , S = T.filter("." + N)
                      , R = S.length === 0 ? undefined : {
                        transition: true
                    };
                    if (Q) {
                        E(document).one("keydown", function(U) {
                            if (U.keyCode === E.ui.keyCode.ESCAPE && S) {
                                S.removeClass(N)
                            }
                        })
                    }
                    if (S.length) {
                        S.removeClass(N)
                    }
                    S = L(S, T, P);
                    if (S && S.length > 0) {
                        S.addClass(N);
                        S.moveTo(R);
                        if (S.is("a")) {
                            S.focus()
                        } else {
                            S.find("a:first").focus()
                        }
                    }
                });
                return this
            }
        }
        return {
            moveToNextItem: G(function(N, O, M) {
                var L;
                if (M && N.length === 0) {
                    return O.eq(0)
                } else {
                    L = E.inArray(N.get(0), O);
                    if (L < O.length - 1) {
                        L = L + 1;
                        return O.eq(L)
                    } else {
                        if (M) {
                            return O.eq(0)
                        }
                    }
                }
                return N
            }),
            moveToPrevItem: G(function(N, O, M) {
                var L;
                if (M && N.length === 0) {
                    return O.filter(":last")
                } else {
                    L = E.inArray(N.get(0), O);
                    if (L > 0) {
                        L = L - 1;
                        return O.eq(L)
                    } else {
                        if (M) {
                            return O.filter(":last")
                        }
                    }
                }
                return N
            }),
            click: function(L) {
                H(L);
                F.add(function() {
                    var M = E(L);
                    if (M.length > 0) {
                        M.click()
                    }
                });
                return this
            },
            goTo: function(L) {
                F.add(function() {
                    window.location.href = L
                });
                return this
            },
            followLink: function(L) {
                H(L);
                F.add(function() {
                    var M = E(L)[0];
                    if (M && {
                        a: true,
                        link: true
                    }[M.nodeName.toLowerCase()]) {
                        window.location.href = M.href
                    }
                });
                return this
            },
            execute: function(M) {
                var L = this;
                F.add(function() {
                    M.apply(L, arguments)
                });
                return this
            },
            evaluate: function(L) {
                L.call(this)
            },
            moveToAndClick: function(L) {
                H(L);
                F.add(function() {
                    var M = E(L);
                    if (M.length > 0) {
                        M.click();
                        M.moveTo()
                    }
                });
                return this
            },
            moveToAndFocus: function(L) {
                H(L);
                F.add(function(N) {
                    var M = jQuery(L);
                    if (M.length > 0) {
                        M.focus();
                        M.moveTo && M.moveTo();
                        if (M.is(":input")) {
                            N.preventDefault()
                        }
                    }
                });
                return this
            },
            or: function(L) {
                I(L);
                return this
            },
            unbind: function() {
                E(document).unbind("keydown keypress", J).unbind("keydown keypress keyup", K)
            }
        }
    }
    ;
    A.whenIType.fromJSON = function(H, G) {
        var F = [];
        if (H) {
            E.each(H, function(J, K) {
                var I = K.op, N = K.param, M;
                if (I === "execute" || I === "evaluate") {
                    M = [new Function(N)]
                } else {
                    if (/^\[[^\]\[]*,[^\]\[]*\]$/.test(N)) {
                        try {
                            M = JSON.parse(N)
                        } catch (L) {
                            C("When using a parameter array, array must be in strict JSON format: " + N)
                        }
                        if (!E.isArray(M)) {
                            C("Badly formatted shortcut parameter. String or JSON Array of parameters required: " + N)
                        }
                    } else {
                        M = [N]
                    }
                }
                E.each(K.keys, function() {
                    var P = this;
                    if (G && D) {
                        P = E.map(this, function(Q) {
                            return Q.replace(/ctrl/i, "meta")
                        })
                    }
                    var O = AJS.whenIType(P);
                    O[I].apply(O, M);
                    F.push(O)
                })
            })
        }
        return F
    }
    ;
    function C(F) {
        if (console && console.error) {
            console.error(F)
        } else {
            AJS.log(F)
        }
    }
    E(document).bind("iframeAppended", function(G, F) {
        E(F).load(function() {
            var H = E(F).contents();
            H.bind("keyup keydown keypress", function(I) {
                if (E.browser.safari && I.type === "keypress") {
                    return
                }
                if (!E(I.target).is(":input")) {
                    E.event.trigger(I, arguments, document, true)
                }
            })
        })
    })
}
)(AJS, AJS.$);
jQuery.fn.isDirty = function() {
    var B, A = [];
    window.onbeforeunload = function() {
        var C = window.onbeforeunload;
        if (B !== false) {
            jQuery.each(A, function() {
                if (this.initVal !== AJS.$(this).val()) {
                    B = true;
                    return false
                }
            })
        }
        if (B) {
            window.onbeforeunload = null;
            window.setTimeout(function() {
                jQuery(document).bind("mousemove", function() {
                    window.onbeforeunload = C;
                    jQuery(document).unbind("mousemove", arguments.callee)
                })
            }, 1000);
            B = void (0);
            return AJS.params.dirtyMessage || ""
        }
    }
    ;
    return function(D) {
        if (this.length === 0) {
            return
        }
        function C(F) {
            var E = jQuery(this);
            jQuery.fn.isDirty.fieldInFocus = E;
            if (jQuery.inArray(this, A) === -1) {
                this.initVal = E.val();
                A.push(this);
                E.die(F.type, C)
            }
        }
        jQuery(":not(:input)").live("click", function() {
            delete jQuery.fn.isDirty.fieldInFocus
        });
        jQuery(":input[type != hidden]", this.selector).bind("keydown", C).bind("keypress", C).bind("click", C);
        jQuery(D.ignoreUnloadFromElems).live("mousedown", function() {
            B = false
        });
        this.each(function() {
            this.onsubmit = function(E) {
                return function() {
                    B = false;
                    if (E) {
                        return E.apply(this, arguments)
                    }
                }
            }(this.onsubmit);
            AJS.$(this).submit(function() {
                B = false
            })
        });
        return this
    }
}();
(function(A) {
    A.fn.progressBar = function(I, L) {
        var C = this;
        var F = {
            height: "1em",
            showPercentage: true
        };
        var B = A.extend(F, L);
        var J = C.attr("id") + "-incomplete-bar";
        var D = C.attr("id") + "-complete-bar";
        var K = C.attr("id") + "-percent-complete-text";
        if (A("#" + J).length == 0) {
            var E = A(document.createElement("div"));
            E.attr("id", J);
            E.css({
                width: "90%",
                border: "solid 1px #ccc",
                "float": "left",
                "margin-right": "0.5em"
            });
            E.addClass("progress-background-color");
            var G = A(document.createElement("div"));
            G.attr("id", D);
            G.addClass("progress-fill-color");
            G.css({
                height: B.height,
                width: I + "%"
            });
            var H = A(document.createElement("span"));
            H.attr("id", K);
            H.addClass("percent-complete-text");
            H.html(I + "%");
            E.append(G);
            C.append(E);
            if (B.showPercentage) {
                C.append(H)
            }
        } else {
            A("#" + D).css("width", I + "%");
            A("#" + K).html(I + "%")
        }
    }
}
)(jQuery);
(function(A) {
    if (document.selection) {
        var B = function(C) {
            return C.replace(/\u000D/g, "")
        };
        A.fn.selection = function(F) {
            var E = this[0];
            this.focus();
            if (!E) {
                return false
            }
            if (F == null) {
                return document.selection.createRange().text
            } else {
                var D = E.scrollTop;
                var C = document.selection.createRange();
                C.text = F;
                C.select();
                E.focus();
                E.scrollTop = D
            }
        }
        ;
        A.fn.selectionRange = function(C, F) {
            var G = this[0];
            this.focus();
            var I = document.selection.createRange();
            if (C == null) {
                var K = this.val()
                  , J = K.length
                  , E = I.duplicate();
                E.moveToElementText(G);
                E.setEndPoint("StartToEnd", I);
                var D = J - B(E.text).length;
                E.setEndPoint("StartToStart", I);
                var H = J - B(E.text).length;
                if (D != H && K.charAt(D + 1) == "\n") {
                    D += 1
                }
                return {
                    end: D,
                    start: H,
                    text: K.substring(H, D),
                    textBefore: K.substring(0, H),
                    textAfter: K.substring(D)
                }
            } else {
                I.moveToElementText(G);
                I.collapse(true);
                I.moveStart("character", C);
                I.moveEnd("character", F - C);
                I.select()
            }
        }
    } else {
        A.fn.selection = function(E) {
            var D = this[0];
            if (!D) {
                return false
            }
            if (E == null) {
                if (D.setSelectionRange) {
                    return D.value.substring(D.selectionStart, D.selectionEnd)
                } else {
                    return false
                }
            } else {
                var C = D.scrollTop;
                if (!!D.setSelectionRange) {
                    var F = D.selectionStart;
                    D.value = D.value.substring(0, F) + E + D.value.substring(D.selectionEnd);
                    D.selectionStart = F;
                    D.selectionEnd = F + E.length
                }
                D.focus();
                D.scrollTop = C
            }
        }
        ;
        A.fn.selectionRange = function(F, C) {
            if (F == null) {
                var D = {
                    start: this[0].selectionStart,
                    end: this[0].selectionEnd
                };
                var E = this.val();
                D.text = E.substring(D.start, D.end);
                D.textBefore = E.substring(0, D.start);
                D.textAfter = E.substring(D.end);
                return D
            } else {
                this[0].selectionStart = F;
                this[0].selectionEnd = C
            }
        }
    }
    A.fn.wrapSelection = function(C, D) {
        this.selection(C + this.selection() + (D || ""))
    }
}
)(jQuery);
jQuery.fn.throbber = function(A) {
    return function() {
        var C = []
          , B = {
            isLatentThreshold: 100,
            minThrobberDisplay: 200,
            loadingClass: "loading"
        };
        A(document).ajaxComplete(function(E, D) {
            A(C).each(function(F) {
                if (D === this.get(0)) {
                    this.hideThrobber();
                    C.splice(F, 1)
                }
            })
        });
        return function(F) {
            var E, G, D = function(I, H) {
                D.t = setTimeout(function() {
                    clearTimeout(D.t);
                    D.t = undefined;
                    I()
                }, H)
            };
            F = A.extend(B, F || {});
            if (!F.target) {
                return this
            }
            G = jQuery(F.target);
            C.push(A.extend(this, {
                showThrobber: function() {
                    D(function() {
                        if (!E) {
                            G.addClass(F.loadingClass);
                            D(function() {
                                if (E) {
                                    E()
                                }
                            }, F.minThrobberDisplay)
                        }
                    }, F.isLatentThreshold)
                },
                hideThrobber: function() {
                    E = function() {
                        G.removeClass(F.loadingClass);
                        if (F.end) {
                            F.end()
                        }
                    }
                    ;
                    if (!D.t) {
                        E()
                    }
                }
            }));
            this.showThrobber();
            return this
        }
    }()
}(jQuery);
AJS.describeBrowser = function(userAgent) {
    userAgent = userAgent || navigator.userAgent;
    var isChrome = /chrome/.test(navigator.userAgent.toLowerCase())
      , isSafari = !isChrome && /safari/.test(navigator.userAgent.toLowerCase())
      , match = jQuery.uaMatch(userAgent)
      , browser = match.browser
      , version = match.version.replace(/\.0$/, "")
      , classNames = [];
    if (isChrome) {
        classNames.push("chrome")
    }
    if (isSafari) {
        classNames.push("safari")
    }
    classNames.push(browser);
    if (browser === "msie") {
        classNames.push(browser + "-" + version);
        version = parseInt(version);
        while (version > 6) {
            --version;
            classNames.push(browser + "-gt-" + version)
        }
    }
    jQuery("html").addClass(classNames.join(" "))
}
;
AJS.copyObject = function(object, deep) {
    var copiedObject = {};
    AJS.$.each(object, function(name, property) {
        if (typeof property !== "object" || property === null || property instanceof AJS.$) {
            copiedObject[name] = property
        } else {
            if (deep !== false) {
                copiedObject[name] = AJS.copyObject(property, deep)
            }
        }
    });
    return copiedObject
}
;
(function() {
    if (!jQuery.browser.msie) {
        return
    }
    var EVENTS = {};
    var PREVIOUS_INPUT_VALUE = "com.atlassian.aui.PREVIOUS_INPUT_VALUE";
    if (jQuery.browser.version >= "9") {
        var EDIT_EVENTS = "contextmenu cut keydown";
        var timeoutId = 0;
        var validEdit = function(e) {
            return !(jQuery(e.target).not("textarea") && e.keyCode === 13)
        };
        var onEditEvent = function(e) {
            if (validEdit(e)) {
                var $target = jQuery(this);
                clearTimeout(timeoutId);
                timeoutId = setTimeout(function() {
                    var previousValue = $target.data(PREVIOUS_INPUT_VALUE);
                    if (previousValue !== $target.val()) {
                        $target.trigger("input")
                    }
                }, 0)
            }
        };
        EVENTS.input = function() {
            var $target = jQuery(this);
            $target.data(PREVIOUS_INPUT_VALUE, $target.val())
        }
        ;
        EVENTS.focus = function() {
            var $target = jQuery(this);
            $target.unbind(EDIT_EVENTS, onEditEvent);
            $target.bind(EDIT_EVENTS, onEditEvent);
            $target.data(PREVIOUS_INPUT_VALUE, $target.val())
        }
        ;
        EVENTS.blur = function() {
            jQuery(this).unbind(EDIT_EVENTS, onEditEvent)
        }
    } else {
        var isUserInput = true;
        var onPropertyChange = function() {
            if (isUserInput && event.propertyName === "value") {
                var $target = jQuery(event.srcElement);
                var previousValue = $target.data(PREVIOUS_INPUT_VALUE);
                if (previousValue !== $target.val()) {
                    $target.trigger("input")
                }
            }
        };
        var onKeyPress = function(event) {
            var $target = jQuery(this);
            setTimeout(function() {
                var previousValue = $target.data(PREVIOUS_INPUT_VALUE);
                if (previousValue !== $target.val()) {
                    jQuery(event.srcElement).trigger("input")
                }
            }, 0)
        };
        EVENTS.focus = function() {
            jQuery(this).unbind("keypress", onKeyPress).bind("keypress", onKeyPress);
            this.detachEvent("onpropertychange", onPropertyChange);
            this.attachEvent("onpropertychange", onPropertyChange)
        }
        ;
        EVENTS.blur = function() {
            jQuery(this).unbind("keypress", onKeyPress);
            this.detachEvent("onpropertychange", onPropertyChange)
        }
        ;
        var TEXT_VALUE_SETTER = {
            set: function(element, value) {
                isUserInput = false;
                element.value = value;
                isUserInput = true;
                jQuery(element).data(PREVIOUS_INPUT_VALUE, value);
                return true
            }
        };
        jQuery.valHooks.text = TEXT_VALUE_SETTER;
        jQuery.valHooks.textarea = TEXT_VALUE_SETTER
    }
    jQuery(document).delegate("input:text, textarea", EVENTS)
}
)();
var JIRA = window.JIRA || {};
JIRA.bind = function(types, data, fn) {
    jQuery(AJS).bind(types, data, fn)
}
;
JIRA.one = function(evt, handler) {
    jQuery(AJS).one(evt, handler)
}
;
JIRA.unbind = function(evt, handler) {
    jQuery(AJS).unbind(evt, handler)
}
;
JIRA.trigger = function(evt, args) {
    jQuery(AJS).trigger(evt, args)
}
;
AJS.namespace = function(namespace, context, value) {
    var names = namespace.split(".");
    context = context || window;
    for (var i = 0, n = names.length - 1; i < n; i++) {
        var x = context[names[i]];
        context = (x != null) ? x : context[names[i]] = {}
    }
    return context[names[i]] = value || {}
}
;
AJS.canAccessIframe = function(iframe) {
    var $iframe = AJS.$(iframe);
    return !/^(http|https):\/\//.test($iframe.attr("src")) || (AJS.params.baseURL && (AJS.$.trim($iframe.attr("src")).indexOf(AJS.params.baseURL) === 0))
}
;
AJS.elementIsFocused = function(input) {
    if (input && AJS.$(input).get(0) === document.activeElement) {
        return true
    }
    return false
}
;
AJS.consumesKeyboardEvents = function($e) {
    return !($e.is(":button")) && ($e.is(":input") || $e.is("[contentEditable]"))
}
;
(function() {
    function preventScrolling(e) {
        var keyCode = e.keyCode
          , keys = AJS.$.ui.keyCode;
        if (e.type == "keypress") {
            return
        }
        if (keyCode === keys.DOWN || keyCode === keys.UP || keyCode === keys.LEFT || keyCode === keys.RIGHT) {
            var $el = jQuery(e.target);
            if (AJS.consumesKeyboardEvents($el)) {} else {
                e.preventDefault()
            }
        }
    }
    AJS.disableKeyboardScrolling = function() {
        AJS.$(document.body).bind("keydown", preventScrolling)
    }
    ;
    AJS.enableKeyboardScrolling = function() {
        AJS.$(document.body).unbind("keydown", preventScrolling)
    }
}
)();
AJS.$.namespace = function(namespace) {
    return AJS.namespace(namespace)
}
;
jQuery.noConflict();
jQuery.ajaxSettings.traditional = true;
contextPath = typeof contextPath === "undefined" ? "" : contextPath;
AJS.LEFT = "left";
AJS.RIGHT = "right";
AJS.ACTIVE_CLASS = "active";
AJS.BOX_SHADOW_CLASS = "box-shadow";
AJS.LOADING_CLASS = "loading";
AJS.INTELLIGENT_GUESS = "Intelligent Guess";
(function() {
    var SPECIAL_CHARS = /[.*+?|^$()[\]{\\]/g;
    RegExp.escape = function(str) {
        return str.replace(SPECIAL_CHARS, "\\$&")
    }
}
)();
(function($) {
    $.readData = function(s) {
        var r = {}
          , n = "";
        $(s).children().each(function(i) {
            if (i % 2) {
                r[n] = jQuery.trim($(this).text())
            } else {
                n = jQuery.trim($(this).text())
            }
        }).remove();
        $(s).remove();
        return r
    }
}
)(jQuery);
String.prototype.escapejQuerySelector = function() {
    return this.replace(/([:.])/g, "\\$1")
}
;
jQuery.aop.after({
    target: jQuery,
    method: "append"
}, function(elem) {
    var iframes;
    if (elem.attr("tagName") === "iframe" && AJS.canAccessIframe(elem)) {
        if (!elem.data("iframeAppendedFired")) {
            elem.data("iframeAppendedFired", true);
            jQuery(document).trigger("iframeAppended", elem)
        }
    }
    iframes = jQuery("iframe", elem);
    if (iframes.length > 0) {
        jQuery.each(iframes, function(i) {
            var iframe = iframes.eq(i);
            if (!iframe.data("iframeAppendedFired") && AJS.canAccessIframe(iframe)) {
                iframe.data("iframeAppendedFired", true);
                iframe.trigger("iframeAppended", iframe)
            }
        })
    }
    return elem
});
AJS.isSelenium = function() {
    return window.name.toLowerCase().indexOf("selenium") >= 0
}
;
AJS.reloadViaWindowLocation = function(url) {
    AJS.reloadViaWindowLocation._delegate(url, window.location)
}
;
AJS.reloadViaWindowLocation._delegate = (function() {
    var secondsSinceMidnight = function() {
        var now = new Date();
        var midnight = new Date(now.getFullYear(),now.getMonth(),now.getDate(),0,0,0,0);
        var secs = (now.getTime() - midnight.getTime()) / 1000;
        return Math.max(Math.floor(secs), 1)
    };
    var MAGIC_PARAM = "jwupdated";
    var MAGIC_PARAM_RE = /(jwupdated=[0-9]*)/;
    var makeHashUrlsUnique = function(url) {
        var hashIndex = url.indexOf("#");
        if (hashIndex == -1) {
            return url
        }
        var firstQuestionMark = url.indexOf("?");
        var magicParamValue = MAGIC_PARAM + "=" + secondsSinceMidnight();
        if (firstQuestionMark == -1) {
            url = url.replace("#", "?" + magicParamValue + "#")
        } else {
            if (MAGIC_PARAM_RE.test(url)) {
                url = url.replace(MAGIC_PARAM_RE, magicParamValue)
            } else {
                url = url.replace("?", "?" + magicParamValue + "&")
            }
        }
        return url
    };
    return function(url, location) {
        var targetUrl = url || location.href;
        var uniqueUrl = makeHashUrlsUnique(targetUrl);
        if (jQuery.browser.webkit && parseInt(jQuery.browser.version) < 533) {
            location.href = uniqueUrl
        } else {
            if (targetUrl === location.href) {
                location.replace(uniqueUrl)
            } else {
                location.assign(uniqueUrl)
            }
        }
    }
}
)();
AJS.extractBodyFromResponse = function(text) {
    var fragment = text.match(/<body[^>]*>([\S\s]*)<\/body[^>]*>/);
    if (fragment && fragment.length > 0) {
        return fragment[1]
    }
    return text
}
;
AJS.escapeHTML = AJS.escapeHtml;
function tryIt(f, defaultVal) {
    try {
        return f()
    } catch (ex) {
        return defaultVal
    }
}
function begetObject(obj) {
    var f = function() {};
    f.prototype = obj;
    return new f
}
function submitOnEnter(e) {
    if (e.keyCode == 13 && e.target.form && !e.ctrlKey && !e.shiftKey) {
        jQuery(e.target.form).submit();
        return false
    }
    return true
}
function submitOnCtrlEnter(e) {
    if (e.ctrlKey && e.target.form && (e.keyCode == 13 || e.keyCode == 10)) {
        jQuery(e.target.form).submit();
        return false
    }
    return true
}
function getMultiSelectValues(selectObject) {
    var selectedValues = "";
    for (var i = 0; i < selectObject.length; i++) {
        if (selectObject.options[i].selected) {
            if (selectObject.options[i].value && selectObject.options[i].value.length > 0) {
                selectedValues = selectedValues + " " + selectObject.options[i].value
            }
        }
    }
    return selectedValues
}
function getMultiSelectValuesAsArray(selectObject) {
    var selectedValues = new Array();
    for (var i = 0; i < selectObject.length; i++) {
        if (selectObject.options[i].selected) {
            if (selectObject.options[i].value && selectObject.options[i].value.length > 0) {
                selectedValues[selectedValues.length] = selectObject.options[i].value
            }
        }
    }
    return selectedValues
}
function arrayContains(array, value) {
    for (var i = 0; i < array.length; i++) {
        if (array[i] == value) {
            return true
        }
    }
    return false
}
function addClassName(elementId, classNameToAdd) {
    var elem = document.getElementById(elementId);
    if (elem) {
        elem.className = elem.className + " " + classNameToAdd
    }
}
function removeClassName(elementId, classNameToRemove) {
    var elem = document.getElementById(elementId);
    if (elem) {
        elem.className = (" " + elem.className + " ").replace(" " + classNameToRemove + " ", " ")
    }
}
function getEscapedFieldValue(id) {
    var e = document.getElementById(id);
    if (e.value) {
        return id + "=" + encodeURIComponent(e.value)
    } else {
        return ""
    }
}
function getEscapedFieldValues(ids) {
    var s = "";
    for (var i = 0; i < ids.length; i++) {
        s = s + "&" + getEscapedFieldValue(ids[i])
    }
    return s
}
var GuiPrefs = {
    toggleVisibility: function(elementId) {
        var elem = document.getElementById(elementId);
        if (elem) {
            if (readFromConglomerateCookie("jira.conglomerate.cookie", elementId, "1") == "1") {
                elem.style.display = "none";
                removeClassName(elementId + "header", "headerOpened");
                addClassName(elementId + "header", "headerClosed");
                saveToConglomerateCookie("jira.conglomerate.cookie", elementId, "0")
            } else {
                elem.style.display = "";
                removeClassName(elementId + "header", "headerClosed");
                addClassName(elementId + "header", "headerOpened");
                eraseFromConglomerateCookie("jira.conglomerate.cookie", elementId)
            }
        }
    }
};
function toggle(elementId) {
    GuiPrefs.toggleVisibility(elementId)
}
function toggleDivsWithCookie(elementShowId, elementHideId) {
    var elementShow = document.getElementById(elementShowId);
    var elementHide = document.getElementById(elementHideId);
    if (elementShow.style.display == "none") {
        elementHide.style.display = "none";
        elementShow.style.display = "block";
        saveToConglomerateCookie("jira.viewissue.cong.cookie", elementShowId, "1");
        saveToConglomerateCookie("jira.viewissue.cong.cookie", elementHideId, "0")
    } else {
        elementShow.style.display = "none";
        elementHide.style.display = "block";
        saveToConglomerateCookie("jira.viewissue.cong.cookie", elementHideId, "1");
        saveToConglomerateCookie("jira.viewissue.cong.cookie", elementShowId, "0")
    }
}
function restoreDivFromCookie(elementId, cookieName, defaultValue) {
    if (defaultValue == null) {
        defaultValue = "1"
    }
    var elem = document.getElementById(elementId);
    if (elem) {
        if (readFromConglomerateCookie(cookieName, elementId, defaultValue) != "1") {
            elem.style.display = "none";
            removeClassName(elementId + "header", "headerOpened");
            addClassName(elementId + "header", "headerClosed")
        } else {
            elem.style.display = "";
            removeClassName(elementId + "header", "headerClosed");
            addClassName(elementId + "header", "headerOpened")
        }
    }
}
function restore(elementId) {
    restoreDivFromCookie(elementId, "jira.conglomerate.cookie", "1")
}
function saveToConglomerateCookie(cookieName, name, value) {
    var cookieValue = getCookieValue(cookieName);
    cookieValue = addOrAppendToValue(name, value, cookieValue);
    saveCookie(cookieName, cookieValue, 365)
}
function readFromConglomerateCookie(cookieName, name, defaultValue) {
    var cookieValue = getCookieValue(cookieName);
    var value = getValueFromCongolmerate(name, cookieValue);
    if (value != null) {
        return value
    }
    return defaultValue
}
function eraseFromConglomerateCookie(cookieName, name) {
    saveToConglomerateCookie(cookieName, name, "")
}
function getValueFromCongolmerate(name, cookieValue) {
    if (cookieValue == null) {
        cookieValue = ""
    }
    var eq = name + "=";
    var cookieParts = cookieValue.split("|");
    for (var i = 0; i < cookieParts.length; i++) {
        var cp = cookieParts[i];
        while (cp.charAt(0) == " ") {
            cp = cp.substring(1, cp.length)
        }
        if (cp.indexOf(name) == 0) {
            return cp.substring(eq.length, cp.length)
        }
    }
    return null
}
function addOrAppendToValue(name, value, cookieValue) {
    var newCookieValue = "";
    if (cookieValue == null) {
        cookieValue = ""
    }
    var cookieParts = cookieValue.split("|");
    for (var i = 0; i < cookieParts.length; i++) {
        var cp = cookieParts[i];
        if (cp != "") {
            while (cp.charAt(0) == " ") {
                cp = cp.substring(1, cp.length)
            }
            if (cp.indexOf(name) != 0) {
                newCookieValue += cp + "|"
            }
        }
    }
    if (value != null && value != "") {
        var pair = name + "=" + value;
        if ((newCookieValue.length + pair.length) < 4020) {
            newCookieValue += pair
        }
    }
    return newCookieValue
}
function getCookieValue(name) {
    var eq = name + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == " ") {
            c = c.substring(1, c.length)
        }
        if (c.indexOf(eq) == 0) {
            return unescape(c.substring(eq.length, c.length))
        }
    }
    return null
}
function saveCookie(name, value, days) {
    if (typeof contextPath === "undefined") {
        return
    }
    var path = contextPath;
    if (!path) {
        path = "/"
    }
    var ex;
    if (days) {
        var d = new Date();
        d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));
        ex = "; expires=" + d.toGMTString()
    } else {
        ex = ""
    }
    document.cookie = name + "=" + escape(value) + ex + ";path=" + path
}
function readCookie(name, defaultValue) {
    var cookieVal = getCookieValue(name);
    if (cookieVal != null) {
        return cookieVal
    }
    if (defaultValue) {
        saveCookie(name, defaultValue, 365);
        return defaultValue
    } else {
        return null
    }
}
function eraseCookie(name) {
    saveCookie(name, "", -1)
}
function recolourSimpleTableRows(tableId) {
    recolourTableRows(tableId, "rowNormal", "rowAlternate", tableId + "_empty")
}
function recolourTableRows(tableId, rowNormal, rowAlternate, emptyTableId) {
    var tbl = document.getElementById(tableId);
    var emptyTable = document.getElementById(emptyTableId);
    var alternate = false;
    var rowsFound = 0;
    var rows = tbl.rows;
    var firstVisibleRow = null;
    var lastVisibleRow = null;
    if (AJS.$(tbl).hasClass("aui")) {
        rowNormal = "";
        rowAlternate = "zebra"
    }
    for (var i = 1; i < rows.length; i++) {
        var row = rows[i];
        if (row.style.display != "none") {
            if (!alternate) {
                row.className = rowNormal
            } else {
                row.className = rowAlternate
            }
            rowsFound++;
            alternate = !alternate
        }
        if (row.style.display != "none") {
            if (firstVisibleRow == null) {
                firstVisibleRow = row
            }
            lastVisibleRow = row
        }
    }
    if (firstVisibleRow != null) {
        firstVisibleRow.className = firstVisibleRow.className + " first-row"
    }
    if (lastVisibleRow != null) {
        lastVisibleRow.className = lastVisibleRow.className + " last-row"
    }
    if (emptyTable) {
        if (rowsFound == 0) {
            tbl.style.display = "none";
            emptyTable.style.display = ""
        } else {
            tbl.style.display = "";
            emptyTable.style.display = "none"
        }
    }
}
function htmlEscape(str) {
    var divE = document.createElement("div");
    divE.appendChild(document.createTextNode(str));
    return divE.innerHTML
}
function atl_token() {
    return jQuery("#atlassian-token").attr("content")
}
function openDateRangePicker(formName, previousFieldName, nextFieldName, fieldId) {
    var previousFieldValue = document.forms[formName].elements[previousFieldName].value;
    var nextFieldValue = document.forms[formName].elements[nextFieldName].value;
    var url = contextPath + "/secure/popups/DateRangePicker.jspa?";
    url += "formName=" + formName + "&";
    url += "previousFieldName=" + escape(previousFieldName) + "&";
    url += "nextFieldName=" + escape(nextFieldName) + "&";
    url += "previousFieldValue=" + escape(previousFieldValue) + "&";
    url += "nextFieldValue=" + escape(nextFieldValue) + "&";
    url += "fieldId=" + escape(fieldId);
    var vWinUsers = window.open(url, "DateRangePopup", "status=no,resizable=yes,top=100,left=200,width=580,height=400,scrollbars=yes");
    vWinUsers.opener = self;
    vWinUsers.focus()
}
function show_calendar2(formName, fieldName) {
    var form = document.forms[formName];
    var element = form.elements[fieldName];
    var vWinCal = window.open(contextPath + "/secure/popups/Calendar.jspa?form=" + formName + "&field=" + fieldName + "&value=" + escape(element.value) + "&decorator=none", "Calendar", "width=230,height=170,status=no,resizable=yes,top=220,left=200");
    vWinCal.opener = self;
    vWinCal.focus()
}
(function() {
    var COOKIE_NAME = "AJS.conglomerate.cookie"
      , UNESCAPE_COOKIE_REGEX = /(\\|^"|"$)/g
      , CONSECUTIVE_PIPE_CHARS_REGEX = /\|\|+/g
      , ANY_QUOTE_REGEX = /"/g;
    function getValueFromConglomerate(name, cookieValue) {
        cookieValue = cookieValue || "";
        var reg = new RegExp(name + "=([^|]+)")
          , res = cookieValue.match(reg);
        return res && res[1]
    }
    function addOrAppendToValue(name, value, cookieValue) {
        var reg = new RegExp("(\\s|\\|)*\\b" + name + "=[^|]*[|]*");
        cookieValue = cookieValue || "";
        cookieValue = cookieValue.replace(reg, "|");
        if (value !== "") {
            var pair = name + "=" + value;
            if (cookieValue.length + pair.length < 4020) {
                cookieValue += "|" + pair
            }
        }
        return cookieValue.replace(CONSECUTIVE_PIPE_CHARS_REGEX, "|")
    }
    function unescapeCookieValue(name) {
        return name.replace(UNESCAPE_COOKIE_REGEX, "")
    }
    function getCookieValue(name) {
        var reg = new RegExp("\\b" + name + "=(.+?[^\\\\])(;|$)")
          , res = document.cookie.match(reg);
        return res && unescapeCookieValue(res[1])
    }
    function saveCookie(name, value, days) {
        var ex = "", d, quotedValue = '"' + value.replace(ANY_QUOTE_REGEX, '\\"') + '"';
        if (days) {
            d = new Date();
            d.setTime(+d + days * 24 * 60 * 60 * 1000);
            ex = "; expires=" + d.toGMTString()
        }
        document.cookie = name + "=" + quotedValue + ex + ";path=/"
    }
    AJS.Cookie = {
        save: function(name, value, expires) {
            var cookieValue = getCookieValue(COOKIE_NAME);
            cookieValue = addOrAppendToValue(name, value, cookieValue);
            saveCookie(COOKIE_NAME, cookieValue, expires || 365)
        },
        read: function(name, defaultValue) {
            var cookieValue = getCookieValue(COOKIE_NAME);
            var value = getValueFromConglomerate(name, cookieValue);
            if (value != null) {
                return value
            }
            return defaultValue
        },
        erase: function(name) {
            this.save(name, "")
        }
    }
}
)();
var JIRA = window.JIRA || {};
JIRA.trace = function() {}
;
(function($) {
    AJS.namespace("JIRA.Meta");
    JIRA.Meta.getLoggedInUser = function() {
        return {
            name: AJS.Meta.get("remote-user"),
            fullName: AJS.Meta.get("remote-user-fullname")
        }
    }
    ;
    JIRA.Meta.getProject = function() {
        return AJS.params.projectKey
    }
    ;
    JIRA.Meta.getIssueKey = function() {
        return AJS.Meta.get("issue-key")
    }
}(AJS.$));
(function() {
    begetObject = function(obj) {
        var f = function() {};
        f.prototype = obj;
        return new f()
    }
    ;
    var initializing = false
      , fnTest = /xyz/.test(function() {
        xyz
    }) ? /\b_super\b/ : /.*/;
    this.Class = function() {}
    ;
    Class.extend = function() {
        var prop;
        var _super = this.prototype;
        if (arguments.length > 1) {
            var interfaces = AJS.$.makeArray(arguments);
            prop = interfaces.pop();
            var completeInterface;
            AJS.$.each(interfaces, function(i, inter) {
                if (completeInterface) {
                    completeInterface = completeInterface.extend(inter)
                } else {
                    completeInterface = inter
                }
            });
            return completeInterface.extend(this.prototype).extend(prop)
        } else {
            prop = arguments[0]
        }
        initializing = true;
        var prototype = new this();
        initializing = false;
        for (var name in prop) {
            if (prototype[name] = typeof prop[name] == "function" && typeof _super[name] == "function" && fnTest.test(prop[name])) {
                prototype[name] = (function(name, fn) {
                    return function() {
                        var tmp = this._super;
                        this._super = _super[name];
                        var ret = fn.apply(this, arguments);
                        this._super = tmp;
                        return ret
                    }
                }
                )(name, prop[name])
            } else {
                if (typeof _super[name] === "object") {
                    var newObj = begetObject(prop[name]);
                    AJS.$.each(_super[name], function(name, obj) {
                        if (!newObj[name]) {
                            newObj[name] = obj
                        } else {
                            if (typeof newObj[name] === "object") {
                                var newSubObj = begetObject(newObj[name]);
                                AJS.$.each(obj, function(subName, subObj) {
                                    if (!newSubObj[subName]) {
                                        newSubObj[subName] = subObj
                                    }
                                });
                                newObj[name] = newSubObj
                            }
                        }
                    });
                    prototype[name] = newObj
                } else {
                    prototype[name] = prop[name]
                }
            }
        }
        function Class() {
            if (!initializing && this.init) {
                this.init.apply(this, arguments)
            }
        }
        Class.fn = Class.prototype = prototype;
        Class.constructor = Class;
        Class.extend = arguments.callee;
        return Class
    }
}
)();
Class.prototype.bind = function(evt, func) {
    jQuery(this).bind(evt, func);
    return this
}
;
Class.prototype.trigger = function(event) {
    var instance = jQuery(this)
      , args = Array().slice.call(arguments, 1);
    event = new jQuery.Event(event);
    args.unshift(event);
    instance.trigger.apply(instance, args);
    return !event.isDefaultPrevented()
}
;
AJS.Control = Class.extend({
    INVALID: "INVALID",
    _throwReadOnlyError: function(property) {
        new Error(this.CLASS_SIGNATURE + ": Sorry [" + property + "] is a read-only property")
    },
    _assignEvents: function(group, $target) {
        this._unassignEvents(group, $target);
        if (typeof $target === "string") {
            for (var eventType in this._events[group]) {
                AJS.$(document).delegate($target, eventType, this._getDispatcher(group, eventType))
            }
        } else {
            $target = jQuery($target);
            for (eventType in this._events[group]) {
                $target.bind(eventType, this._getDispatcher(group, eventType))
            }
        }
        return this
    },
    _unassignEvents: function(group, $target) {
        if (typeof $target === "string") {
            for (var eventType in this._events[group]) {
                AJS.$(document).undelegate($target, eventType, this._getDispatcher(group, eventType))
            }
        } else {
            $target = jQuery($target);
            for (eventType in this._events[group]) {
                $target.unbind(eventType, this._getDispatcher(group, eventType))
            }
        }
    },
    _getDispatcher: function(group, eventType) {
        var ns = group + "/" + eventType;
        if (!this._dispatchers) {
            this._dispatchers = {}
        }
        if (!this._dispatchers[ns]) {
            var handler = this._events[group][eventType];
            var instance = this;
            this._dispatchers[ns] = function(event) {
                return handler.call(instance, event, AJS.$(this))
            }
        }
        return this._dispatchers[ns]
    },
    _isValidInput: function() {
        return true
    },
    _handleKeyEvent: function(event) {
        if (this._isValidInput(event)) {
            if (event.type === "input") {
                if (typeof this.onEdit === "function") {
                    this.onEdit(event)
                }
            } else {
                var heyHandler = this.keys && this.keys[event.key];
                if (typeof heyHandler === "function") {
                    heyHandler.call(this, event)
                }
            }
        }
    },
    getCustomEventName: function(methodName) {
        return (this.CLASS_SIGNATURE || "") + "_" + methodName
    },
    _getCustomEventArgs: function() {
        return [this]
    },
    _supportsBoxShadow: function() {
        var s = document.body.style;
        return s.WebkitBoxShadow !== undefined || s.MozBoxShadow !== undefined || s.boxShadow !== undefined
    },
    _setOptions: function(options) {
        var element, optionsFromDOM;
        options = options || {};
        if (options instanceof AJS.$ || typeof options === "string" || (typeof options === "object" && options.nodeName)) {
            options = {
                element: options
            }
        }
        element = AJS.$(options.element);
        optionsFromDOM = element.getOptionsFromAttributes();
        this.options = AJS.$.extend(true, this._getDefaultOptions(options), optionsFromDOM, options);
        if (element.length === 0) {
            return this.INVALID
        }
        return undefined
    },
    getCaret: function(node) {
        var startIndex = node.selectionStart;
        if (startIndex >= 0) {
            return (node.selectionEnd > startIndex) ? -1 : startIndex
        }
        if (document.selection) {
            var textRange1 = document.selection.createRange();
            if (textRange1.text.length === 0) {
                var textRange2 = textRange1.duplicate();
                textRange2.moveToElementText(node);
                textRange2.setEndPoint("EndToStart", textRange1);
                return textRange2.text.length
            }
        }
        return -1
    },
    _render: function() {
        var i, name = arguments[0], args = [];
        for (i = 1; i < arguments.length; i++) {
            args.push(arguments[i])
        }
        return this._renders[name].apply(this, args)
    }
});
AJS.Descriptor = Class.extend({
    init: function(properties) {
        if (this._validate(properties)) {
            this.properties = AJS.$.extend(this._getDefaultOptions(), properties)
        }
    },
    allProperties: function() {
        return this.properties
    },
    _validate: function(properties) {
        if (this.REQUIRED_PROPERTIES) {
            AJS.$.each(this.REQUIRED_PROPERTIES, function(name) {
                if (typeof properties[name] === "undefined") {
                    throw new Error("AJS.Descriptor: expected property [" + name + "] but was undefined")
                }
            })
        }
        return true
    }
});
JIRA.Keyboard = {};
(function($) {
    var _keyCodeToEnum = {}
      , _enumToKeyCode = {}
      , _keyCodeToIsAscii = {};
    var SpecialKey = JIRA.Keyboard.SpecialKey = {
        BACKSPACE: specialKey("backspace", 8, true),
        TAB: specialKey("tab", 9, true),
        RETURN: specialKey("return", 13, true),
        SHIFT: specialKey("shift", 16),
        CTRL: specialKey("ctrl", 17),
        ALT: specialKey("alt", 18),
        PAUSE: specialKey("pause", 19),
        CAPS_LOCK: specialKey("capslock", 20),
        ESC: specialKey("esc", 27, true),
        SPACE: specialKey("space", 32, true),
        PAGE_UP: specialKey("pageup", 33),
        PAGE_DOWN: specialKey("pagedown", 34),
        END: specialKey("end", 35),
        HOME: specialKey("home", 36),
        LEFT: specialKey("left", 37),
        UP: specialKey("up", 38),
        RIGHT: specialKey("right", 39),
        DOWN: specialKey("down", 40),
        INSERT: specialKey("insert", 45),
        DELETE: specialKey("del", 46),
        F1: specialKey("f1", 112),
        F2: specialKey("f2", 113),
        F3: specialKey("f3", 114),
        F4: specialKey("f4", 115),
        F5: specialKey("f5", 116),
        F6: specialKey("f6", 117),
        F7: specialKey("f7", 118),
        F8: specialKey("f8", 119),
        F9: specialKey("f9", 120),
        F10: specialKey("f10", 121),
        F11: specialKey("f11", 122),
        F12: specialKey("f12", 123),
        NUMLOCK: specialKey("numlock", 144),
        SCROLL: specialKey("scroll", 145),
        META: specialKey("meta", 224)
    };
    function specialKey(name, keyCode, isAscii) {
        _keyCodeToEnum[keyCode] = name;
        _enumToKeyCode[name] = keyCode;
        if (isAscii) {
            _keyCodeToIsAscii[keyCode] = true
        }
        return name
    }
    SpecialKey.eventType = function() {
        return $.browser.mozilla ? "keypress" : "keydown"
    }
    ;
    SpecialKey.fromKeyCode = function(keyCode) {
        return _keyCodeToEnum[keyCode]
    }
    ;
    SpecialKey.toKeyCode = function(specialKey) {
        return _enumToKeyCode[specialKey]
    }
    ;
    SpecialKey.isAscii = function(keyCode) {
        return !!_keyCodeToIsAscii[keyCode]
    }
    ;
    SpecialKey.isSpecialKey = function(keyName) {
        return !!SpecialKey.toKeyCode(keyName)
    }
    ;
    function originalEvent(e) {
        return e.originalEvent || e
    }
    JIRA.Keyboard.characterEntered = function(keypressEvent) {
        var e = originalEvent(keypressEvent);
        if (e.type === "keypress") {
            var characterCode = characterCodeForKeypress(e);
            if (characterCode !== null && (!SpecialKey.isAscii(characterCode) || SpecialKey.fromKeyCode(characterCode) === SpecialKey.SPACE)) {
                return String.fromCharCode(characterCode)
            }
        }
        return undefined
    }
    ;
    function characterCodeForKeypress(keypressEvent) {
        var e = originalEvent(keypressEvent);
        if (e.which == null) {
            return e.keyCode
        } else {
            if (e.which != 0 && e.charCode != 0) {
                return e.which
            } else {
                return null
            }
        }
    }
    JIRA.Keyboard.specialKeyEntered = function(e) {
        e = originalEvent(e);
        if ($.browser.mozilla) {
            if (e.type === "keypress") {
                var characterCode = characterCodeForKeypress(e);
                if (characterCode === null) {
                    return SpecialKey.fromKeyCode(e.keyCode)
                } else {
                    if (SpecialKey.isAscii(characterCode)) {
                        return SpecialKey.fromKeyCode(characterCode)
                    }
                }
            }
        } else {
            if (e.type !== "keypress") {
                return SpecialKey.fromKeyCode(e.keyCode)
            }
        }
        return undefined
    }
    ;
    function keyEntered(e) {
        e = originalEvent(e);
        var special = JIRA.Keyboard.specialKeyEntered(e);
        if (special) {
            return special
        } else {
            if ($.browser.mozilla) {
                if (e.type === "keypress") {
                    var characterCode = characterCodeForKeypress(e);
                    if (characterCode !== null) {
                        return String.fromCharCode(characterCode).toLowerCase()
                    }
                }
            } else {
                if (e.type !== "keypress") {
                    return String.fromCharCode(e.keyCode).toLowerCase()
                }
            }
        }
        return undefined
    }
    JIRA.Keyboard.shortcutEntered = function(e) {
        e = originalEvent(e);
        if (e.type === JIRA.Keyboard.SpecialKey.eventType()) {
            var specialKey = JIRA.Keyboard.specialKeyEntered(e)
              , modifiers = "";
            if (e.altKey && specialKey !== SpecialKey.ALT) {
                modifiers += modifier(SpecialKey.ALT)
            }
            if (e.ctrlKey && specialKey !== SpecialKey.CTRL) {
                modifiers += modifier(SpecialKey.CTRL)
            }
            if (e.metaKey && !e.ctrlKey && specialKey !== SpecialKey.META) {
                modifiers += modifier(SpecialKey.META)
            }
            if (e.shiftKey && specialKey !== SpecialKey.SHIFT) {
                modifiers += modifier(SpecialKey.SHIFT)
            }
            if (specialKey) {
                return modifiers + specialKey
            } else {
                if (modifiers.length > 0 && modifiers !== "shift+") {
                    var key = keyEntered(e);
                    if (key) {
                        return modifiers + key
                    }
                }
            }
        }
        return undefined
    }
    ;
    function modifier(modifier) {
        return modifier + "+"
    }
}
)(AJS.$);
(function($) {
    JIRA.Mouse = {};
    var MotionDetector = JIRA.Mouse.MotionDetector = function() {
        this.reset()
    }
    ;
    MotionDetector.prototype.reset = function() {
        this._handler = null;
        this._x = null;
        this._y = null;
        this.moved = false
    }
    ;
    MotionDetector.prototype.wait = function(eventHandler) {
        var instance = this;
        if (!instance._handler) {
            this.reset();
            $(window.top.document).bind("mousemove", instance._handler = function(e) {
                if (!instance._x && !instance._y) {
                    instance._x = e.pageX;
                    instance._y = e.pageY
                } else {
                    if (!(e.pageX === instance._x && e.pageY === instance._y)) {
                        instance.unbind();
                        instance.moved = true;
                        if (eventHandler) {
                            eventHandler.call(this, e)
                        }
                    }
                }
            }
            )
        }
    }
    ;
    MotionDetector.prototype.unbind = function() {
        if (this._handler) {
            $(window.top.document).unbind("mousemove", this._handler);
            this.reset()
        }
    }
}
)(AJS.$);
jQuery.fn.getOptionsFromAttributes = function() {
    var options = {};
    if (this.length) {
        jQuery.each(this[0].attributes, function() {
            var map, nodeValue = this.nodeValue, target = options;
            if (/^data-/.test(this.nodeName)) {
                map = this.nodeName.replace(/^data-/, "").split("."),
                AJS.$.each(map, function(i, propertyName) {
                    propertyName = propertyName.replace(/([a-z])-([a-z])/gi, function(entireMatch, firstMatch, secondMatch) {
                        return firstMatch + secondMatch.toUpperCase()
                    });
                    propertyName = propertyName.replace(/_([a-z]+)/gi, function(entireMatch, firstMatch) {
                        return firstMatch.toUpperCase()
                    });
                    if (i === map.length - 1) {
                        target[propertyName] = nodeValue.match(/^(tru|fals)e$/i) ? nodeValue.toLowerCase() == "true" : nodeValue
                    } else {
                        if (!target[propertyName]) {
                            target[propertyName] = {}
                        }
                    }
                    target = target[propertyName]
                })
            }
        })
    }
    return options
}
;
JIRA.SmartAjax = {};
(function($) {
    JIRA.SmartAjax.SmartAjaxResult = function(xhr, requestId, statusText, data, successful, errorThrown) {
        var status = tryIt(function() {
            return xhr.status
        }, 0);
        var result = {
            successful: successful,
            status: status,
            statusText: statusText,
            errorThrown: errorThrown,
            readyState: xhr.readyState,
            hasData: data != null && data.length > 0,
            data: data,
            xhr: xhr,
            aborted: xhr.aborted,
            requestId: requestId,
            validationError: !!(xhr.status === 400 && data && data.errors)
        };
        result.toString = function() {
            return "{\n" + "successful  : " + this.successful + ",\n" + "status      : " + this.status + ",\n" + "statusText  : " + this.statusText + ",\n" + "hasData     : " + this.hasData + ",\n" + "readyState  : " + this.readyState + ",\n" + "requestId   : " + this.requestId + ",\n" + "aborted     : " + this.aborted + ",\n" + "}"
        }
        ;
        return result
    }
    ;
    JIRA.SmartAjax.SmartAjaxResult.ERROR = "error";
    JIRA.SmartAjax.SmartAjaxResult.TIMEOUT = "timeout";
    JIRA.SmartAjax.SmartAjaxResult.NOTMODIFIED = "notmodified";
    JIRA.SmartAjax.SmartAjaxResult.PARSEERROR = "parseerror";
    JIRA.SmartAjax.makeRequest = function(ajaxOptions) {
        var _smartAjaxResult = {};
        var log = function(calltype, requestId, msg) {
            if (AJS.log) {
                var id = requestId ? "[" + requestId + "] " : " ";
                AJS.log("ajax" + id + calltype + " : " + msg)
            }
        };
        var generateRequestId = function() {
            var now = new Date();
            var midnight = new Date(now.getFullYear(),now.getMonth(),now.getDate(),0,0,0,0);
            var ms = (now.getTime() - midnight.getTime());
            return Math.max(Math.floor(ms), 1)
        };
        var errorHandler = function(xhr, statusText, errorThrown, smartAjaxResult) {
            if (!smartAjaxResult) {
                var data = tryIt(function() {
                    return xhr.responseText
                }, "");
                smartAjaxResult = _smartAjaxResult = new JIRA.SmartAjax.SmartAjaxResult(xhr,_requestId,statusText,data,false,errorThrown)
            }
            log("error", smartAjaxResult.requestId, smartAjaxResult);
            if ($.isFunction(ajaxOptions.error)) {
                ajaxOptions.error(xhr, statusText, errorThrown, smartAjaxResult)
            }
        };
        var successHandler = function(data, statusText, xhr) {
            if (xhr.status < 100) {
                _smartAjaxResult = new JIRA.SmartAjax.SmartAjaxResult(xhr,_requestId,JIRA.SmartAjax.SmartAjaxResult.ERROR,"",false);
                errorHandler(xhr, JIRA.SmartAjax.SmartAjaxResult.ERROR, undefined, _smartAjaxResult);
                return
            }
            _smartAjaxResult = new JIRA.SmartAjax.SmartAjaxResult(xhr,_requestId,statusText,data,true);
            if ($.isFunction(ajaxOptions.success)) {
                ajaxOptions.success(data, statusText, xhr, _smartAjaxResult)
            }
        };
        var completeHandler = function(xhr, textStatus) {
            if ($.isFunction(ajaxOptions.complete)) {
                ajaxOptions.complete(xhr, textStatus, _smartAjaxResult)
            }
        };
        var DEFAULT_AJAX_OPTS = {
            jqueryAjaxFn: $.ajax,
            headers: {
                "X-AUSERNAME": AJS.params.loggedInUser
            }
        };
        var ourAjaxOptions = $.extend(true, {}, DEFAULT_AJAX_OPTS, ajaxOptions);
        ourAjaxOptions.error = errorHandler;
        ourAjaxOptions.success = successHandler;
        ourAjaxOptions.complete = completeHandler;
        var xhr = ourAjaxOptions.jqueryAjaxFn.apply(ourAjaxOptions, [ourAjaxOptions]);
        var _requestId = generateRequestId();
        try {
            xhr.abort = function(oldabort) {
                return function() {
                    log("aborted", _requestId, "");
                    xhr.aborted = true;
                    if ($.isFunction(oldabort)) {
                        try {
                            oldabort.call(xhr)
                        } catch (ex) {}
                    }
                }
            }(xhr.abort)
        } catch (ex) {}
        return xhr
    }
    ;
    JIRA.SmartAjax.buildDialogErrorContent = function(smartAjaxResult, noHeader) {
        var fourHundredClass = Math.floor(smartAjaxResult.status / 100);
        if (smartAjaxResult.hasData && fourHundredClass != 4) {
            return wrapDialogErrorContent(AJS.extractBodyFromResponse(smartAjaxResult.data))
        } else {
            var errMsg = buildRawHttpErrorMessage(smartAjaxResult);
            return buildDialogAjaxErrorMessage(errMsg, noHeader)
        }
    }
    ;
    JIRA.SmartAjax.buildSimpleErrorContent = function(smartAjaxResult, options) {
        return buildRawHttpErrorMessage(smartAjaxResult, options ? options : {})
    }
    ;
    function buildRawHttpErrorMessage(smartAjaxResult, options) {
        var AJS = window.top.AJS;
        var errMsg;
        options = options || {};
        if (smartAjaxResult.statusText == JIRA.SmartAjax.SmartAjaxResult.TIMEOUT) {
            errMsg = "The call to the JIRA server did not complete within the timeout period.  We are unsure of the result of this operation."
        } else {
            if (smartAjaxResult.status == 401) {
                errMsg = "You are not authorized to perform this operation.  Please log in."
            } else {
                if (smartAjaxResult.hasData) {
                    errMsg = "The JIRA server was contacted but has returned an error response. We are unsure of the result of this operation."
                } else {
                    errMsg = "The JIRA server could not be contacted.  This may be a temporary glitch or the server may be down."
                }
            }
        }
        return errMsg
    }
    function buildDialogAjaxErrorMessage(errorMessage, noHeader) {
        var errorContent = '<div class="aui-message error"><span class="aui-icon icon-warning"></span>' + "<p>" + errorMessage + "</p>" + "<p>" + "Close this dialog and press refresh in your browser" + "</p>" + "</div>";
        if (!noHeader) {
            errorContent = "<h1>" + "Communications Breakdown" + "</h1>" + errorContent
        }
        return wrapDialogErrorContent(errorContent)
    }
    function wrapDialogErrorContent(content) {
        var $container = $('<div class="ajaxerror"/>');
        $container.append(content);
        return $container
    }
}
)(AJS.$);
AJS.$(function() {
    AJS.$.ajaxSetup({
        timeout: 60000,
        async: true,
        cache: false,
        global: true
    })
});
AJS.namespace("jira.ajax", null, JIRA.SmartAjax);
AJS.HIDE_REASON = {
    clickOutside: "clickOutside",
    toggle: "toggle",
    escPressed: "esc",
    cancelClicked: "cancelClicked",
    submit: "submit"
};
(function() {
    JIRA.bind("Dialog.beforeHide", function(e) {
        if (typeof Calendar !== "undefined" && Calendar.current) {
            e.preventDefault()
        }
        if (JIRA.Dropdown && JIRA.Dropdown.current) {
            e.preventDefault()
        }
        if (AJS.InlineLayer && AJS.InlineLayer.current) {
            e.preventDefault()
        }
        if (AJS.Dropdown && AJS.Dropdown.current) {
            e.preventDefault()
        }
        if (AJS.InlineDialog && AJS.InlineDialog.current) {
            e.preventDefault()
        }
    });
    JIRA.bind("Dialog.show", function(e) {
        if (JIRA.Dropdown && JIRA.Dropdown.current) {
            JIRA.Dropdown.current.hide()
        }
        if (AJS.InlineLayer && AJS.InlineLayer.current) {
            AJS.InlineLayer.current.hide();
            e.preventDefault()
        }
        if (AJS.Dropdown && AJS.Dropdown.current) {
            AJS.Dropdown.current.hide();
            e.preventDefault()
        }
        if (AJS.InlineDialog && AJS.InlineDialog.current) {
            AJS.InlineDialog.current.hide();
            e.preventDefault()
        }
    });
    jQuery(function() {
        if (typeof Calendar !== "undefined") {
            jQuery(document).bind("beforeBlurInput", function(e) {
                if (Calendar.current) {
                    e.preventDefault()
                }
                if (JIRA.InlineLayer && JIRA.InlineLayer.current) {
                    e.preventDefault()
                }
            });
            if (JIRA.Events.BEFORE_INLINE_EDIT_CANCEL) {
                JIRA.bind(JIRA.Events.BEFORE_INLINE_EDIT_CANCEL, function(e, id, type, reason) {
                    if (reason === JIRA.Issues.CANCEL_REASON.escPressed && Calendar.current) {
                        e.preventDefault()
                    }
                })
            }
        }
    });
    var $doc = jQuery(document);
    function getWindow() {
        var topWindow = window;
        try {
            while (topWindow.parent.window !== topWindow.window && topWindow.parent.AJS) {
                topWindow = topWindow.parent
            }
        } catch (error) {}
        return topWindow
    }
    function getLayer(instance) {
        return (instance.$layer || instance.$popup || instance.$ || instance.popup || instance)[0]
    }
    function listenForLayerEvents($doc) {
        $doc.bind("showLayer", function(e, type, item) {
            if (item && item.id && (item.id.indexOf("user-hover-dialog") >= 0 || item.id.indexOf("aui-inline-edit-error") >= 0 || item.id.indexOf("watchers") >= 0)) {
                return
            }
            var topWindow = getWindow().AJS;
            if (topWindow.currentLayerItem && item !== topWindow.currentLayerItem && topWindow.currentLayerItem.type !== "popup") {
                topWindow.currentLayerItem.hide()
            }
            if (item) {
                topWindow.currentLayerItem = item;
                topWindow.currentLayerItem.type = type
            }
        }).bind("hideLayer", function(e, type, item) {
            if (!item || item.id && (item.id.indexOf("user-hover-dialog") >= 0 || item.id.indexOf("aui-inline-edit-error") >= 0)) {
                return
            }
            var topWindow = getWindow().AJS;
            if (topWindow.currentLayerItem) {
                if (topWindow.currentLayerItem === item) {
                    topWindow.currentLayerItem = null
                } else {
                    if (jQuery.contains(getLayer(item), getLayer(topWindow.currentLayerItem))) {
                        topWindow.currentLayerItem.hide()
                    }
                }
            }
        }).bind("hideAllLayers", function() {
            var topWindow = getWindow().AJS;
            if (topWindow.currentLayerItem) {
                topWindow.currentLayerItem.hide()
            }
        }).click(function(e) {
            var topWindow = getWindow().AJS;
            var layerItem = topWindow.currentLayerItem;
            if (layerItem && layerItem.type !== "popup") {
                if (layerItem._validateClickToClose) {
                    if (layerItem._validateClickToClose(e)) {
                        if (layerItem instanceof AJS.InlineLayer) {
                            layerItem.hide(AJS.HIDE_REASON.clickOutside, e)
                        } else {
                            layerItem.hide()
                        }
                    }
                } else {
                    layerItem.hide()
                }
            }
        })
    }
    $doc.bind("iframeAppended", function(e, iframe) {
        iframe = jQuery(iframe);
        iframe.load(function() {
            listenForLayerEvents(iframe.contents())
        })
    });
    listenForLayerEvents($doc)
}
)();
jQuery.fn.hasFixedParent = function() {
    var hasFixedParent = false;
    this.parents().each(function() {
        if (AJS.$(this).css("position") === "fixed") {
            hasFixedParent = this;
            return false
        }
    });
    return hasFixedParent
}
;
AJS.Navigator = jQuery.extend({}, AJS.Navigator, {
    family: function() {
        if (jQuery.browser["msie"]) {
            return this.Families.INTERNET_EXPLORER
        }
        if (jQuery.browser["mozilla"]) {
            return this.Families.MOZILLA
        }
        if (jQuery.browser["webkit"]) {
            return this.Families.WEBKIT
        }
        if (jQuery.browser["opera"]) {
            return this.Families.OPERA
        }
        return this.Families.UNKNOWN
    },
    modifierKey: function() {
        if (this.family() === this.Families.INTERNET_EXPLORER) {
            return "Alt"
        }
        if (this.family() === this.Families.MOZILLA) {
            if (jQuery.os.mac) {
                return "Ctrl"
            } else {
                return "Alt+Shift"
            }
        }
        if (this.family() === this.Families.WEBKIT) {
            if (jQuery.os.windows) {
                return "Alt"
            } else {
                return "Ctrl+Alt"
            }
        }
        if (this.family() === this.Families.OPERA) {
            return "Shift+Esc"
        }
        return "Alt"
    }
});
AJS.Navigator.Families = jQuery.extend({}, AJS.Navigator.Families, {
    INTERNET_EXPLORER: "msie",
    MOZILLA: "mozilla",
    WEBKIT: "webkit",
    OPERA: "opera",
    UNKNOWN: "unknown"
});
// Underscore.js 1.3.1
// (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
// Underscore is freely distributable under the MIT license.
// Portions of Underscore are inspired or borrowed from Prototype,
// Oliver Steele's Functional, and John Resig's Micro-Templating.
// For all details and documentation:
// http://documentcloud.github.com/underscore
(function() {
    function q(a, c, d) {
        if (a === c)
            return a !== 0 || 1 / a == 1 / c;
        if (a == null || c == null)
            return a === c;
        if (a._chain)
            a = a._wrapped;
        if (c._chain)
            c = c._wrapped;
        if (a.isEqual && b.isFunction(a.isEqual))
            return a.isEqual(c);
        if (c.isEqual && b.isFunction(c.isEqual))
            return c.isEqual(a);
        var e = l.call(a);
        if (e != l.call(c))
            return false;
        switch (e) {
        case "[object String]":
            return a == String(c);
        case "[object Number]":
            return a != +a ? c != +c : a == 0 ? 1 / a == 1 / c : a == +c;
        case "[object Date]":
        case "[object Boolean]":
            return +a == +c;
        case "[object RegExp]":
            return a.source == c.source && a.global == c.global && a.multiline == c.multiline && a.ignoreCase == c.ignoreCase
        }
        if (typeof a != "object" || typeof c != "object")
            return false;
        for (var f = d.length; f--; )
            if (d[f] == a)
                return true;
        d.push(a);
        var f = 0
          , g = true;
        if (e == "[object Array]") {
            if (f = a.length,
            g = f == c.length)
                for (; f--; )
                    if (!(g = f in a == f in c && q(a[f], c[f], d)))
                        break
        } else {
            if ("constructor"in a != "constructor"in c || a.constructor != c.constructor)
                return false;
            for (var h in a)
                if (b.has(a, h) && (f++,
                !(g = b.has(c, h) && q(a[h], c[h], d))))
                    break;
            if (g) {
                for (h in c)
                    if (b.has(c, h) && !f--)
                        break;
                g = !f
            }
        }
        d.pop();
        return g
    }
    var r = this
      , G = r._
      , n = {}
      , k = Array.prototype
      , o = Object.prototype
      , i = k.slice
      , H = k.unshift
      , l = o.toString
      , I = o.hasOwnProperty
      , w = k.forEach
      , x = k.map
      , y = k.reduce
      , z = k.reduceRight
      , A = k.filter
      , B = k.every
      , C = k.some
      , p = k.indexOf
      , D = k.lastIndexOf
      , o = Array.isArray
      , J = Object.keys
      , s = Function.prototype.bind
      , b = function(a) {
        return new m(a)
    };
    if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports)
            exports = module.exports = b;
        exports._ = b
    } else
        r._ = b;
    b.VERSION = "1.3.1";
    var j = b.each = b.forEach = function(a, c, d) {
        if (a != null)
            if (w && a.forEach === w)
                a.forEach(c, d);
            else if (a.length === +a.length)
                for (var e = 0, f = a.length; e < f; e++) {
                    if (e in a && c.call(d, a[e], e, a) === n)
                        break
                }
            else
                for (e in a)
                    if (b.has(a, e) && c.call(d, a[e], e, a) === n)
                        break
    }
    ;
    b.map = b.collect = function(a, c, b) {
        var e = [];
        if (a == null)
            return e;
        if (x && a.map === x)
            return a.map(c, b);
        j(a, function(a, g, h) {
            e[e.length] = c.call(b, a, g, h)
        });
        if (a.length === +a.length)
            e.length = a.length;
        return e
    }
    ;
    b.reduce = b.foldl = b.inject = function(a, c, d, e) {
        var f = arguments.length > 2;
        a == null && (a = []);
        if (y && a.reduce === y)
            return e && (c = b.bind(c, e)),
            f ? a.reduce(c, d) : a.reduce(c);
        j(a, function(a, b, i) {
            f ? d = c.call(e, d, a, b, i) : (d = a,
            f = true)
        });
        if (!f)
            throw new TypeError("Reduce of empty array with no initial value");
        return d
    }
    ;
    b.reduceRight = b.foldr = function(a, c, d, e) {
        var f = arguments.length > 2;
        a == null && (a = []);
        if (z && a.reduceRight === z)
            return e && (c = b.bind(c, e)),
            f ? a.reduceRight(c, d) : a.reduceRight(c);
        var g = b.toArray(a).reverse();
        e && !f && (c = b.bind(c, e));
        return f ? b.reduce(g, c, d, e) : b.reduce(g, c)
    }
    ;
    b.find = b.detect = function(a, c, b) {
        var e;
        E(a, function(a, g, h) {
            if (c.call(b, a, g, h))
                return e = a,
                true
        });
        return e
    }
    ;
    b.filter = b.select = function(a, c, b) {
        var e = [];
        if (a == null)
            return e;
        if (A && a.filter === A)
            return a.filter(c, b);
        j(a, function(a, g, h) {
            c.call(b, a, g, h) && (e[e.length] = a)
        });
        return e
    }
    ;
    b.reject = function(a, c, b) {
        var e = [];
        if (a == null)
            return e;
        j(a, function(a, g, h) {
            c.call(b, a, g, h) || (e[e.length] = a)
        });
        return e
    }
    ;
    b.every = b.all = function(a, c, b) {
        var e = true;
        if (a == null)
            return e;
        if (B && a.every === B)
            return a.every(c, b);
        j(a, function(a, g, h) {
            if (!(e = e && c.call(b, a, g, h)))
                return n
        });
        return e
    }
    ;
    var E = b.some = b.any = function(a, c, d) {
        c || (c = b.identity);
        var e = false;
        if (a == null)
            return e;
        if (C && a.some === C)
            return a.some(c, d);
        j(a, function(a, b, h) {
            if (e || (e = c.call(d, a, b, h)))
                return n
        });
        return !!e
    }
    ;
    b.include = b.contains = function(a, c) {
        var b = false;
        if (a == null)
            return b;
        return p && a.indexOf === p ? a.indexOf(c) != -1 : b = E(a, function(a) {
            return a === c
        })
    }
    ;
    b.invoke = function(a, c) {
        var d = i.call(arguments, 2);
        return b.map(a, function(a) {
            return (b.isFunction(c) ? c || a : a[c]).apply(a, d)
        })
    }
    ;
    b.pluck = function(a, c) {
        return b.map(a, function(a) {
            return a[c]
        })
    }
    ;
    b.max = function(a, c, d) {
        if (!c && b.isArray(a))
            return Math.max.apply(Math, a);
        if (!c && b.isEmpty(a))
            return -Infinity;
        var e = {
            computed: -Infinity
        };
        j(a, function(a, b, h) {
            b = c ? c.call(d, a, b, h) : a;
            b >= e.computed && (e = {
                value: a,
                computed: b
            })
        });
        return e.value
    }
    ;
    b.min = function(a, c, d) {
        if (!c && b.isArray(a))
            return Math.min.apply(Math, a);
        if (!c && b.isEmpty(a))
            return Infinity;
        var e = {
            computed: Infinity
        };
        j(a, function(a, b, h) {
            b = c ? c.call(d, a, b, h) : a;
            b < e.computed && (e = {
                value: a,
                computed: b
            })
        });
        return e.value
    }
    ;
    b.shuffle = function(a) {
        var b = [], d;
        j(a, function(a, f) {
            f == 0 ? b[0] = a : (d = Math.floor(Math.random() * (f + 1)),
            b[f] = b[d],
            b[d] = a)
        });
        return b
    }
    ;
    b.sortBy = function(a, c, d) {
        return b.pluck(b.map(a, function(a, b, g) {
            return {
                value: a,
                criteria: c.call(d, a, b, g)
            }
        }).sort(function(a, b) {
            var c = a.criteria
              , d = b.criteria;
            return c < d ? -1 : c > d ? 1 : 0
        }), "value")
    }
    ;
    b.groupBy = function(a, c) {
        var d = {}
          , e = b.isFunction(c) ? c : function(a) {
            return a[c]
        }
        ;
        j(a, function(a, b) {
            var c = e(a, b);
            (d[c] || (d[c] = [])).push(a)
        });
        return d
    }
    ;
    b.sortedIndex = function(a, c, d) {
        d || (d = b.identity);
        for (var e = 0, f = a.length; e < f; ) {
            var g = e + f >> 1;
            d(a[g]) < d(c) ? e = g + 1 : f = g
        }
        return e
    }
    ;
    b.toArray = function(a) {
        return !a ? [] : a.toArray ? a.toArray() : b.isArray(a) ? i.call(a) : b.isArguments(a) ? i.call(a) : b.values(a)
    }
    ;
    b.size = function(a) {
        return b.toArray(a).length
    }
    ;
    b.first = b.head = function(a, b, d) {
        return b != null && !d ? i.call(a, 0, b) : a[0]
    }
    ;
    b.initial = function(a, b, d) {
        return i.call(a, 0, a.length - (b == null || d ? 1 : b))
    }
    ;
    b.last = function(a, b, d) {
        return b != null && !d ? i.call(a, Math.max(a.length - b, 0)) : a[a.length - 1]
    }
    ;
    b.rest = b.tail = function(a, b, d) {
        return i.call(a, b == null || d ? 1 : b)
    }
    ;
    b.compact = function(a) {
        return b.filter(a, function(a) {
            return !!a
        })
    }
    ;
    b.flatten = function(a, c) {
        return b.reduce(a, function(a, e) {
            if (b.isArray(e))
                return a.concat(c ? e : b.flatten(e));
            a[a.length] = e;
            return a
        }, [])
    }
    ;
    b.without = function(a) {
        return b.difference(a, i.call(arguments, 1))
    }
    ;
    b.uniq = b.unique = function(a, c, d) {
        var d = d ? b.map(a, d) : a
          , e = [];
        b.reduce(d, function(d, g, h) {
            if (0 == h || (c === true ? b.last(d) != g : !b.include(d, g)))
                d[d.length] = g,
                e[e.length] = a[h];
            return d
        }, []);
        return e
    }
    ;
    b.union = function() {
        return b.uniq(b.flatten(arguments, true))
    }
    ;
    b.intersection = b.intersect = function(a) {
        var c = i.call(arguments, 1);
        return b.filter(b.uniq(a), function(a) {
            return b.every(c, function(c) {
                return b.indexOf(c, a) >= 0
            })
        })
    }
    ;
    b.difference = function(a) {
        var c = b.flatten(i.call(arguments, 1));
        return b.filter(a, function(a) {
            return !b.include(c, a)
        })
    }
    ;
    b.zip = function() {
        for (var a = i.call(arguments), c = b.max(b.pluck(a, "length")), d = Array(c), e = 0; e < c; e++)
            d[e] = b.pluck(a, "" + e);
        return d
    }
    ;
    b.indexOf = function(a, c, d) {
        if (a == null)
            return -1;
        var e;
        if (d)
            return d = b.sortedIndex(a, c),
            a[d] === c ? d : -1;
        if (p && a.indexOf === p)
            return a.indexOf(c);
        for (d = 0,
        e = a.length; d < e; d++)
            if (d in a && a[d] === c)
                return d;
        return -1
    }
    ;
    b.lastIndexOf = function(a, b) {
        if (a == null)
            return -1;
        if (D && a.lastIndexOf === D)
            return a.lastIndexOf(b);
        for (var d = a.length; d--; )
            if (d in a && a[d] === b)
                return d;
        return -1
    }
    ;
    b.range = function(a, b, d) {
        arguments.length <= 1 && (b = a || 0,
        a = 0);
        for (var d = arguments[2] || 1, e = Math.max(Math.ceil((b - a) / d), 0), f = 0, g = Array(e); f < e; )
            g[f++] = a,
            a += d;
        return g
    }
    ;
    var F = function() {};
    b.bind = function(a, c) {
        var d, e;
        if (a.bind === s && s)
            return s.apply(a, i.call(arguments, 1));
        if (!b.isFunction(a))
            throw new TypeError;
        e = i.call(arguments, 2);
        return d = function() {
            if (!(this instanceof d))
                return a.apply(c, e.concat(i.call(arguments)));
            F.prototype = a.prototype;
            var b = new F
              , g = a.apply(b, e.concat(i.call(arguments)));
            return Object(g) === g ? g : b
        }
    }
    ;
    b.bindAll = function(a) {
        var c = i.call(arguments, 1);
        c.length == 0 && (c = b.functions(a));
        j(c, function(c) {
            a[c] = b.bind(a[c], a)
        });
        return a
    }
    ;
    b.memoize = function(a, c) {
        var d = {};
        c || (c = b.identity);
        return function() {
            var e = c.apply(this, arguments);
            return b.has(d, e) ? d[e] : d[e] = a.apply(this, arguments)
        }
    }
    ;
    b.delay = function(a, b) {
        var d = i.call(arguments, 2);
        return setTimeout(function() {
            return a.apply(a, d)
        }, b)
    }
    ;
    b.defer = function(a) {
        return b.delay.apply(b, [a, 1].concat(i.call(arguments, 1)))
    }
    ;
    b.throttle = function(a, c) {
        var d, e, f, g, h, i = b.debounce(function() {
            h = g = false
        }, c);
        return function() {
            d = this;
            e = arguments;
            var b;
            f || (f = setTimeout(function() {
                f = null;
                h && a.apply(d, e);
                i()
            }, c));
            g ? h = true : a.apply(d, e);
            i();
            g = true
        }
    }
    ;
    b.debounce = function(a, b) {
        var d;
        return function() {
            var e = this
              , f = arguments;
            clearTimeout(d);
            d = setTimeout(function() {
                d = null;
                a.apply(e, f)
            }, b)
        }
    }
    ;
    b.once = function(a) {
        var b = false, d;
        return function() {
            if (b)
                return d;
            b = true;
            return d = a.apply(this, arguments)
        }
    }
    ;
    b.wrap = function(a, b) {
        return function() {
            var d = [a].concat(i.call(arguments, 0));
            return b.apply(this, d)
        }
    }
    ;
    b.compose = function() {
        var a = arguments;
        return function() {
            for (var b = arguments, d = a.length - 1; d >= 0; d--)
                b = [a[d].apply(this, b)];
            return b[0]
        }
    }
    ;
    b.after = function(a, b) {
        return a <= 0 ? b() : function() {
            if (--a < 1)
                return b.apply(this, arguments)
        }
    }
    ;
    b.keys = J || function(a) {
        if (a !== Object(a))
            throw new TypeError("Invalid object");
        var c = [], d;
        for (d in a)
            b.has(a, d) && (c[c.length] = d);
        return c
    }
    ;
    b.values = function(a) {
        return b.map(a, b.identity)
    }
    ;
    b.functions = b.methods = function(a) {
        var c = [], d;
        for (d in a)
            b.isFunction(a[d]) && c.push(d);
        return c.sort()
    }
    ;
    b.extend = function(a) {
        j(i.call(arguments, 1), function(b) {
            for (var d in b)
                a[d] = b[d]
        });
        return a
    }
    ;
    b.defaults = function(a) {
        j(i.call(arguments, 1), function(b) {
            for (var d in b)
                a[d] == null && (a[d] = b[d])
        });
        return a
    }
    ;
    b.clone = function(a) {
        return !b.isObject(a) ? a : b.isArray(a) ? a.slice() : b.extend({}, a)
    }
    ;
    b.tap = function(a, b) {
        b(a);
        return a
    }
    ;
    b.isEqual = function(a, b) {
        return q(a, b, [])
    }
    ;
    b.isEmpty = function(a) {
        if (b.isArray(a) || b.isString(a))
            return a.length === 0;
        for (var c in a)
            if (b.has(a, c))
                return false;
        return true
    }
    ;
    b.isElement = function(a) {
        return !!(a && a.nodeType == 1)
    }
    ;
    b.isArray = o || function(a) {
        return l.call(a) == "[object Array]"
    }
    ;
    b.isObject = function(a) {
        return a === Object(a)
    }
    ;
    b.isArguments = function(a) {
        return l.call(a) == "[object Arguments]"
    }
    ;
    if (!b.isArguments(arguments))
        b.isArguments = function(a) {
            return !(!a || !b.has(a, "callee"))
        }
        ;
    b.isFunction = function(a) {
        return l.call(a) == "[object Function]"
    }
    ;
    b.isString = function(a) {
        return l.call(a) == "[object String]"
    }
    ;
    b.isNumber = function(a) {
        return l.call(a) == "[object Number]"
    }
    ;
    b.isNaN = function(a) {
        return a !== a
    }
    ;
    b.isBoolean = function(a) {
        return a === true || a === false || l.call(a) == "[object Boolean]"
    }
    ;
    b.isDate = function(a) {
        return l.call(a) == "[object Date]"
    }
    ;
    b.isRegExp = function(a) {
        return l.call(a) == "[object RegExp]"
    }
    ;
    b.isNull = function(a) {
        return a === null
    }
    ;
    b.isUndefined = function(a) {
        return a === void 0
    }
    ;
    b.has = function(a, b) {
        return I.call(a, b)
    }
    ;
    b.noConflict = function() {
        r._ = G;
        return this
    }
    ;
    b.identity = function(a) {
        return a
    }
    ;
    b.times = function(a, b, d) {
        for (var e = 0; e < a; e++)
            b.call(d, e)
    }
    ;
    b.escape = function(a) {
        return ("" + a).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;")
    }
    ;
    b.mixin = function(a) {
        j(b.functions(a), function(c) {
            K(c, b[c] = a[c])
        })
    }
    ;
    var L = 0;
    b.uniqueId = function(a) {
        var b = L++;
        return a ? a + b : b
    }
    ;
    b.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var t = /.^/
      , u = function(a) {
        return a.replace(/\\\\/g, "\\").replace(/\\'/g, "'")
    };
    b.template = function(a, c) {
        var d = b.templateSettings
          , d = "var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('" + a.replace(/\\/g, "\\\\").replace(/'/g, "\\'").replace(d.escape || t, function(a, b) {
            return "',_.escape(" + u(b) + "),'"
        }).replace(d.interpolate || t, function(a, b) {
            return "'," + u(b) + ",'"
        }).replace(d.evaluate || t, function(a, b) {
            return "');" + u(b).replace(/[\r\n\t]/g, " ") + ";__p.push('"
        }).replace(/\r/g, "\\r").replace(/\n/g, "\\n").replace(/\t/g, "\\t") + "');}return __p.join('');"
          , e = new Function("obj","_",d);
        return c ? e(c, b) : function(a) {
            return e.call(this, a, b)
        }
    }
    ;
    b.chain = function(a) {
        return b(a).chain()
    }
    ;
    var m = function(a) {
        this._wrapped = a
    };
    b.prototype = m.prototype;
    var v = function(a, c) {
        return c ? b(a).chain() : a
    }
      , K = function(a, c) {
        m.prototype[a] = function() {
            var a = i.call(arguments);
            H.call(a, this._wrapped);
            return v(c.apply(b, a), this._chain)
        }
    };
    b.mixin(b);
    j("pop,push,reverse,shift,sort,splice,unshift".split(","), function(a) {
        var b = k[a];
        m.prototype[a] = function() {
            var d = this._wrapped;
            b.apply(d, arguments);
            var e = d.length;
            (a == "shift" || a == "splice") && e === 0 && delete d[0];
            return v(d, this._chain)
        }
    });
    j(["concat", "join", "slice"], function(a) {
        var b = k[a];
        m.prototype[a] = function() {
            return v(b.apply(this._wrapped, arguments), this._chain)
        }
    });
    m.prototype.chain = function() {
        this._chain = true;
        return this
    }
    ;
    m.prototype.value = function() {
        return this._wrapped
    }
}
).call(this);
(function() {
    var Q = this;
    var O = Q.Backbone;
    var P = Array.prototype.slice;
    var Y = Array.prototype.splice;
    var C;
    if (typeof exports !== "undefined") {
        C = exports
    } else {
        C = Q.Backbone = {}
    }
    C.VERSION = "0.9.2";
    var a = Q._;
    if (!a && (typeof require !== "undefined")) {
        a = require("underscore")
    }
    var G = Q.jQuery || Q.Zepto || Q.ender;
    C.setDomLibrary = function(c) {
        G = c
    }
    ;
    C.noConflict = function() {
        Q.Backbone = O;
        return this
    }
    ;
    C.emulateHTTP = false;
    C.emulateJSON = false;
    var A = /\s+/;
    var N = C.Events = {
        on: function(f, j, e) {
            var d, h, g, c, i;
            if (!j) {
                return this
            }
            f = f.split(A);
            d = this._callbacks || (this._callbacks = {});
            while (h = f.shift()) {
                i = d[h];
                g = i ? i.tail : {};
                g.next = c = {};
                g.context = e;
                g.callback = j;
                d[h] = {
                    tail: c,
                    next: i ? i.next : g
                }
            }
            return this
        },
        off: function(j, h, d) {
            var c, k, e, g, f, i;
            if (!(k = this._callbacks)) {
                return
            }
            if (!(j || h || d)) {
                delete this._callbacks;
                return this
            }
            j = j ? j.split(A) : a.keys(k);
            while (c = j.shift()) {
                e = k[c];
                delete k[c];
                if (!e || !(h || d)) {
                    continue
                }
                g = e.tail;
                while ((e = e.next) !== g) {
                    f = e.callback;
                    i = e.context;
                    if ((h && f !== h) || (d && i !== d)) {
                        this.on(c, f, i)
                    }
                }
            }
            return this
        },
        trigger: function(f) {
            var j, i, e, d, c, h, g;
            if (!(e = this._callbacks)) {
                return this
            }
            h = e.all;
            f = f.split(A);
            g = P.call(arguments, 1);
            while (j = f.shift()) {
                if (i = e[j]) {
                    d = i.tail;
                    while ((i = i.next) !== d) {
                        i.callback.apply(i.context || this, g)
                    }
                }
                if (i = h) {
                    d = i.tail;
                    c = [j].concat(g);
                    while ((i = i.next) !== d) {
                        i.callback.apply(i.context || this, c)
                    }
                }
            }
            return this
        }
    };
    N.bind = N.on;
    N.unbind = N.off;
    var K = C.Model = function(c, d) {
        var e;
        c || (c = {});
        if (d && d.parse) {
            c = this.parse(c)
        }
        if (e = D(this, "defaults")) {
            c = a.extend({}, e, c)
        }
        if (d && d.collection) {
            this.collection = d.collection
        }
        this.attributes = {};
        this._escapedAttributes = {};
        this.cid = a.uniqueId("c");
        this.changed = {};
        this._silent = {};
        this._pending = {};
        this.set(c, {
            silent: true
        });
        this.changed = {};
        this._silent = {};
        this._pending = {};
        this._previousAttributes = a.clone(this.attributes);
        this.initialize.apply(this, arguments)
    }
    ;
    a.extend(K.prototype, N, {
        changed: null,
        _silent: null,
        _pending: null,
        idAttribute: "id",
        initialize: function() {},
        toJSON: function(c) {
            return a.clone(this.attributes)
        },
        get: function(c) {
            return this.attributes[c]
        },
        escape: function(c) {
            var d;
            if (d = this._escapedAttributes[c]) {
                return d
            }
            var e = this.get(c);
            return this._escapedAttributes[c] = a.escape(e == null ? "" : "" + e)
        },
        has: function(c) {
            return this.get(c) != null
        },
        set: function(j, i, l) {
            var k, g, e;
            if (a.isObject(j) || j == null) {
                k = j;
                l = i
            } else {
                k = {};
                k[j] = i
            }
            l || (l = {});
            if (!k) {
                return this
            }
            if (k instanceof K) {
                k = k.attributes
            }
            if (l.unset) {
                for (g in k) {
                    k[g] = void 0
                }
            }
            if (!this._validate(k, l)) {
                return false
            }
            if (this.idAttribute in k) {
                this.id = k[this.idAttribute]
            }
            var h = l.changes = {};
            var d = this.attributes;
            var c = this._escapedAttributes;
            var f = this._previousAttributes || {};
            for (g in k) {
                e = k[g];
                if (!a.isEqual(d[g], e) || (l.unset && a.has(d, g))) {
                    delete c[g];
                    (l.silent ? this._silent : h)[g] = true
                }
                l.unset ? delete d[g] : d[g] = e;
                if (!a.isEqual(f[g], e) || (a.has(d, g) != a.has(f, g))) {
                    this.changed[g] = e;
                    if (!l.silent) {
                        this._pending[g] = true
                    }
                } else {
                    delete this.changed[g];
                    delete this._pending[g]
                }
            }
            if (!l.silent) {
                this.change(l)
            }
            return this
        },
        unset: function(c, d) {
            (d || (d = {})).unset = true;
            return this.set(c, null, d)
        },
        clear: function(c) {
            (c || (c = {})).unset = true;
            return this.set(a.clone(this.attributes), c)
        },
        fetch: function(d) {
            d = d ? a.clone(d) : {};
            var c = this;
            var e = d.success;
            d.success = function(h, f, g) {
                if (!c.set(c.parse(h, g), d)) {
                    return false
                }
                if (e) {
                    e(c, h)
                }
            }
            ;
            d.error = C.wrapError(d.error, c, d);
            return (this.sync || C.sync).call(this, "read", this, d)
        },
        save: function(h, g, l) {
            var i, f;
            if (a.isObject(h) || h == null) {
                i = h;
                l = g
            } else {
                i = {};
                i[h] = g
            }
            l = l ? a.clone(l) : {};
            if (l.wait) {
                if (!this._validate(i, l)) {
                    return false
                }
                f = a.clone(this.attributes)
            }
            var d = a.extend({}, l, {
                silent: true
            });
            if (i && !this.set(i, l.wait ? d : l)) {
                return false
            }
            var e = this;
            var j = l.success;
            l.success = function(p, m, o) {
                var n = e.parse(p, o);
                if (l.wait) {
                    delete l.wait;
                    n = a.extend(i || {}, n)
                }
                if (!e.set(n, l)) {
                    return false
                }
                if (j) {
                    j(e, p)
                } else {
                    e.trigger("sync", e, p, l)
                }
            }
            ;
            l.error = C.wrapError(l.error, e, l);
            var c = this.isNew() ? "create" : "update";
            var k = (this.sync || C.sync).call(this, c, this, l);
            if (l.wait) {
                this.set(f, d)
            }
            return k
        },
        destroy: function(d) {
            d = d ? a.clone(d) : {};
            var c = this;
            var g = d.success;
            var f = function() {
                c.trigger("destroy", c, c.collection, d)
            };
            if (this.isNew()) {
                f();
                return false
            }
            d.success = function(h) {
                if (d.wait) {
                    f()
                }
                if (g) {
                    g(c, h)
                } else {
                    c.trigger("sync", c, h, d)
                }
            }
            ;
            d.error = C.wrapError(d.error, c, d);
            var e = (this.sync || C.sync).call(this, "delete", this, d);
            if (!d.wait) {
                f()
            }
            return e
        },
        url: function() {
            var c = D(this, "urlRoot") || D(this.collection, "url") || T();
            if (this.isNew()) {
                return c
            }
            return c + (c.charAt(c.length - 1) == "/" ? "" : "/") + encodeURIComponent(this.id)
        },
        parse: function(d, c) {
            return d
        },
        clone: function() {
            return new this.constructor(this.attributes)
        },
        isNew: function() {
            return this.id == null
        },
        change: function(d) {
            d || (d = {});
            var f = this._changing;
            this._changing = true;
            for (var c in this._silent) {
                this._pending[c] = true
            }
            var e = a.extend({}, d.changes, this._silent);
            this._silent = {};
            for (var c in e) {
                this.trigger("change:" + c, this, this.get(c), d)
            }
            if (f) {
                return this
            }
            while (!a.isEmpty(this._pending)) {
                this._pending = {};
                this.trigger("change", this, d);
                for (var c in this.changed) {
                    if (this._pending[c] || this._silent[c]) {
                        continue
                    }
                    delete this.changed[c]
                }
                this._previousAttributes = a.clone(this.attributes)
            }
            this._changing = false;
            return this
        },
        hasChanged: function(c) {
            if (!arguments.length) {
                return !a.isEmpty(this.changed)
            }
            return a.has(this.changed, c)
        },
        changedAttributes: function(e) {
            if (!e) {
                return this.hasChanged() ? a.clone(this.changed) : false
            }
            var g, f = false, d = this._previousAttributes;
            for (var c in e) {
                if (a.isEqual(d[c], (g = e[c]))) {
                    continue
                }
                (f || (f = {}))[c] = g
            }
            return f
        },
        previous: function(c) {
            if (!arguments.length || !this._previousAttributes) {
                return null
            }
            return this._previousAttributes[c]
        },
        previousAttributes: function() {
            return a.clone(this._previousAttributes)
        },
        isValid: function() {
            return !this.validate(this.attributes)
        },
        _validate: function(e, d) {
            if (d.silent || !this.validate) {
                return true
            }
            e = a.extend({}, this.attributes, e);
            var c = this.validate(e, d);
            if (!c) {
                return true
            }
            if (d && d.error) {
                d.error(this, c, d)
            } else {
                this.trigger("error", this, c, d)
            }
            return false
        }
    });
    var b = C.Collection = function(d, c) {
        c || (c = {});
        if (c.model) {
            this.model = c.model
        }
        if (c.comparator) {
            this.comparator = c.comparator
        }
        this._reset();
        this.initialize.apply(this, arguments);
        if (d) {
            this.reset(d, {
                silent: true,
                parse: c.parse
            })
        }
    }
    ;
    a.extend(b.prototype, N, {
        model: K,
        initialize: function() {},
        toJSON: function(c) {
            return this.map(function(d) {
                return d.toJSON(c)
            })
        },
        add: function(d, n) {
            var j, l, f, k, m, e, g = {}, c = {}, h = [];
            n || (n = {});
            d = a.isArray(d) ? d.slice() : [d];
            for (j = 0,
            f = d.length; j < f; j++) {
                if (!(k = d[j] = this._prepareModel(d[j], n))) {
                    throw new Error("Can't add an invalid model to a collection")
                }
                m = k.cid;
                e = k.id;
                if (g[m] || this._byCid[m] || ((e != null) && (c[e] || this._byId[e]))) {
                    h.push(j);
                    continue
                }
                g[m] = c[e] = k
            }
            j = h.length;
            while (j--) {
                d.splice(h[j], 1)
            }
            for (j = 0,
            f = d.length; j < f; j++) {
                (k = d[j]).on("all", this._onModelEvent, this);
                this._byCid[k.cid] = k;
                if (k.id != null) {
                    this._byId[k.id] = k
                }
            }
            this.length += f;
            l = n.at != null ? n.at : this.models.length;
            Y.apply(this.models, [l, 0].concat(d));
            if (this.comparator) {
                this.sort({
                    silent: true
                })
            }
            if (n.silent) {
                return this
            }
            for (j = 0,
            f = this.models.length; j < f; j++) {
                if (!g[(k = this.models[j]).cid]) {
                    continue
                }
                n.index = j;
                k.trigger("add", k, this, n)
            }
            return this
        },
        remove: function(h, f) {
            var g, c, e, d;
            f || (f = {});
            h = a.isArray(h) ? h.slice() : [h];
            for (g = 0,
            c = h.length; g < c; g++) {
                d = this.getByCid(h[g]) || this.get(h[g]);
                if (!d) {
                    continue
                }
                delete this._byId[d.id];
                delete this._byCid[d.cid];
                e = this.indexOf(d);
                this.models.splice(e, 1);
                this.length--;
                if (!f.silent) {
                    f.index = e;
                    d.trigger("remove", d, this, f)
                }
                this._removeReference(d)
            }
            return this
        },
        push: function(d, c) {
            d = this._prepareModel(d, c);
            this.add(d, c);
            return d
        },
        pop: function(d) {
            var c = this.at(this.length - 1);
            this.remove(c, d);
            return c
        },
        unshift: function(d, c) {
            d = this._prepareModel(d, c);
            this.add(d, a.extend({
                at: 0
            }, c));
            return d
        },
        shift: function(d) {
            var c = this.at(0);
            this.remove(c, d);
            return c
        },
        get: function(c) {
            if (c == null) {
                return void 0
            }
            return this._byId[c.id != null ? c.id : c]
        },
        getByCid: function(c) {
            return c && this._byCid[c.cid || c]
        },
        at: function(c) {
            return this.models[c]
        },
        where: function(c) {
            if (a.isEmpty(c)) {
                return []
            }
            return this.filter(function(d) {
                for (var e in c) {
                    if (c[e] !== d.get(e)) {
                        return false
                    }
                }
                return true
            })
        },
        sort: function(d) {
            d || (d = {});
            if (!this.comparator) {
                throw new Error("Cannot sort a set without a comparator")
            }
            var c = a.bind(this.comparator, this);
            if (this.comparator.length == 1) {
                this.models = this.sortBy(c)
            } else {
                this.models.sort(c)
            }
            if (!d.silent) {
                this.trigger("reset", this, d)
            }
            return this
        },
        pluck: function(c) {
            return a.map(this.models, function(d) {
                return d.get(c)
            })
        },
        reset: function(f, d) {
            f || (f = []);
            d || (d = {});
            for (var e = 0, c = this.models.length; e < c; e++) {
                this._removeReference(this.models[e])
            }
            this._reset();
            this.add(f, a.extend({
                silent: true
            }, d));
            if (!d.silent) {
                this.trigger("reset", this, d)
            }
            return this
        },
        fetch: function(c) {
            c = c ? a.clone(c) : {};
            if (c.parse === undefined) {
                c.parse = true
            }
            var e = this;
            var d = c.success;
            c.success = function(h, f, g) {
                e[c.add ? "add" : "reset"](e.parse(h, g), c);
                if (d) {
                    d(e, h)
                }
            }
            ;
            c.error = C.wrapError(c.error, e, c);
            return (this.sync || C.sync).call(this, "read", this, c)
        },
        create: function(d, c) {
            var e = this;
            c = c ? a.clone(c) : {};
            d = this._prepareModel(d, c);
            if (!d) {
                return false
            }
            if (!c.wait) {
                e.add(d, c)
            }
            var f = c.success;
            c.success = function(g, i, h) {
                if (c.wait) {
                    e.add(g, c)
                }
                if (f) {
                    f(g, i)
                } else {
                    g.trigger("sync", d, i, c)
                }
            }
            ;
            d.save(null, c);
            return d
        },
        parse: function(d, c) {
            return d
        },
        chain: function() {
            return a(this.models).chain()
        },
        _reset: function(c) {
            this.length = 0;
            this.models = [];
            this._byId = {};
            this._byCid = {}
        },
        _prepareModel: function(e, d) {
            d || (d = {});
            if (!(e instanceof K)) {
                var c = e;
                d.collection = this;
                e = new this.model(c,d);
                if (!e._validate(e.attributes, d)) {
                    e = false
                }
            } else {
                if (!e.collection) {
                    e.collection = this
                }
            }
            return e
        },
        _removeReference: function(c) {
            if (this == c.collection) {
                delete c.collection
            }
            c.off("all", this._onModelEvent, this)
        },
        _onModelEvent: function(e, d, f, c) {
            if ((e == "add" || e == "remove") && f != this) {
                return
            }
            if (e == "destroy") {
                this.remove(d, c)
            }
            if (d && e === "change:" + d.idAttribute) {
                delete this._byId[d.previous(d.idAttribute)];
                this._byId[d.id] = d
            }
            this.trigger.apply(this, arguments)
        }
    });
    var W = ["forEach", "each", "map", "reduce", "reduceRight", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "sortBy", "sortedIndex", "toArray", "size", "first", "initial", "rest", "last", "without", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "groupBy"];
    a.each(W, function(c) {
        b.prototype[c] = function() {
            return a[c].apply(a, [this.models].concat(a.toArray(arguments)))
        }
    });
    var Z = C.Router = function(c) {
        c || (c = {});
        if (c.routes) {
            this.routes = c.routes
        }
        this._bindRoutes();
        this.initialize.apply(this, arguments)
    }
    ;
    var I = /:\w+/g;
    var X = /\*\w+/g;
    var E = /[-[\]{}()+?.,\\^$|#\s]/g;
    a.extend(Z.prototype, N, {
        initialize: function() {},
        route: function(c, d, e) {
            C.history || (C.history = new B);
            if (!a.isRegExp(c)) {
                c = this._routeToRegExp(c)
            }
            if (!e) {
                e = this[d]
            }
            C.history.route(c, a.bind(function(g) {
                var f = this._extractParameters(c, g);
                e && e.apply(this, f);
                this.trigger.apply(this, ["route:" + d].concat(f));
                C.history.trigger("route", this, d, f)
            }, this));
            return this
        },
        navigate: function(d, c) {
            C.history.navigate(d, c)
        },
        _bindRoutes: function() {
            if (!this.routes) {
                return
            }
            var d = [];
            for (var e in this.routes) {
                d.unshift([e, this.routes[e]])
            }
            for (var f = 0, c = d.length; f < c; f++) {
                this.route(d[f][0], d[f][1], this[d[f][1]])
            }
        },
        _routeToRegExp: function(c) {
            c = c.replace(E, "\\$&").replace(I, "([^/]+)").replace(X, "(.*?)");
            return new RegExp("^" + c + "$")
        },
        _extractParameters: function(c, d) {
            return c.exec(d).slice(1)
        }
    });
    var B = C.History = function() {
        this.handlers = [];
        a.bindAll(this, "checkUrl")
    }
    ;
    var M = /^[#\/]/;
    var J = /msie [\w.]+/;
    B.started = false;
    a.extend(B.prototype, N, {
        interval: 50,
        getHash: function(e) {
            var d = e ? e.location : window.location;
            var c = d.href.match(/#(.*)$/);
            return c ? c[1] : ""
        },
        getFragment: function(d, c) {
            if (d == null) {
                if (this._hasPushState || c) {
                    d = window.location.pathname;
                    var e = window.location.search;
                    if (e) {
                        d += e
                    }
                } else {
                    d = this.getHash()
                }
            }
            if (!d.indexOf(this.options.root)) {
                d = d.substr(this.options.root.length)
            }
            return d.replace(M, "")
        },
        start: function(e) {
            if (B.started) {
                throw new Error("Backbone.history has already been started")
            }
            B.started = true;
            this.options = a.extend({}, {
                root: "/"
            }, this.options, e);
            this._wantsHashChange = this.options.hashChange !== false;
            this._wantsPushState = !!this.options.pushState;
            this._hasPushState = !!(this.options.pushState && window.history && window.history.pushState);
            var d = this.getFragment();
            var c = document.documentMode;
            var g = (J.exec(navigator.userAgent.toLowerCase()) && (!c || c <= 7));
            if (g) {
                this.iframe = G('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow;
                this.navigate(d)
            }
            if (this._hasPushState) {
                G(window).bind("popstate", this.checkUrl)
            } else {
                if (this._wantsHashChange && ("onhashchange"in window) && !g) {
                    G(window).bind("hashchange", this.checkUrl)
                } else {
                    if (this._wantsHashChange) {
                        this._checkUrlInterval = setInterval(this.checkUrl, this.interval)
                    }
                }
            }
            this.fragment = d;
            var h = window.location;
            var f = h.pathname == this.options.root;
            if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !f) {
                this.fragment = this.getFragment(null, true);
                window.location.replace(this.options.root + "#" + this.fragment);
                return true
            } else {
                if (this._wantsPushState && this._hasPushState && f && h.hash) {
                    this.fragment = this.getHash().replace(M, "");
                    window.history.replaceState({}, document.title, h.protocol + "//" + h.host + this.options.root + this.fragment)
                }
            }
            if (!this.options.silent) {
                return this.loadUrl()
            }
        },
        stop: function() {
            G(window).unbind("popstate", this.checkUrl).unbind("hashchange", this.checkUrl);
            clearInterval(this._checkUrlInterval);
            B.started = false
        },
        route: function(c, d) {
            this.handlers.unshift({
                route: c,
                callback: d
            })
        },
        checkUrl: function(d) {
            var c = this.getFragment();
            if (c == this.fragment && this.iframe) {
                c = this.getFragment(this.getHash(this.iframe))
            }
            if (c == this.fragment) {
                return false
            }
            if (this.iframe) {
                this.navigate(c)
            }
            this.loadUrl() || this.loadUrl(this.getHash())
        },
        loadUrl: function(e) {
            var d = this.fragment = this.getFragment(e);
            var c = a.any(this.handlers, function(f) {
                if (f.route.test(d)) {
                    f.callback(d);
                    return true
                }
            });
            return c
        },
        navigate: function(d, c) {
            if (!B.started) {
                return false
            }
            if (!c || c === true) {
                c = {
                    trigger: c
                }
            }
            var e = (d || "").replace(M, "");
            if (this.fragment == e) {
                return
            }
            if (this._hasPushState) {
                if (e.indexOf(this.options.root) != 0) {
                    e = this.options.root + e
                }
                this.fragment = e;
                window.history[c.replace ? "replaceState" : "pushState"]({}, document.title, e)
            } else {
                if (this._wantsHashChange) {
                    this.fragment = e;
                    this._updateHash(window.location, e, c.replace);
                    if (this.iframe && (e != this.getFragment(this.getHash(this.iframe)))) {
                        if (!c.replace) {
                            this.iframe.document.open().close()
                        }
                        this._updateHash(this.iframe.location, e, c.replace)
                    }
                } else {
                    window.location.assign(this.options.root + d)
                }
            }
            if (c.trigger) {
                this.loadUrl(d)
            }
        },
        _updateHash: function(c, d, e) {
            if (e) {
                c.replace(c.toString().replace(/(javascript:|#).*$/, "") + "#" + d)
            } else {
                c.hash = d
            }
        }
    });
    var S = C.View = function(c) {
        this.cid = a.uniqueId("view");
        this._configure(c || {});
        this._ensureElement();
        this.initialize.apply(this, arguments);
        this.delegateEvents()
    }
    ;
    var F = /^(\S+)\s*(.*)$/;
    var U = ["model", "collection", "el", "id", "attributes", "className", "tagName"];
    a.extend(S.prototype, N, {
        tagName: "div",
        $: function(c) {
            return this.$el.find(c)
        },
        initialize: function() {},
        render: function() {
            return this
        },
        remove: function() {
            this.$el.remove();
            return this
        },
        make: function(d, c, f) {
            var e = document.createElement(d);
            if (c) {
                G(e).attr(c)
            }
            if (f) {
                G(e).html(f)
            }
            return e
        },
        setElement: function(c, d) {
            if (this.$el) {
                this.undelegateEvents()
            }
            this.$el = (c instanceof G) ? c : G(c);
            this.el = this.$el[0];
            if (d !== false) {
                this.delegateEvents()
            }
            return this
        },
        delegateEvents: function(g) {
            if (!(g || (g = D(this, "events")))) {
                return
            }
            this.undelegateEvents();
            for (var f in g) {
                var h = g[f];
                if (!a.isFunction(h)) {
                    h = this[g[f]]
                }
                if (!h) {
                    throw new Error('Method "' + g[f] + '" does not exist')
                }
                var e = f.match(F);
                var d = e[1]
                  , c = e[2];
                h = a.bind(h, this);
                d += ".delegateEvents" + this.cid;
                if (c === "") {
                    this.$el.bind(d, h)
                } else {
                    this.$el.delegate(c, d, h)
                }
            }
        },
        undelegateEvents: function() {
            this.$el.unbind(".delegateEvents" + this.cid)
        },
        _configure: function(e) {
            if (this.options) {
                e = a.extend({}, this.options, e)
            }
            for (var f = 0, d = U.length; f < d; f++) {
                var c = U[f];
                if (e[c]) {
                    this[c] = e[c]
                }
            }
            this.options = e
        },
        _ensureElement: function() {
            if (!this.el) {
                var c = D(this, "attributes") || {};
                if (this.id) {
                    c.id = this.id
                }
                if (this.className) {
                    c["class"] = this.className
                }
                this.setElement(this.make(this.tagName, c), false)
            } else {
                this.setElement(this.el, false)
            }
        }
    });
    var V = function(c, d) {
        var e = L(this, c, d);
        e.extend = this.extend;
        return e
    };
    K.extend = b.extend = Z.extend = S.extend = V;
    var R = {
        create: "POST",
        update: "PUT",
        "delete": "DELETE",
        read: "GET"
    };
    C.sync = function(g, d, c) {
        var e = R[g];
        c || (c = {});
        var f = {
            type: e,
            dataType: "json"
        };
        if (!c.url) {
            f.url = D(d, "url") || T()
        }
        if (!c.data && d && (g == "create" || g == "update")) {
            f.contentType = "application/json";
            f.data = JSON.stringify(d.toJSON())
        }
        if (C.emulateJSON) {
            f.contentType = "application/x-www-form-urlencoded";
            f.data = f.data ? {
                model: f.data
            } : {}
        }
        if (C.emulateHTTP) {
            if (e === "PUT" || e === "DELETE") {
                if (C.emulateJSON) {
                    f.data._method = e
                }
                f.type = "POST";
                f.beforeSend = function(h) {
                    h.setRequestHeader("X-HTTP-Method-Override", e)
                }
            }
        }
        if (f.type !== "GET" && !C.emulateJSON) {
            f.processData = false
        }
        return G.ajax(a.extend(f, c))
    }
    ;
    C.wrapError = function(d, e, c) {
        return function(f, g) {
            g = f === e ? g : f;
            if (d) {
                d(e, g, c)
            } else {
                e.trigger("error", e, g, c)
            }
        }
    }
    ;
    var H = function() {};
    var L = function(d, c, e) {
        var f;
        if (c && c.hasOwnProperty("constructor")) {
            f = c.constructor
        } else {
            f = function() {
                d.apply(this, arguments)
            }
        }
        a.extend(f, d);
        H.prototype = d.prototype;
        f.prototype = new H();
        if (c) {
            a.extend(f.prototype, c)
        }
        if (e) {
            a.extend(f, e)
        }
        f.prototype.constructor = f;
        f.__super__ = d.prototype;
        return f
    };
    var D = function(c, d) {
        if (!(c && c[d])) {
            return null
        }
        return a.isFunction(c[d]) ? c[d]() : c[d]
    };
    var T = function() {
        throw new Error('A "url" property or function must be specified')
    }
}
).call(this);
/*
 * Copyright 2008 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview
 * Utility functions and classes for Soy.
 *
 * <p>
 * The top portion of this file contains utilities for Soy users:<ul>
 *   <li> soy.StringBuilder: Compatible with the 'stringbuilder' code style.
 *   <li> soy.renderElement: Render template and set as innerHTML of an element.
 *   <li> soy.renderAsFragment: Render template and return as HTML fragment.
 * </ul>
 *
 * <p>
 * The bottom portion of this file contains utilities that should only be called
 * by Soy-generated JS code. Please do not use these functions directly from
 * your hand-writen code. Their names all start with '$$'.
 *
 * @author Mike Samuel
 * @author Kai Huang
 * @author Aharon Lenin
 */

// COPIED FROM nogoog_shim.js

// Create closure namespaces.
var goog;
if (typeof goog == "undefined") {
    goog = {};
}

goog.inherits = function(childCtor, parentCtor) {
    /** @constructor */
    function tempCtor() {}
    tempCtor.prototype = parentCtor.prototype;
    childCtor.superClass_ = parentCtor.prototype;
    childCtor.prototype = new tempCtor();
    childCtor.prototype.constructor = childCtor;
}
;

// Just enough browser detection for this file.
if (!goog.userAgent) {
    goog.userAgent = (function() {
        var userAgent = "";
        if ("undefined" !== typeof navigator && navigator && "string" == typeof navigator.userAgent) {
            userAgent = navigator.userAgent;
        }
        var isOpera = userAgent.indexOf('Opera') == 0;
        return {
            /**
       * @type {boolean}
       */
            HAS_JSCRIPT: typeof 'ScriptEngine'in this,
            /**
       * @type {boolean}
       */
            IS_OPERA: isOpera,
            /**
       * @type {boolean}
       */
            IS_IE: !isOpera && userAgent.indexOf('MSIE') != -1,
            /**
       * @type {boolean}
       */
            IS_WEBKIT: !isOpera && userAgent.indexOf('WebKit') != -1
        };
    }
    )();
}

if (!goog.asserts) {
    goog.asserts = {
        fail: function() {}
    };
}

// Stub out the document wrapper used by renderAs*.
if (!goog.dom) {
    goog.dom = {
        DomHelper: function(d) {
            d = d || document;
            return {
                createElement: function(name) {
                    return d.createElement(name);
                },
                createDocumentFragment: function() {
                    return d.createDocumentFragment();
                }
            };
        }
    };
}

if (!goog.format) {
    goog.format = {
        insertWordBreaks: function(str, maxCharsBetweenWordBreaks) {
            str = String(str);

            var resultArr = [];
            var resultArrLen = 0;

            // These variables keep track of important state inside str.
            var isInTag = false;
            // whether we're inside an HTML tag
            var isMaybeInEntity = false;
            // whether we might be inside an HTML entity
            var numCharsWithoutBreak = 0;
            // number of chars since last word break
            var flushIndex = 0;
            // index of first char not yet flushed to resultArr

            for (var i = 0, n = str.length; i < n; ++i) {
                var charCode = str.charCodeAt(i);

                // If hit maxCharsBetweenWordBreaks, and not space next, then add <wbr>.
                if (numCharsWithoutBreak >= maxCharsBetweenWordBreaks && // space
                charCode != 32) {
                    resultArr[resultArrLen++] = str.substring(flushIndex, i);
                    flushIndex = i;
                    resultArr[resultArrLen++] = goog.format.WORD_BREAK;
                    numCharsWithoutBreak = 0;
                }

                if (isInTag) {
                    // If inside an HTML tag and we see '>', it's the end of the tag.
                    if (charCode == 62) {
                        isInTag = false;
                    }

                } else if (isMaybeInEntity) {
                    switch (charCode) {
                        // Inside an entity, a ';' is the end of the entity.
                        // The entity that just ended counts as one char, so increment
                        // numCharsWithoutBreak.
                    case 59:
                        // ';'
                        isMaybeInEntity = false;
                        ++numCharsWithoutBreak;
                        break;
                        // If maybe inside an entity and we see '<', we weren't actually in
                        // an entity. But now we're inside and HTML tag.
                    case 60:
                        // '<'
                        isMaybeInEntity = false;
                        isInTag = true;
                        break;
                        // If maybe inside an entity and we see ' ', we weren't actually in
                        // an entity. Just correct the state and reset the
                        // numCharsWithoutBreak since we just saw a space.
                    case 32:
                        // ' '
                        isMaybeInEntity = false;
                        numCharsWithoutBreak = 0;
                        break;
                    }

                } else {
                    // !isInTag && !isInEntity
                    switch (charCode) {
                        // When not within a tag or an entity and we see '<', we're now
                        // inside an HTML tag.
                    case 60:
                        // '<'
                        isInTag = true;
                        break;
                        // When not within a tag or an entity and we see '&', we might be
                        // inside an entity.
                    case 38:
                        // '&'
                        isMaybeInEntity = true;
                        break;
                        // When we see a space, reset the numCharsWithoutBreak count.
                    case 32:
                        // ' '
                        numCharsWithoutBreak = 0;
                        break;
                        // When we see a non-space, increment the numCharsWithoutBreak.
                    default:
                        ++numCharsWithoutBreak;
                        break;
                    }
                }
            }

            // Flush the remaining chars at the end of the string.
            resultArr[resultArrLen++] = str.substring(flushIndex);

            return resultArr.join('');
        },
        /**
     * String inserted as a word break by insertWordBreaks(). Safari requires
     * <wbr></wbr>, Opera needs the 'shy' entity, though this will give a
     * visible hyphen at breaks. Other browsers just use <wbr>.
     * @type {string}
     * @private
     */
        WORD_BREAK: goog.userAgent.IS_WEBKIT ? '<wbr></wbr>' : goog.userAgent.IS_OPERA ? '&shy;' : '<wbr>'
    };
}

if (!goog.i18n) {
    goog.i18n = {
        /**
     * Utility class for formatting text for display in a potentially
     * opposite-directionality context without garbling. Provides the following
     * functionality:
     *
     * @param {goog.i18n.bidi.Dir|number|boolean} contextDir The context
     *     directionality as a number
     *     (positive = LRT, negative = RTL, 0 = unknown).
     * @constructor
     */
        BidiFormatter: function(dir) {
            this.dir_ = dir;
        },
        bidi: {
            /**
       * Check the directionality of a piece of text, return true if the piece
       * of text should be laid out in RTL direction.
       * @param {string} text The piece of text that need to be detected.
       * @param {boolean=} opt_isHtml Whether {@code text} is HTML/HTML-escaped.
       *     Default: false.
       * @return {boolean}
       * @private
       */
            detectRtlDirectionality: function(text, opt_isHtml) {
                text = soyshim.$$bidiStripHtmlIfNecessary_(text, opt_isHtml);
                return soyshim.$$bidiRtlWordRatio_(text) > soyshim.$$bidiRtlDetectionThreshold_;
            }
        }
    };
}

/**
 * Returns "dir=ltr" or "dir=rtl", depending on {@code text}'s estimated
 * directionality, if it is not the same as the context directionality.
 * Otherwise, returns the empty string.
 *
 * @param {string} text Text whose directionality is to be estimated.
 * @param {boolean=} opt_isHtml Whether {@code text} is HTML / HTML-escaped.
 *     Default: false.
 * @return {string} "dir=rtl" for RTL text in non-RTL context; "dir=ltr" for LTR
 *     text in non-LTR context; else, the empty string.
 */
goog.i18n.BidiFormatter.prototype.dirAttr = function(text, opt_isHtml) {
    var dir = soy.$$bidiTextDir(text, opt_isHtml);
    return dir && dir != this.dir_ ? dir < 0 ? 'dir=rtl' : 'dir=ltr' : '';
}
;

/**
 * Returns the trailing horizontal edge, i.e. "right" or "left", depending on
 * the global bidi directionality.
 * @return {string} "left" for RTL context and "right" otherwise.
 */
goog.i18n.BidiFormatter.prototype.endEdge = function() {
    return this.dir_ < 0 ? 'left' : 'right';
}
;

/**
 * Returns the Unicode BiDi mark matching the context directionality (LRM for
 * LTR context directionality, RLM for RTL context directionality), or the
 * empty string for neutral / unknown context directionality.
 *
 * @return {string} LRM for LTR context directionality and RLM for RTL context
 *     directionality.
 */
goog.i18n.BidiFormatter.prototype.mark = function() {
    return ((this.dir_ > 0) ? '\u200E'/*LRM*/
    : (this.dir_ < 0) ? '\u200F'/*RLM*/
    : '');
}
;

/**
 * Returns a Unicode BiDi mark matching the context directionality (LRM or RLM)
 * if the directionality or the exit directionality of {@code text} are opposite
 * to the context directionality. Otherwise returns the empty string.
 *
 * @param {string} text The input text.
 * @param {boolean=} opt_isHtml Whether {@code text} is HTML / HTML-escaped.
 *     Default: false.
 * @return {string} A Unicode bidi mark matching the global directionality or
 *     the empty string.
 */
goog.i18n.BidiFormatter.prototype.markAfter = function(text, opt_isHtml) {
    var dir = soy.$$bidiTextDir(text, opt_isHtml);
    return soyshim.$$bidiMarkAfterKnownDir_(this.dir_, dir, text, opt_isHtml);
}
;

/**
 * Formats a string of unknown directionality for use in HTML output of the
 * context directionality, so an opposite-directionality string is neither
 * garbled nor garbles what follows it.
 *
 * @param {string} str The input text.
 * @return {string} Input text after applying the above processing.
 */
goog.i18n.BidiFormatter.prototype.spanWrap = function(str) {
    str = String(str);
    var textDir = soy.$$bidiTextDir(str, true);
    var reset = soyshim.$$bidiMarkAfterKnownDir_(this.dir_, textDir, str, true);
    if (textDir > 0 && this.dir_ <= 0) {
        str = '<span dir=ltr>' + str + '</span>';
    } else if (textDir < 0 && this.dir_ >= 0) {
        str = '<span dir=rtl>' + str + '</span>';
    }
    return str + reset;
}
;

/**
 * Returns the leading horizontal edge, i.e. "left" or "right", depending on
 * the global bidi directionality.
 * @return {string} "right" for RTL context and "left" otherwise.
 */
goog.i18n.BidiFormatter.prototype.startEdge = function() {
    return this.dir_ < 0 ? 'right' : 'left';
}
;

/**
 * Formats a string of unknown directionality for use in plain-text output of
 * the context directionality, so an opposite-directionality string is neither
 * garbled nor garbles what follows it.
 * As opposed to {@link #spanWrap}, this makes use of unicode BiDi formatting
 * characters. In HTML, its *only* valid use is inside of elements that do not
 * allow mark-up, e.g. an 'option' tag.
 *
 * @param {string} str The input text.
 * @return {string} Input text after applying the above processing.
 */
goog.i18n.BidiFormatter.prototype.unicodeWrap = function(str) {
    str = String(str);
    var textDir = soy.$$bidiTextDir(str, true);
    var reset = soyshim.$$bidiMarkAfterKnownDir_(this.dir_, textDir, str, true);
    if (textDir > 0 && this.dir_ <= 0) {
        str = '\u202A' + str + '\u202C';
    } else if (textDir < 0 && this.dir_ >= 0) {
        str = '\u202B' + str + '\u202C';
    }
    return str + reset;
}
;

goog.string = {
    /**
   * Utility class to facilitate much faster string concatenation in IE,
   * using Array.join() rather than the '+' operator.  For other browsers
   * we simply use the '+' operator.
   *
   * @param {Object|number|string|boolean=} opt_a1 Optional first initial item
   *     to append.
   * @param {...Object|number|string|boolean} var_args Other initial items to
   *     append, e.g., new goog.string.StringBuffer('foo', 'bar').
   * @constructor
   */
    StringBuffer: function(opt_a1, var_args) {

        /**
     * Internal buffer for the string to be concatenated.
     * @type {string|Array}
     * @private
     */
        this.buffer_ = goog.userAgent.HAS_JSCRIPT ? [] : '';

        if (opt_a1 != null) {
            this.append.apply(this, arguments);
        }
    },
    /**
   * Converts \r\n, \r, and \n to <br>s
   * @param {*} str The string in which to convert newlines.
   * @return {string} A copy of {@code str} with converted newlines.
   */
    newlineToBr: function(str) {

        str = String(str);

        // This quick test helps in the case when there are no chars to replace,
        // in the worst case this makes barely a difference to the time taken.
        if (!goog.string.NEWLINE_TO_BR_RE_.test(str)) {
            return str;
        }

        return str.replace(/(\r\n|\r|\n)/g, '<br>');
    },
    urlEncode: encodeURIComponent,
    /**
   * Regular expression used within newlineToBr().
   * @type {RegExp}
   * @private
   */
    NEWLINE_TO_BR_RE: /[\r\n]/
};

/**
 * Length of internal buffer (faster than calling buffer_.length).
 * Only used for IE.
 * @type {number}
 * @private
 */
goog.string.StringBuffer.prototype.bufferLength_ = 0;

/**
 * Appends one or more items to the string.
 *
 * Calling this with null, undefined, or empty arguments is an error.
 *
 * @param {Object|number|string|boolean} a1 Required first string.
 * @param {Object|number|string|boolean=} opt_a2 Optional second string.
 * @param {...Object|number|string|boolean} var_args Other items to append,
 *     e.g., sb.append('foo', 'bar', 'baz').
 * @return {goog.string.StringBuffer} This same StringBuilder object.
 */
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {

    if (goog.userAgent.HAS_JSCRIPT) {
        if (opt_a2 == null) {
            // no second argument (note: undefined == null)
            // Array assignment is 2x faster than Array push.  Also, use a1
            // directly to avoid arguments instantiation, another 2x improvement.
            this.buffer_[this.bufferLength_++] = a1;
        } else {
            var arr = /**@type {Array.<number|string|boolean>}*/
            this.buffer_;
            arr.push.apply(arr, arguments);
            this.bufferLength_ = this.buffer_.length;
        }

    } else {

        // Use a1 directly to avoid arguments instantiation for single-arg case.
        this.buffer_ += a1;
        if (opt_a2 != null) {
            // no second argument (note: undefined == null)
            for (var i = 1; i < arguments.length; i++) {
                this.buffer_ += arguments[i];
            }
        }
    }

    return this;
}
;

/**
 * Clears the string.
 */
goog.string.StringBuffer.prototype.clear = function() {

    if (goog.userAgent.HAS_JSCRIPT) {
        this.buffer_.length = 0;
        // reuse array to avoid creating new object
        this.bufferLength_ = 0;

    } else {
        this.buffer_ = '';
    }
}
;

/**
 * Returns the concatenated string.
 *
 * @return {string} The concatenated string.
 */
goog.string.StringBuffer.prototype.toString = function() {

    if (goog.userAgent.HAS_JSCRIPT) {
        var str = this.buffer_.join('');
        // Given a string with the entire contents, simplify the StringBuilder by
        // setting its contents to only be this string, rather than many fragments.
        this.clear();
        if (str) {
            this.append(str);
        }
        return str;

    } else {
        return /** @type {string} */
        (this.buffer_);
    }
}
;

if (!goog.soy)
    goog.soy = {
        /**
   * Helper function to render a Soy template and then set the
   * output string as the innerHTML of an element. It is recommended
   * to use this helper function instead of directly setting
   * innerHTML in your hand-written code, so that it will be easier
   * to audit the code for cross-site scripting vulnerabilities.
   *
   * @param {Element} element The element whose content we are rendering.
   * @param {Function} template The Soy template defining element's content.
   * @param {Object=} opt_templateData The data for the template.
   * @param {Object=} opt_injectedData The injected data for the template.
   */
        renderAsElement: function(template, opt_templateData, opt_injectedData, opt_document) {
            return /** @type {!Element} */
            (soyshim.$$renderWithWrapper_(template, opt_templateData, opt_document, true /* asElement */
            , opt_injectedData));
        },
        /**
   * Helper function to render a Soy template into a single node or
   * a document fragment. If the rendered HTML string represents a
   * single node, then that node is returned (note that this is
   * *not* a fragment, despite them name of the method). Otherwise a
   * document fragment is returned containing the rendered nodes.
   *
   * @param {Function} template The Soy template defining element's content.
   * @param {Object=} opt_templateData The data for the template.
   * @param {Document=} opt_document The document used to create DOM nodes.
   *     If not specified, global document object is used.
   * @param {Object=} opt_injectedData The injected data for the template.
   * @return {!Node} The resulting node or document fragment.
   */
        renderAsFragment: function(template, opt_templateData, opt_injectedData, opt_document) {
            return soyshim.$$renderWithWrapper_(template, opt_templateData, opt_document, false /* asElement */
            , opt_injectedData);
        },
        /**
   * Helper function to render a Soy template and then set the output string as
   * the innerHTML of an element. It is recommended to use this helper function
   * instead of directly setting innerHTML in your hand-written code, so that it
   * will be easier to audit the code for cross-site scripting vulnerabilities.
   *
   * NOTE: New code should consider using goog.soy.renderElement instead.
   *
   * @param {Element} element The element whose content we are rendering.
   * @param {Function} template The Soy template defining the element's content.
   * @param {Object=} opt_templateData The data for the template.
   * @param {Object=} opt_injectedData The injected data for the template.
   */
        renderElement: function(element, template, opt_templateData, opt_injectedData) {
            element.innerHTML = template(opt_templateData, null, opt_injectedData);
        }
    };

var soy = {
    esc: {}
};
var soydata = {};
var soyshim = {};
/**
 * Helper function to render a Soy template into a single node or a document
 * fragment. If the rendered HTML string represents a single node, then that
 * node is returned. Otherwise a document fragment is created and returned
 * (wrapped in a DIV element if #opt_singleNode is true).
 *
 * @param {Function} template The Soy template defining the element's content.
 * @param {Object=} opt_templateData The data for the template.
 * @param {Document=} opt_document The document used to create DOM nodes. If
 *     not specified, global document object is used.
 * @param {boolean=} opt_asElement Whether to wrap the fragment in an
 *     element if the template does not render a single element. If true,
 *     result is always an Element.
 * @param {Object=} opt_injectedData The injected data for the template.
 * @return {!Node} The resulting node or document fragment.
 * @private
 */
soyshim.$$renderWithWrapper_ = function(template, opt_templateData, opt_document, opt_asElement, opt_injectedData) {

    var doc = opt_document || document;
    var wrapper = doc.createElement('div');
    wrapper.innerHTML = template(opt_templateData || soyshim.$$DEFAULT_TEMPLATE_DATA_, undefined, opt_injectedData);

    // If the template renders as a single element, return it.
    if (wrapper.childNodes.length == 1) {
        var firstChild = wrapper.firstChild;
        if (!opt_asElement || firstChild.nodeType == 1 /* Element */
        ) {
            return /** @type {!Node} */
            (firstChild);
        }
    }

    // If we're forcing it to be a single element, return the wrapper DIV.
    if (opt_asElement) {
        return wrapper;
    }

    // Otherwise, create and return a fragment.
    var fragment = doc.createDocumentFragment();
    while (wrapper.firstChild) {
        fragment.appendChild(wrapper.firstChild);
    }
    return fragment;
}
;

/**
 * Returns a Unicode BiDi mark matching bidiGlobalDir (LRM or RLM) if the
 * directionality or the exit directionality of text are opposite to
 * bidiGlobalDir. Otherwise returns the empty string.
 * If opt_isHtml, makes sure to ignore the LTR nature of the mark-up and escapes
 * in text, making the logic suitable for HTML and HTML-escaped text.
 * @param {number} bidiGlobalDir The global directionality context: 1 if ltr, -1
 *     if rtl, 0 if unknown.
 * @param {number} dir text's directionality: 1 if ltr, -1 if rtl, 0 if unknown.
 * @param {string} text The text whose directionality is to be estimated.
 * @param {boolean=} opt_isHtml Whether text is HTML/HTML-escaped.
 *     Default: false.
 * @return {string} A Unicode bidi mark matching bidiGlobalDir, or
 *     the empty string when text's overall and exit directionalities both match
 *     bidiGlobalDir, or bidiGlobalDir is 0 (unknown).
 * @private
 */
soyshim.$$bidiMarkAfterKnownDir_ = function(bidiGlobalDir, dir, text, opt_isHtml) {
    return (bidiGlobalDir > 0 && (dir < 0 || soyshim.$$bidiIsRtlExitText_(text, opt_isHtml)) ? '\u200E' : // LRM
    bidiGlobalDir < 0 && (dir > 0 || soyshim.$$bidiIsLtrExitText_(text, opt_isHtml)) ? '\u200F' : // RLM
    '');
}
;

/**
 * Strips str of any HTML mark-up and escapes. Imprecise in several ways, but
 * precision is not very important, since the result is only meant to be used
 * for directionality detection.
 * @param {string} str The string to be stripped.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {string} The stripped string.
 * @private
 */
soyshim.$$bidiStripHtmlIfNecessary_ = function(str, opt_isHtml) {
    return opt_isHtml ? str.replace(soyshim.$$BIDI_HTML_SKIP_RE_, ' ') : str;
}
;

/**
 * Simplified regular expression for am HTML tag (opening or closing) or an HTML
 * escape - the things we want to skip over in order to ignore their ltr
 * characters.
 * @type {RegExp}
 * @private
 */
soyshim.$$BIDI_HTML_SKIP_RE_ = /<[^>]*>|&[^;]+;/g;

/**
 * A practical pattern to identify strong LTR character. This pattern is not
 * theoretically correct according to unicode standard. It is simplified for
 * performance and small code size.
 * @type {string}
 * @private
 */
soyshim.$$bidiLtrChars_ = 'A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02B8\u0300-\u0590\u0800-\u1FFF' + '\u2C00-\uFB1C\uFDFE-\uFE6F\uFEFD-\uFFFF';

/**
 * A practical pattern to identify strong neutral and weak character. This
 * pattern is not theoretically correct according to unicode standard. It is
 * simplified for performance and small code size.
 * @type {string}
 * @private
 */
soyshim.$$bidiNeutralChars_ = '\u0000-\u0020!-@[-`{-\u00BF\u00D7\u00F7\u02B9-\u02FF\u2000-\u2BFF';

/**
 * A practical pattern to identify strong RTL character. This pattern is not
 * theoretically correct according to unicode standard. It is simplified for
 * performance and small code size.
 * @type {string}
 * @private
 */
soyshim.$$bidiRtlChars_ = '\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC';

/**
 * Regular expressions to check if a piece of text is of RTL directionality
 * on first character with strong directionality.
 * @type {RegExp}
 * @private
 */
soyshim.$$bidiRtlDirCheckRe_ = new RegExp('^[^' + soyshim.$$bidiLtrChars_ + ']*[' + soyshim.$$bidiRtlChars_ + ']');

/**
 * Regular expressions to check if a piece of text is of neutral directionality.
 * Url are considered as neutral.
 * @type {RegExp}
 * @private
 */
soyshim.$$bidiNeutralDirCheckRe_ = new RegExp('^[' + soyshim.$$bidiNeutralChars_ + ']*$|^http://');

/**
 * Check the directionality of the a piece of text based on the first character
 * with strong directionality.
 * @param {string} str string being checked.
 * @return {boolean} return true if rtl directionality is being detected.
 * @private
 */
soyshim.$$bidiIsRtlText_ = function(str) {
    return soyshim.$$bidiRtlDirCheckRe_.test(str);
}
;

/**
 * Check the directionality of the a piece of text based on the first character
 * with strong directionality.
 * @param {string} str string being checked.
 * @return {boolean} true if all characters have neutral directionality.
 * @private
 */
soyshim.$$bidiIsNeutralText_ = function(str) {
    return soyshim.$$bidiNeutralDirCheckRe_.test(str);
}
;

/**
 * This constant controls threshold of rtl directionality.
 * @type {number}
 * @private
 */
soyshim.$$bidiRtlDetectionThreshold_ = 0.40;

/**
 * Returns the RTL ratio based on word count.
 * @param {string} str the string that need to be checked.
 * @return {number} the ratio of RTL words among all words with directionality.
 * @private
 */
soyshim.$$bidiRtlWordRatio_ = function(str) {
    var rtlCount = 0;
    var totalCount = 0;
    var tokens = str.split(' ');
    for (var i = 0; i < tokens.length; i++) {
        if (soyshim.$$bidiIsRtlText_(tokens[i])) {
            rtlCount++;
            totalCount++;
        } else if (!soyshim.$$bidiIsNeutralText_(tokens[i])) {
            totalCount++;
        }
    }

    return totalCount == 0 ? 0 : rtlCount / totalCount;
}
;

/**
 * Regular expressions to check if the last strongly-directional character in a
 * piece of text is LTR.
 * @type {RegExp}
 * @private
 */
soyshim.$$bidiLtrExitDirCheckRe_ = new RegExp('[' + soyshim.$$bidiLtrChars_ + '][^' + soyshim.$$bidiRtlChars_ + ']*$');

/**
 * Regular expressions to check if the last strongly-directional character in a
 * piece of text is RTL.
 * @type {RegExp}
 * @private
 */
soyshim.$$bidiRtlExitDirCheckRe_ = new RegExp('[' + soyshim.$$bidiRtlChars_ + '][^' + soyshim.$$bidiLtrChars_ + ']*$');

/**
 * Check if the exit directionality a piece of text is LTR, i.e. if the last
 * strongly-directional character in the string is LTR.
 * @param {string} str string being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether LTR exit directionality was detected.
 * @private
 */
soyshim.$$bidiIsLtrExitText_ = function(str, opt_isHtml) {
    str = soyshim.$$bidiStripHtmlIfNecessary_(str, opt_isHtml);
    return soyshim.$$bidiLtrExitDirCheckRe_.test(str);
}
;

/**
 * Check if the exit directionality a piece of text is RTL, i.e. if the last
 * strongly-directional character in the string is RTL.
 * @param {string} str string being checked.
 * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.
 *     Default: false.
 * @return {boolean} Whether RTL exit directionality was detected.
 * @private
 */
soyshim.$$bidiIsRtlExitText_ = function(str, opt_isHtml) {
    str = soyshim.$$bidiStripHtmlIfNecessary_(str, opt_isHtml);
    return soyshim.$$bidiRtlExitDirCheckRe_.test(str);
}
;

// =============================================================================
// COPIED FROM soyutils_usegoog.js

// -----------------------------------------------------------------------------
// StringBuilder (compatible with the 'stringbuilder' code style).

/**
 * Utility class to facilitate much faster string concatenation in IE,
 * using Array.join() rather than the '+' operator.  For other browsers
 * we simply use the '+' operator.
 *
 * @param {Object} var_args Initial items to append,
 *     e.g., new soy.StringBuilder('foo', 'bar').
 * @constructor
 */
soy.StringBuilder = goog.string.StringBuffer;

// -----------------------------------------------------------------------------
// soydata: Defines typed strings, e.g. an HTML string {@code "a<b>c"} is
// semantically distinct from the plain text string {@code "a<b>c"} and smart
// templates can take that distinction into account.

/**
 * A type of textual content.
 * @enum {number}
 */
soydata.SanitizedContentKind = {

    /**
   * A snippet of HTML that does not start or end inside a tag, comment, entity,
   * or DOCTYPE; and that does not contain any executable code
   * (JS, {@code <object>}s, etc.) from a different trust domain.
   */
    HTML: 0,

    /**
   * A sequence of code units that can appear between quotes (either kind) in a
   * JS program without causing a parse error, and without causing any side
   * effects.
   * <p>
   * The content should not contain unescaped quotes, newlines, or anything else
   * that would cause parsing to fail or to cause a JS parser to finish the
   * string its parsing inside the content.
   * <p>
   * The content must also not end inside an escape sequence ; no partial octal
   * escape sequences or odd number of '{@code \}'s at the end.
   */
    JS_STR_CHARS: 1,

    /** A properly encoded portion of a URI. */
    URI: 2,

    /** An attribute name and value such as {@code dir="ltr"}. */
    HTML_ATTRIBUTE: 3
};

/**
 * A string-like object that carries a content-type.
 * @param {string} content
 * @constructor
 * @private
 */
soydata.SanitizedContent = function(content) {
    /**
   * The textual content.
   * @type {string}
   */
    this.content = content;
}
;

/** @type {soydata.SanitizedContentKind} */
soydata.SanitizedContent.prototype.contentKind;

/** @override */
soydata.SanitizedContent.prototype.toString = function() {
    return this.content;
}
;

/**
 * Content of type {@link soydata.SanitizedContentKind.HTML}.
 * @param {string} content A string of HTML that can safely be embedded in
 *     a PCDATA context in your app.  If you would be surprised to find that an
 *     HTML sanitizer produced {@code s} (e.g. it runs code or fetches bad URLs)
 *     and you wouldn't write a template that produces {@code s} on security or
 *     privacy grounds, then don't pass {@code s} here.
 * @constructor
 * @extends {soydata.SanitizedContent}
 */
soydata.SanitizedHtml = function(content) {
    soydata.SanitizedContent.call(this, content);
}
;
goog.inherits(soydata.SanitizedHtml, soydata.SanitizedContent);

/** @override */
soydata.SanitizedHtml.prototype.contentKind = soydata.SanitizedContentKind.HTML;

/**
 * Content of type {@link soydata.SanitizedContentKind.JS_STR_CHARS}.
 * @param {string} content A string of JS that when evaled, produces a
 *     value that does not depend on any sensitive data and has no side effects
 *     <b>OR</b> a string of JS that does not reference any variables or have
 *     any side effects not known statically to the app authors.
 * @constructor
 * @extends {soydata.SanitizedContent}
 */
soydata.SanitizedJsStrChars = function(content) {
    soydata.SanitizedContent.call(this, content);
}
;
goog.inherits(soydata.SanitizedJsStrChars, soydata.SanitizedContent);

/** @override */
soydata.SanitizedJsStrChars.prototype.contentKind = soydata.SanitizedContentKind.JS_STR_CHARS;

/**
 * Content of type {@link soydata.SanitizedContentKind.URI}.
 * @param {string} content A chunk of URI that the caller knows is safe to
 *     emit in a template.
 * @constructor
 * @extends {soydata.SanitizedContent}
 */
soydata.SanitizedUri = function(content) {
    soydata.SanitizedContent.call(this, content);
}
;
goog.inherits(soydata.SanitizedUri, soydata.SanitizedContent);

/** @override */
soydata.SanitizedUri.prototype.contentKind = soydata.SanitizedContentKind.URI;

/**
 * Content of type {@link soydata.SanitizedContentKind.HTML_ATTRIBUTE}.
 * @param {string} content An attribute name and value, such as
 *     {@code dir="ltr"}.
 * @constructor
 * @extends {soydata.SanitizedContent}
 */
soydata.SanitizedHtmlAttribute = function(content) {
    soydata.SanitizedContent.call(this, content);
}
;
goog.inherits(soydata.SanitizedHtmlAttribute, soydata.SanitizedContent);

/** @override */
soydata.SanitizedHtmlAttribute.prototype.contentKind = soydata.SanitizedContentKind.HTML_ATTRIBUTE;

// -----------------------------------------------------------------------------
// Public utilities.

/**
 * Helper function to render a Soy template and then set the output string as
 * the innerHTML of an element. It is recommended to use this helper function
 * instead of directly setting innerHTML in your hand-written code, so that it
 * will be easier to audit the code for cross-site scripting vulnerabilities.
 *
 * NOTE: New code should consider using goog.soy.renderElement instead.
 *
 * @param {Element} element The element whose content we are rendering.
 * @param {Function} template The Soy template defining the element's content.
 * @param {Object=} opt_templateData The data for the template.
 * @param {Object=} opt_injectedData The injected data for the template.
 */
soy.renderElement = goog.soy.renderElement;

/**
 * Helper function to render a Soy template into a single node or a document
 * fragment. If the rendered HTML string represents a single node, then that
 * node is returned (note that this is *not* a fragment, despite them name of
 * the method). Otherwise a document fragment is returned containing the
 * rendered nodes.
 *
 * NOTE: New code should consider using goog.soy.renderAsFragment
 * instead (note that the arguments are different).
 *
 * @param {Function} template The Soy template defining the element's content.
 * @param {Object=} opt_templateData The data for the template.
 * @param {Document=} opt_document The document used to create DOM nodes. If not
 *     specified, global document object is used.
 * @param {Object=} opt_injectedData The injected data for the template.
 * @return {!Node} The resulting node or document fragment.
 */
soy.renderAsFragment = function(template, opt_templateData, opt_document, opt_injectedData) {
    return goog.soy.renderAsFragment(template, opt_templateData, opt_injectedData, new goog.dom.DomHelper(opt_document));
}
;

/**
 * Helper function to render a Soy template into a single node. If the rendered
 * HTML string represents a single node, then that node is returned. Otherwise,
 * a DIV element is returned containing the rendered nodes.
 *
 * NOTE: New code should consider using goog.soy.renderAsElement
 * instead (note that the arguments are different).
 *
 * @param {Function} template The Soy template defining the element's content.
 * @param {Object=} opt_templateData The data for the template.
 * @param {Document=} opt_document The document used to create DOM nodes. If not
 *     specified, global document object is used.
 * @param {Object=} opt_injectedData The injected data for the template.
 * @return {!Element} Rendered template contents, wrapped in a parent DIV
 *     element if necessary.
 */
soy.renderAsElement = function(template, opt_templateData, opt_document, opt_injectedData) {
    return goog.soy.renderAsElement(template, opt_templateData, opt_injectedData, new goog.dom.DomHelper(opt_document));
}
;

// -----------------------------------------------------------------------------
// Below are private utilities to be used by Soy-generated code only.

/**
 * Builds an augmented data object to be passed when a template calls another,
 * and needs to pass both original data and additional params. The returned
 * object will contain both the original data and the additional params. If the
 * same key appears in both, then the value from the additional params will be
 * visible, while the value from the original data will be hidden. The original
 * data object will be used, but not modified.
 *
 * @param {!Object} origData The original data to pass.
 * @param {Object} additionalParams The additional params to pass.
 * @return {Object} An augmented data object containing both the original data
 *     and the additional params.
 */
soy.$$augmentData = function(origData, additionalParams) {

    // Create a new object whose '__proto__' field is set to origData.
    /** @constructor */
    function TempCtor() {}
    TempCtor.prototype = origData;
    var newData = new TempCtor();

    // Add the additional params to the new object.
    for (var key in additionalParams) {
        newData[key] = additionalParams[key];
    }

    return newData;
}
;

/**
 * Gets the keys in a map as an array. There are no guarantees on the order.
 * @param {Object} map The map to get the keys of.
 * @return {Array.<string>} The array of keys in the given map.
 */
soy.$$getMapKeys = function(map) {
    var mapKeys = [];
    for (var key in map) {
        mapKeys.push(key);
    }
    return mapKeys;
}
;

/**
 * Gets a consistent unique id for the given delegate template name. Two calls
 * to this function will return the same id if and only if the input names are
 * the same.
 *
 * <p> Important: This function must always be called with a string constant.
 *
 * <p> If Closure Compiler is not being used, then this is just this identity
 * function. If Closure Compiler is being used, then each call to this function
 * will be replaced with a short string constant, which will be consistent per
 * input name.
 *
 * @param {string} delTemplateName The delegate template name for which to get a
 *     consistent unique id.
 * @return {string} A unique id that is consistent per input name.
 *
 * @consistentIdGenerator
 */
soy.$$getDelegateId = function(delTemplateName) {
    return delTemplateName;
}
;

/**
 * Map from registered delegate template id/name to the priority of the
 * implementation.
 * @type {Object}
 * @private
 */
soy.$$DELEGATE_REGISTRY_PRIORITIES_ = {};

/**
 * Map from registered delegate template id/name to the implementation function.
 * @type {Object}
 * @private
 */
soy.$$DELEGATE_REGISTRY_FUNCTIONS_ = {};

/**
 * Registers a delegate implementation. If the same delegate template id/name
 * has been registered previously, then priority values are compared and only
 * the higher priority implementation is stored (if priorities are equal, an
 * error is thrown).
 *
 * @param {string} delTemplateId The delegate template id/name to register.
 * @param {number} delPriority The implementation's priority value.
 * @param {Function} delFn The implementation function.
 */
soy.$$registerDelegateFn = function(delTemplateId, delPriority, delFn) {
    var mapKey = 'key_' + delTemplateId;
    var currPriority = soy.$$DELEGATE_REGISTRY_PRIORITIES_[mapKey];
    if (currPriority === undefined || delPriority > currPriority) {
        // Registering new or higher-priority function: replace registry entry.
        soy.$$DELEGATE_REGISTRY_PRIORITIES_[mapKey] = delPriority;
        soy.$$DELEGATE_REGISTRY_FUNCTIONS_[mapKey] = delFn;
    } else if (delPriority == currPriority) {
        // Registering same-priority function: error.
        throw Error('Encountered two active delegates with same priority (id/name "' + delTemplateId + '").');
    } else {// Registering lower-priority function: do nothing.
    }
}
;

/**
 * Retrieves the (highest-priority) implementation that has been registered for
 * a given delegate template id/name. If no implementation has been registered
 * for the id/name, then returns an implementation that is equivalent to an
 * empty template (i.e. rendered output would be empty string).
 *
 * @param {string} delTemplateId The delegate template id/name to get.
 * @return {Function} The retrieved implementation function.
 */
soy.$$getDelegateFn = function(delTemplateId) {
    var delFn = soy.$$DELEGATE_REGISTRY_FUNCTIONS_['key_' + delTemplateId];
    return delFn ? delFn : soy.$$EMPTY_TEMPLATE_FN_;
}
;

/**
 * Private helper soy.$$getDelegateFn(). This is the empty template function
 * that is returned whenever there's no delegate implementation found.
 *
 * @param {Object.<string, *>=} opt_data
 * @param {soy.StringBuilder=} opt_sb
 * @param {Object.<string, *>=} opt_ijData
 * @return {string}
 * @private
 */
soy.$$EMPTY_TEMPLATE_FN_ = function(opt_data, opt_sb, opt_ijData) {
    return '';
}
;

// -----------------------------------------------------------------------------
// Escape/filter/normalize.

/**
 * Escapes HTML special characters in a string.  Escapes double quote '"' in
 * addition to '&', '<', and '>' so that a string can be included in an HTML
 * tag attribute value within double quotes.
 * Will emit known safe HTML as-is.
 *
 * @param {*} value The string-like value to be escaped.  May not be a string,
 *     but the value will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$escapeHtml = function(value) {
    if (typeof value === 'object' && value && value.contentKind === soydata.SanitizedContentKind.HTML) {
        return value.content;
    }
    return soy.esc.$$escapeHtmlHelper(value);
}
;

/**
 * Escapes HTML special characters in a string so that it can be embedded in
 * RCDATA.
 * <p>
 * Escapes HTML special characters so that the value will not prematurely end
 * the body of a tag like {@code <textarea>} or {@code <title>}.  RCDATA tags
 * cannot contain other HTML entities, so it is not strictly necessary to escape
 * HTML special characters except when part of that text looks like an HTML
 * entity or like a close tag : {@code </textarea>}.
 * <p>
 * Will normalize known safe HTML to make sure that sanitized HTML (which could
 * contain an innocuous {@code </textarea>} don't prematurely end an RCDATA
 * element.
 *
 * @param {*} value The string-like value to be escaped.  May not be a string,
 *     but the value will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$escapeHtmlRcdata = function(value) {
    if (typeof value === 'object' && value && value.contentKind === soydata.SanitizedContentKind.HTML) {
        return soy.esc.$$normalizeHtmlHelper(value.content);
    }
    return soy.esc.$$escapeHtmlHelper(value);
}
;

/**
 * Removes HTML tags from a string of known safe HTML so it can be used as an
 * attribute value.
 *
 * @param {*} value The HTML to be escaped.  May not be a string, but the
 *     value will be coerced to a string.
 * @return {string} A representation of value without tags, HTML comments, or
 *     other content.
 */
soy.$$stripHtmlTags = function(value) {
    return String(value).replace(soy.esc.$$HTML_TAG_REGEX_, '');
}
;

/**
 * Escapes HTML special characters in an HTML attribute value.
 *
 * @param {*} value The HTML to be escaped.  May not be a string, but the
 *     value will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$escapeHtmlAttribute = function(value) {
    if (typeof value === 'object' && value && value.contentKind === soydata.SanitizedContentKind.HTML) {
        return soy.esc.$$normalizeHtmlHelper(soy.$$stripHtmlTags(value.content));
    }
    return soy.esc.$$escapeHtmlHelper(value);
}
;

/**
 * Escapes HTML special characters in a string including space and other
 * characters that can end an unquoted HTML attribute value.
 *
 * @param {*} value The HTML to be escaped.  May not be a string, but the
 *     value will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$escapeHtmlAttributeNospace = function(value) {
    if (typeof value === 'object' && value && value.contentKind === soydata.SanitizedContentKind.HTML) {
        return soy.esc.$$normalizeHtmlNospaceHelper(soy.$$stripHtmlTags(value.content));
    }
    return soy.esc.$$escapeHtmlNospaceHelper(value);
}
;

/**
 * Filters out strings that cannot be a substring of a valid HTML attribute.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} A valid HTML attribute name part or name/value pair.
 *     {@code "zSoyz"} if the input is invalid.
 */
soy.$$filterHtmlAttribute = function(value) {
    if (typeof value === 'object' && value && value.contentKind === soydata.SanitizedContentKind.HTML_ATTRIBUTE) {
        return value.content.replace(/=([^"']*)$/, '="$1"');
    }
    return soy.esc.$$filterHtmlAttributeHelper(value);
}
;

/**
 * Filters out strings that cannot be a substring of a valid HTML element name.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} A valid HTML element name part.
 *     {@code "zSoyz"} if the input is invalid.
 */
soy.$$filterHtmlElementName = function(value) {
    return soy.esc.$$filterHtmlElementNameHelper(value);
}
;

/**
 * Escapes characters in the value to make it valid content for a JS string
 * literal.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} An escaped version of value.
 * @deprecated
 */
soy.$$escapeJs = function(value) {
    return soy.$$escapeJsString(value);
}
;

/**
 * Escapes characters in the value to make it valid content for a JS string
 * literal.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$escapeJsString = function(value) {
    if (typeof value === 'object' && value.contentKind === soydata.SanitizedContentKind.JS_STR_CHARS) {
        return value.content;
    }
    return soy.esc.$$escapeJsStringHelper(value);
}
;

/**
 * Encodes a value as a JavaScript literal.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} A JavaScript code representation of the input.
 */
soy.$$escapeJsValue = function(value) {
    // We surround values with spaces so that they can't be interpolated into
    // identifiers by accident.
    // We could use parentheses but those might be interpreted as a function call.
    if (value == null) {
        // Intentionally matches undefined.
        // Java returns null from maps where there is no corresponding key while
        // JS returns undefined.
        // We always output null for compatibility with Java which does not have a
        // distinct undefined value.
        return ' null ';
    }
    switch (typeof value) {
    case 'boolean':
    case 'number':
        return ' ' + value + ' ';
    default:
        return "'" + soy.esc.$$escapeJsStringHelper(String(value)) + "'";
    }
}
;

/**
 * Escapes characters in the string to make it valid content for a JS regular
 * expression literal.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$escapeJsRegex = function(value) {
    return soy.esc.$$escapeJsRegexHelper(value);
}
;

/**
 * Matches all URI mark characters that conflict with HTML attribute delimiters
 * or that cannot appear in a CSS uri.
 * From <a href="http://www.w3.org/TR/CSS2/grammar.html">G.2: CSS grammar</a>
 * <pre>
 *     url        ([!#$%&*-~]|{nonascii}|{escape})*
 * </pre>
 *
 * @type {RegExp}
 * @private
 */
soy.$$problematicUriMarks_ = /['()]/g;

/**
 * @param {string} ch A single character in {@link soy.$$problematicUriMarks_}.
 * @return {string}
 * @private
 */
soy.$$pctEncode_ = function(ch) {
    return '%' + ch.charCodeAt(0).toString(16);
}
;

/**
 * Escapes a string so that it can be safely included in a URI.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$escapeUri = function(value) {
    if (typeof value === 'object' && value.contentKind === soydata.SanitizedContentKind.URI) {
        return soy.$$normalizeUri(value);
    }
    // Apostophes and parentheses are not matched by encodeURIComponent.
    // They are technically special in URIs, but only appear in the obsolete mark
    // production in Appendix D.2 of RFC 3986, so can be encoded without changing
    // semantics.
    var encoded = soy.esc.$$escapeUriHelper(value);
    soy.$$problematicUriMarks_.lastIndex = 0;
    if (soy.$$problematicUriMarks_.test(encoded)) {
        return encoded.replace(soy.$$problematicUriMarks_, soy.$$pctEncode_);
    }
    return encoded;
}
;

/**
 * Removes rough edges from a URI by escaping any raw HTML/JS string delimiters.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$normalizeUri = function(value) {
    return soy.esc.$$normalizeUriHelper(value);
}
;

/**
 * Vets a URI's protocol and removes rough edges from a URI by escaping
 * any raw HTML/JS string delimiters.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$filterNormalizeUri = function(value) {
    return soy.esc.$$filterNormalizeUriHelper(value);
}
;

/**
 * Escapes a string so it can safely be included inside a quoted CSS string.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} An escaped version of value.
 */
soy.$$escapeCssString = function(value) {
    return soy.esc.$$escapeCssStringHelper(value);
}
;

/**
 * Encodes a value as a CSS identifier part, keyword, or quantity.
 *
 * @param {*} value The value to escape.  May not be a string, but the value
 *     will be coerced to a string.
 * @return {string} A safe CSS identifier part, keyword, or quanitity.
 */
soy.$$filterCssValue = function(value) {
    // Uses == to intentionally match null and undefined for Java compatibility.
    if (value == null) {
        return '';
    }
    return soy.esc.$$filterCssValueHelper(value);
}
;

// -----------------------------------------------------------------------------
// Basic directives/functions.

/**
 * Converts \r\n, \r, and \n to <br>s
 * @param {*} str The string in which to convert newlines.
 * @return {string} A copy of {@code str} with converted newlines.
 */
soy.$$changeNewlineToBr = function(str) {
    return goog.string.newLineToBr(String(str), false);
}
;

/**
 * Inserts word breaks ('wbr' tags) into a HTML string at a given interval. The
 * counter is reset if a space is encountered. Word breaks aren't inserted into
 * HTML tags or entities. Entites count towards the character count; HTML tags
 * do not.
 *
 * @param {*} str The HTML string to insert word breaks into. Can be other
 *     types, but the value will be coerced to a string.
 * @param {number} maxCharsBetweenWordBreaks Maximum number of non-space
 *     characters to allow before adding a word break.
 * @return {string} The string including word breaks.
 */
soy.$$insertWordBreaks = function(str, maxCharsBetweenWordBreaks) {
    return goog.format.insertWordBreaks(String(str), maxCharsBetweenWordBreaks);
}
;

/**
 * Truncates a string to a given max length (if it's currently longer),
 * optionally adding ellipsis at the end.
 *
 * @param {*} str The string to truncate. Can be other types, but the value will
 *     be coerced to a string.
 * @param {number} maxLen The maximum length of the string after truncation
 *     (including ellipsis, if applicable).
 * @param {boolean} doAddEllipsis Whether to add ellipsis if the string needs
 *     truncation.
 * @return {string} The string after truncation.
 */
soy.$$truncate = function(str, maxLen, doAddEllipsis) {

    str = String(str);
    if (str.length <= maxLen) {
        return str;
        // no need to truncate
    }

    // If doAddEllipsis, either reduce maxLen to compensate, or else if maxLen is
    // too small, just turn off doAddEllipsis.
    if (doAddEllipsis) {
        if (maxLen > 3) {
            maxLen -= 3;
        } else {
            doAddEllipsis = false;
        }
    }

    // Make sure truncating at maxLen doesn't cut up a unicode surrogate pair.
    if (soy.$$isHighSurrogate_(str.charAt(maxLen - 1)) && soy.$$isLowSurrogate_(str.charAt(maxLen))) {
        maxLen -= 1;
    }

    // Truncate.
    str = str.substring(0, maxLen);

    // Add ellipsis.
    if (doAddEllipsis) {
        str += '...';
    }

    return str;
}
;

/**
 * Private helper for $$truncate() to check whether a char is a high surrogate.
 * @param {string} ch The char to check.
 * @return {boolean} Whether the given char is a unicode high surrogate.
 * @private
 */
soy.$$isHighSurrogate_ = function(ch) {
    return 0xD800 <= ch && ch <= 0xDBFF;
}
;

/**
 * Private helper for $$truncate() to check whether a char is a low surrogate.
 * @param {string} ch The char to check.
 * @return {boolean} Whether the given char is a unicode low surrogate.
 * @private
 */
soy.$$isLowSurrogate_ = function(ch) {
    return 0xDC00 <= ch && ch <= 0xDFFF;
}
;

// -----------------------------------------------------------------------------
// Bidi directives/functions.

/**
 * Cache of bidi formatter by context directionality, so we don't keep on
 * creating new objects.
 * @type {!Object.<!goog.i18n.BidiFormatter>}
 * @private
 */
soy.$$bidiFormatterCache_ = {};

/**
 * Returns cached bidi formatter for bidiGlobalDir, or creates a new one.
 * @param {number} bidiGlobalDir The global directionality context: 1 if ltr, -1
 *     if rtl, 0 if unknown.
 * @return {goog.i18n.BidiFormatter} A formatter for bidiGlobalDir.
 * @private
 */
soy.$$getBidiFormatterInstance_ = function(bidiGlobalDir) {
    return soy.$$bidiFormatterCache_[bidiGlobalDir] || (soy.$$bidiFormatterCache_[bidiGlobalDir] = new goog.i18n.BidiFormatter(bidiGlobalDir));
}
;

/**
 * Estimate the overall directionality of text. If opt_isHtml, makes sure to
 * ignore the LTR nature of the mark-up and escapes in text, making the logic
 * suitable for HTML and HTML-escaped text.
 * @param {string} text The text whose directionality is to be estimated.
 * @param {boolean=} opt_isHtml Whether text is HTML/HTML-escaped.
 *     Default: false.
 * @return {number} 1 if text is LTR, -1 if it is RTL, and 0 if it is neutral.
 */
soy.$$bidiTextDir = function(text, opt_isHtml) {
    if (!text) {
        return 0;
    }
    return goog.i18n.bidi.detectRtlDirectionality(text, opt_isHtml) ? -1 : 1;
}
;

/**
 * Returns "dir=ltr" or "dir=rtl", depending on text's estimated
 * directionality, if it is not the same as bidiGlobalDir.
 * Otherwise, returns the empty string.
 * If opt_isHtml, makes sure to ignore the LTR nature of the mark-up and escapes
 * in text, making the logic suitable for HTML and HTML-escaped text.
 * @param {number} bidiGlobalDir The global directionality context: 1 if ltr, -1
 *     if rtl, 0 if unknown.
 * @param {string} text The text whose directionality is to be estimated.
 * @param {boolean=} opt_isHtml Whether text is HTML/HTML-escaped.
 *     Default: false.
 * @return {soydata.SanitizedHtmlAttribute} "dir=rtl" for RTL text in non-RTL
 *     context; "dir=ltr" for LTR text in non-LTR context;
 *     else, the empty string.
 */
soy.$$bidiDirAttr = function(bidiGlobalDir, text, opt_isHtml) {
    return new soydata.SanitizedHtmlAttribute(soy.$$getBidiFormatterInstance_(bidiGlobalDir).dirAttr(text, opt_isHtml));
}
;

/**
 * Returns a Unicode BiDi mark matching bidiGlobalDir (LRM or RLM) if the
 * directionality or the exit directionality of text are opposite to
 * bidiGlobalDir. Otherwise returns the empty string.
 * If opt_isHtml, makes sure to ignore the LTR nature of the mark-up and escapes
 * in text, making the logic suitable for HTML and HTML-escaped text.
 * @param {number} bidiGlobalDir The global directionality context: 1 if ltr, -1
 *     if rtl, 0 if unknown.
 * @param {string} text The text whose directionality is to be estimated.
 * @param {boolean=} opt_isHtml Whether text is HTML/HTML-escaped.
 *     Default: false.
 * @return {string} A Unicode bidi mark matching bidiGlobalDir, or the empty
 *     string when text's overall and exit directionalities both match
 *     bidiGlobalDir, or bidiGlobalDir is 0 (unknown).
 */
soy.$$bidiMarkAfter = function(bidiGlobalDir, text, opt_isHtml) {
    var formatter = soy.$$getBidiFormatterInstance_(bidiGlobalDir);
    return formatter.markAfter(text, opt_isHtml);
}
;

/**
 * Returns str wrapped in a <span dir=ltr|rtl> according to its directionality -
 * but only if that is neither neutral nor the same as the global context.
 * Otherwise, returns str unchanged.
 * Always treats str as HTML/HTML-escaped, i.e. ignores mark-up and escapes when
 * estimating str's directionality.
 * @param {number} bidiGlobalDir The global directionality context: 1 if ltr, -1
 *     if rtl, 0 if unknown.
 * @param {*} str The string to be wrapped. Can be other types, but the value
 *     will be coerced to a string.
 * @return {string} The wrapped string.
 */
soy.$$bidiSpanWrap = function(bidiGlobalDir, str) {
    var formatter = soy.$$getBidiFormatterInstance_(bidiGlobalDir);
    return formatter.spanWrap(str + '', true);
}
;

/**
 * Returns str wrapped in Unicode BiDi formatting characters according to its
 * directionality, i.e. either LRE or RLE at the beginning and PDF at the end -
 * but only if str's directionality is neither neutral nor the same as the
 * global context. Otherwise, returns str unchanged.
 * Always treats str as HTML/HTML-escaped, i.e. ignores mark-up and escapes when
 * estimating str's directionality.
 * @param {number} bidiGlobalDir The global directionality context: 1 if ltr, -1
 *     if rtl, 0 if unknown.
 * @param {*} str The string to be wrapped. Can be other types, but the value
 *     will be coerced to a string.
 * @return {string} The wrapped string.
 */
soy.$$bidiUnicodeWrap = function(bidiGlobalDir, str) {
    var formatter = soy.$$getBidiFormatterInstance_(bidiGlobalDir);
    return formatter.unicodeWrap(str + '', true);
}
;

// -----------------------------------------------------------------------------
// Generated code.

// START GENERATED CODE FOR ESCAPERS.

/**
 * @type {function (*) : string}
 */
soy.esc.$$escapeUriHelper = function(v) {
    return encodeURIComponent(String(v));
}
;

/**
 * Maps charcters to the escaped versions for the named escape directives.
 * @type {Object.<string, string>}
 * @private
 */
soy.esc.$$ESCAPE_MAP_FOR_ESCAPE_HTML__AND__NORMALIZE_HTML__AND__ESCAPE_HTML_NOSPACE__AND__NORMALIZE_HTML_NOSPACE_ = {
    '\x00': '\x26#0;',
    '\x22': '\x26quot;',
    '\x26': '\x26amp;',
    '\x27': '\x26#39;',
    '\x3c': '\x26lt;',
    '\x3e': '\x26gt;',
    '\x09': '\x26#9;',
    '\x0a': '\x26#10;',
    '\x0b': '\x26#11;',
    '\x0c': '\x26#12;',
    '\x0d': '\x26#13;',
    ' ': '\x26#32;',
    '-': '\x26#45;',
    '\/': '\x26#47;',
    '\x3d': '\x26#61;',
    '`': '\x26#96;',
    '\x85': '\x26#133;',
    '\xa0': '\x26#160;',
    '\u2028': '\x26#8232;',
    '\u2029': '\x26#8233;'
};

/**
 * A function that can be used with String.replace..
 * @param {string} ch A single character matched by a compatible matcher.
 * @return {string} A token in the output language.
 * @private
 */
soy.esc.$$REPLACER_FOR_ESCAPE_HTML__AND__NORMALIZE_HTML__AND__ESCAPE_HTML_NOSPACE__AND__NORMALIZE_HTML_NOSPACE_ = function(ch) {
    return soy.esc.$$ESCAPE_MAP_FOR_ESCAPE_HTML__AND__NORMALIZE_HTML__AND__ESCAPE_HTML_NOSPACE__AND__NORMALIZE_HTML_NOSPACE_[ch];
}
;

/**
 * Maps charcters to the escaped versions for the named escape directives.
 * @type {Object.<string, string>}
 * @private
 */
soy.esc.$$ESCAPE_MAP_FOR_ESCAPE_JS_STRING__AND__ESCAPE_JS_REGEX_ = {
    '\x00': '\\x00',
    '\x08': '\\x08',
    '\x09': '\\t',
    '\x0a': '\\n',
    '\x0b': '\\x0b',
    '\x0c': '\\f',
    '\x0d': '\\r',
    '\x22': '\\x22',
    '\x26': '\\x26',
    '\x27': '\\x27',
    '\/': '\\\/',
    '\x3c': '\\x3c',
    '\x3d': '\\x3d',
    '\x3e': '\\x3e',
    '\\': '\\\\',
    '\x85': '\\x85',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029',
    '$': '\\x24',
    '(': '\\x28',
    ')': '\\x29',
    '*': '\\x2a',
    '+': '\\x2b',
    ',': '\\x2c',
    '-': '\\x2d',
    '.': '\\x2e',
    ':': '\\x3a',
    '?': '\\x3f',
    '[': '\\x5b',
    ']': '\\x5d',
    '^': '\\x5e',
    '{': '\\x7b',
    '|': '\\x7c',
    '}': '\\x7d'
};

/**
 * A function that can be used with String.replace..
 * @param {string} ch A single character matched by a compatible matcher.
 * @return {string} A token in the output language.
 * @private
 */
soy.esc.$$REPLACER_FOR_ESCAPE_JS_STRING__AND__ESCAPE_JS_REGEX_ = function(ch) {
    return soy.esc.$$ESCAPE_MAP_FOR_ESCAPE_JS_STRING__AND__ESCAPE_JS_REGEX_[ch];
}
;

/**
 * Maps charcters to the escaped versions for the named escape directives.
 * @type {Object.<string, string>}
 * @private
 */
soy.esc.$$ESCAPE_MAP_FOR_ESCAPE_CSS_STRING_ = {
    '\x00': '\\0 ',
    '\x08': '\\8 ',
    '\x09': '\\9 ',
    '\x0a': '\\a ',
    '\x0b': '\\b ',
    '\x0c': '\\c ',
    '\x0d': '\\d ',
    '\x22': '\\22 ',
    '\x26': '\\26 ',
    '\x27': '\\27 ',
    '(': '\\28 ',
    ')': '\\29 ',
    '*': '\\2a ',
    '\/': '\\2f ',
    ':': '\\3a ',
    ';': '\\3b ',
    '\x3c': '\\3c ',
    '\x3d': '\\3d ',
    '\x3e': '\\3e ',
    '@': '\\40 ',
    '\\': '\\5c ',
    '{': '\\7b ',
    '}': '\\7d ',
    '\x85': '\\85 ',
    '\xa0': '\\a0 ',
    '\u2028': '\\2028 ',
    '\u2029': '\\2029 '
};

/**
 * A function that can be used with String.replace..
 * @param {string} ch A single character matched by a compatible matcher.
 * @return {string} A token in the output language.
 * @private
 */
soy.esc.$$REPLACER_FOR_ESCAPE_CSS_STRING_ = function(ch) {
    return soy.esc.$$ESCAPE_MAP_FOR_ESCAPE_CSS_STRING_[ch];
}
;

/**
 * Maps charcters to the escaped versions for the named escape directives.
 * @type {Object.<string, string>}
 * @private
 */
soy.esc.$$ESCAPE_MAP_FOR_NORMALIZE_URI__AND__FILTER_NORMALIZE_URI_ = {
    '\x00': '%00',
    '\x01': '%01',
    '\x02': '%02',
    '\x03': '%03',
    '\x04': '%04',
    '\x05': '%05',
    '\x06': '%06',
    '\x07': '%07',
    '\x08': '%08',
    '\x09': '%09',
    '\x0a': '%0A',
    '\x0b': '%0B',
    '\x0c': '%0C',
    '\x0d': '%0D',
    '\x0e': '%0E',
    '\x0f': '%0F',
    '\x10': '%10',
    '\x11': '%11',
    '\x12': '%12',
    '\x13': '%13',
    '\x14': '%14',
    '\x15': '%15',
    '\x16': '%16',
    '\x17': '%17',
    '\x18': '%18',
    '\x19': '%19',
    '\x1a': '%1A',
    '\x1b': '%1B',
    '\x1c': '%1C',
    '\x1d': '%1D',
    '\x1e': '%1E',
    '\x1f': '%1F',
    ' ': '%20',
    '\x22': '%22',
    '\x27': '%27',
    '(': '%28',
    ')': '%29',
    '\x3c': '%3C',
    '\x3e': '%3E',
    '\\': '%5C',
    '{': '%7B',
    '}': '%7D',
    '\x7f': '%7F',
    '\x85': '%C2%85',
    '\xa0': '%C2%A0',
    '\u2028': '%E2%80%A8',
    '\u2029': '%E2%80%A9',
    '\uff01': '%EF%BC%81',
    '\uff03': '%EF%BC%83',
    '\uff04': '%EF%BC%84',
    '\uff06': '%EF%BC%86',
    '\uff07': '%EF%BC%87',
    '\uff08': '%EF%BC%88',
    '\uff09': '%EF%BC%89',
    '\uff0a': '%EF%BC%8A',
    '\uff0b': '%EF%BC%8B',
    '\uff0c': '%EF%BC%8C',
    '\uff0f': '%EF%BC%8F',
    '\uff1a': '%EF%BC%9A',
    '\uff1b': '%EF%BC%9B',
    '\uff1d': '%EF%BC%9D',
    '\uff1f': '%EF%BC%9F',
    '\uff20': '%EF%BC%A0',
    '\uff3b': '%EF%BC%BB',
    '\uff3d': '%EF%BC%BD'
};

/**
 * A function that can be used with String.replace..
 * @param {string} ch A single character matched by a compatible matcher.
 * @return {string} A token in the output language.
 * @private
 */
soy.esc.$$REPLACER_FOR_NORMALIZE_URI__AND__FILTER_NORMALIZE_URI_ = function(ch) {
    return soy.esc.$$ESCAPE_MAP_FOR_NORMALIZE_URI__AND__FILTER_NORMALIZE_URI_[ch];
}
;

/**
 * Matches characters that need to be escaped for the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$MATCHER_FOR_ESCAPE_HTML_ = /[\x00\x22\x26\x27\x3c\x3e]/g;

/**
 * Matches characters that need to be escaped for the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$MATCHER_FOR_NORMALIZE_HTML_ = /[\x00\x22\x27\x3c\x3e]/g;

/**
 * Matches characters that need to be escaped for the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$MATCHER_FOR_ESCAPE_HTML_NOSPACE_ = /[\x00\x09-\x0d \x22\x26\x27\x2d\/\x3c-\x3e`\x85\xa0\u2028\u2029]/g;

/**
 * Matches characters that need to be escaped for the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$MATCHER_FOR_NORMALIZE_HTML_NOSPACE_ = /[\x00\x09-\x0d \x22\x27\x2d\/\x3c-\x3e`\x85\xa0\u2028\u2029]/g;

/**
 * Matches characters that need to be escaped for the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$MATCHER_FOR_ESCAPE_JS_STRING_ = /[\x00\x08-\x0d\x22\x26\x27\/\x3c-\x3e\\\x85\u2028\u2029]/g;

/**
 * Matches characters that need to be escaped for the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$MATCHER_FOR_ESCAPE_JS_REGEX_ = /[\x00\x08-\x0d\x22\x24\x26-\/\x3a\x3c-\x3f\x5b-\x5e\x7b-\x7d\x85\u2028\u2029]/g;

/**
 * Matches characters that need to be escaped for the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$MATCHER_FOR_ESCAPE_CSS_STRING_ = /[\x00\x08-\x0d\x22\x26-\x2a\/\x3a-\x3e@\\\x7b\x7d\x85\xa0\u2028\u2029]/g;

/**
 * Matches characters that need to be escaped for the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$MATCHER_FOR_NORMALIZE_URI__AND__FILTER_NORMALIZE_URI_ = /[\x00- \x22\x27-\x29\x3c\x3e\\\x7b\x7d\x7f\x85\xa0\u2028\u2029\uff01\uff03\uff04\uff06-\uff0c\uff0f\uff1a\uff1b\uff1d\uff1f\uff20\uff3b\uff3d]/g;

/**
 * A pattern that vets values produced by the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$FILTER_FOR_FILTER_CSS_VALUE_ = /^(?!-*(?:expression|(?:moz-)?binding))(?:[.#]?-?(?:[_a-z0-9-]+)(?:-[_a-z0-9-]+)*-?|-?(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[a-z]{1,2}|%)?|!important|)$/i;

/**
 * A pattern that vets values produced by the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$FILTER_FOR_FILTER_NORMALIZE_URI_ = /^(?:(?:https?|mailto):|[^&:\/?#]*(?:[\/?#]|$))/i;

/**
 * A pattern that vets values produced by the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$FILTER_FOR_FILTER_HTML_ATTRIBUTE_ = /^(?!style|on|action|archive|background|cite|classid|codebase|data|dsync|href|longdesc|src|usemap)(?:[a-z0-9_$:-]*)$/i;

/**
 * A pattern that vets values produced by the named directives.
 * @type RegExp
 * @private
 */
soy.esc.$$FILTER_FOR_FILTER_HTML_ELEMENT_NAME_ = /^(?!script|style|title|textarea|xmp|no)[a-z0-9_$:-]*$/i;

/**
 * A helper for the Soy directive |escapeHtml
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$escapeHtmlHelper = function(value) {
    var str = String(value);
    return str.replace(soy.esc.$$MATCHER_FOR_ESCAPE_HTML_, soy.esc.$$REPLACER_FOR_ESCAPE_HTML__AND__NORMALIZE_HTML__AND__ESCAPE_HTML_NOSPACE__AND__NORMALIZE_HTML_NOSPACE_);
}
;

/**
 * A helper for the Soy directive |normalizeHtml
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$normalizeHtmlHelper = function(value) {
    var str = String(value);
    return str.replace(soy.esc.$$MATCHER_FOR_NORMALIZE_HTML_, soy.esc.$$REPLACER_FOR_ESCAPE_HTML__AND__NORMALIZE_HTML__AND__ESCAPE_HTML_NOSPACE__AND__NORMALIZE_HTML_NOSPACE_);
}
;

/**
 * A helper for the Soy directive |escapeHtmlNospace
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$escapeHtmlNospaceHelper = function(value) {
    var str = String(value);
    return str.replace(soy.esc.$$MATCHER_FOR_ESCAPE_HTML_NOSPACE_, soy.esc.$$REPLACER_FOR_ESCAPE_HTML__AND__NORMALIZE_HTML__AND__ESCAPE_HTML_NOSPACE__AND__NORMALIZE_HTML_NOSPACE_);
}
;

/**
 * A helper for the Soy directive |normalizeHtmlNospace
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$normalizeHtmlNospaceHelper = function(value) {
    var str = String(value);
    return str.replace(soy.esc.$$MATCHER_FOR_NORMALIZE_HTML_NOSPACE_, soy.esc.$$REPLACER_FOR_ESCAPE_HTML__AND__NORMALIZE_HTML__AND__ESCAPE_HTML_NOSPACE__AND__NORMALIZE_HTML_NOSPACE_);
}
;

/**
 * A helper for the Soy directive |escapeJsString
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$escapeJsStringHelper = function(value) {
    var str = String(value);
    return str.replace(soy.esc.$$MATCHER_FOR_ESCAPE_JS_STRING_, soy.esc.$$REPLACER_FOR_ESCAPE_JS_STRING__AND__ESCAPE_JS_REGEX_);
}
;

/**
 * A helper for the Soy directive |escapeJsRegex
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$escapeJsRegexHelper = function(value) {
    var str = String(value);
    return str.replace(soy.esc.$$MATCHER_FOR_ESCAPE_JS_REGEX_, soy.esc.$$REPLACER_FOR_ESCAPE_JS_STRING__AND__ESCAPE_JS_REGEX_);
}
;

/**
 * A helper for the Soy directive |escapeCssString
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$escapeCssStringHelper = function(value) {
    var str = String(value);
    return str.replace(soy.esc.$$MATCHER_FOR_ESCAPE_CSS_STRING_, soy.esc.$$REPLACER_FOR_ESCAPE_CSS_STRING_);
}
;

/**
 * A helper for the Soy directive |filterCssValue
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$filterCssValueHelper = function(value) {
    var str = String(value);
    if (!soy.esc.$$FILTER_FOR_FILTER_CSS_VALUE_.test(str)) {
        return 'zSoyz';
    }
    return str;
}
;

/**
 * A helper for the Soy directive |normalizeUri
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$normalizeUriHelper = function(value) {
    var str = String(value);
    return str.replace(soy.esc.$$MATCHER_FOR_NORMALIZE_URI__AND__FILTER_NORMALIZE_URI_, soy.esc.$$REPLACER_FOR_NORMALIZE_URI__AND__FILTER_NORMALIZE_URI_);
}
;

/**
 * A helper for the Soy directive |filterNormalizeUri
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$filterNormalizeUriHelper = function(value) {
    var str = String(value);
    if (!soy.esc.$$FILTER_FOR_FILTER_NORMALIZE_URI_.test(str)) {
        return 'zSoyz';
    }
    return str.replace(soy.esc.$$MATCHER_FOR_NORMALIZE_URI__AND__FILTER_NORMALIZE_URI_, soy.esc.$$REPLACER_FOR_NORMALIZE_URI__AND__FILTER_NORMALIZE_URI_);
}
;

/**
 * A helper for the Soy directive |filterHtmlAttribute
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$filterHtmlAttributeHelper = function(value) {
    var str = String(value);
    if (!soy.esc.$$FILTER_FOR_FILTER_HTML_ATTRIBUTE_.test(str)) {
        return 'zSoyz';
    }
    return str;
}
;

/**
 * A helper for the Soy directive |filterHtmlElementName
 * @param {*} value Can be of any type but will be coerced to a string.
 * @return {string} The escaped text.
 */
soy.esc.$$filterHtmlElementNameHelper = function(value) {
    var str = String(value);
    if (!soy.esc.$$FILTER_FOR_FILTER_HTML_ELEMENT_NAME_.test(str)) {
        return 'zSoyz';
    }
    return str;
}
;

/**
 * Matches all tags, HTML comments, and DOCTYPEs in tag soup HTML.
 *
 * @type {RegExp}
 * @private
 */
soy.esc.$$HTML_TAG_REGEX_ = /<(?:!|\/?[a-zA-Z])(?:[^>'"]|"[^"]*"|'[^']*')*>/g;

// END GENERATED CODE

window.atl_soy = window.atl_soy || {};
atl_soy.concat = function(B, A) {
    if (B.concat) {
        return B.concat(A)
    }
    var C = {};
    for (var D in B) {
        if (B.hasOwnProperty(D)) {
            C[D] = B[D]
        }
    }
    for (var D in A) {
        if (A.hasOwnProperty(D)) {
            C[D] = A[D]
        }
    }
    return C
}
;
(function($) {
    JIRA.Events = JIRA.Events || {};
    JIRA.CONTENT_ADDED_REASON = {
        pageLoad: "pageLoad",
        inlineEditStarted: "inlineEditStarted",
        panelRefreshed: "panelRefreshed",
        criteriaPanelRefreshed: "criteriaPanelRefreshed",
        issueTableRefreshed: "issueTableRefreshed"
    };
    (function() {
        JIRA.Events.NEW_CONTENT_ADDED = "newContentAdded";
        JIRA.Events.NEW_PAGE_ADDED = "newPageAdded";
        $(function() {
            JIRA.trigger(JIRA.Events.NEW_CONTENT_ADDED, [$(document), JIRA.CONTENT_ADDED_REASON.pageLoad]);
            JIRA.trigger(JIRA.Events.NEW_PAGE_ADDED, [$(document)])
        });
        $(document).bind("dialogContentReady", function(e, dialog) {
            JIRA.trigger(JIRA.Events.NEW_CONTENT_ADDED, [dialog.get$popupContent()]);
            JIRA.trigger(JIRA.Events.NEW_PAGE_ADDED, [dialog.get$popupContent()])
        });
        JIRA.bind("contentRefreshed", function(e, context) {
            JIRA.trigger(JIRA.Events.NEW_CONTENT_ADDED, [$(context)])
        })
    }
    )()
}
)(AJS.$);
AJS.asBooleanOrString = function(value) {
    var lc = value ? value.toLowerCase() : "";
    if (lc == "true") {
        return true
    }
    if (lc == "false") {
        return false
    }
    return value
}
;
AJS.overrides = {};
AJS.Meta = jQuery.extend({}, AJS.Meta, {
    set: function(key, value) {
        AJS.overrides[key] = value
    },
    get: function(key) {
        if (typeof AJS.overrides[key] != "undefined") {
            return AJS.overrides[key]
        }
        var metaEl = jQuery("meta[name='ajs-" + key + "']");
        if (!metaEl.length) {
            return undefined
        }
        var value = metaEl.attr("content");
        return AJS.asBooleanOrString(value)
    },
    getBoolean: function(key) {
        return this.get(key) === true
    },
    getNumber: function(key) {
        return +this.get(key)
    },
    getAllAsMap: function() {
        var map = {};
        jQuery("meta[name^=ajs-]").each(function() {
            map[this.name.substring(4)] = this.content
        });
        return jQuery.extend(map, AJS.overrides)
    }
});
jQuery.getDocHeight = function() {
    return Math.max(jQuery(document).height(), jQuery(window).height(), document.documentElement.clientHeight)
}
;
jQuery.os = {};
if (navigator.platform.toLowerCase().indexOf("win") != -1) {
    jQuery.os.windows = true
}
if (navigator.platform.toLowerCase().indexOf("mac") != -1) {
    jQuery.os.mac = true
}
if (navigator.platform.toLowerCase().indexOf("linux") != -1) {
    jQuery.os.linux = true
}
;if (jQuery.browser.msie && jQuery.browser.version > 7 && typeof JSON !== "undefined") {
    JSON.stringify = null
}
;JIRA.Version = {};
JIRA.Version.compare = function(str2) {
    if (!AJS.params.JiraVersion) {
        return
    }
    var parts1 = AJS.params.JiraVersion.split(".");
    var parts2 = str2.split(".");
    var len;
    var ret = -1;
    len = parts1.length;
    if (parts1.length > parts2.length) {
        len = parts2.length;
        ret = 1
    } else {
        if (parts1.length == parts2.length) {
            ret = 0
        }
    }
    for (var i = 0; i < len; i++) {
        var p1, p2;
        var m1, m2;
        var pat;
        var i1, i2;
        p1 = parts1[i];
        p2 = parts2[i];
        pat = /^(0+)(.*)$/;
        m1 = p1.match(pat);
        if (m1 != null) {
            p1 = "0." + p1;
            i1 = parseFloat(p1)
        } else {
            i1 = parseInt(p1, 10)
        }
        m2 = p2.match(pat);
        if (m2 != null) {
            p2 = "0." + p2;
            i2 = parseFloat(p2)
        } else {
            i2 = parseInt(p2, 10)
        }
        if (i1 < i2) {
            return -1
        }
        if (i1 > i2) {
            return 1
        }
    }
    return ret
}
;
JIRA.Version.isGreaterThanOrEqualTo = function(ver) {
    return JIRA.Version.compare(ver) !== -1
}
;
if (!this.JSON) {
    this.JSON = {}
}
(function() {
    function f(n) {
        return n < 10 ? "0" + n : n
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function(key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
        }
        ;
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
            return this.valueOf()
        }
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }, rep;
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + string + '"'
    }
    function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key];
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key)
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value)
        }
        switch (typeof value) {
        case "string":
            return quote(value);
        case "number":
            return isFinite(value) ? String(value) : "null";
        case "boolean":
        case "null":
            return String(value);
        case "object":
            if (!value) {
                return "null"
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || "null"
                }
                v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                gap = mind;
                return v
            }
            if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === "string") {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ": " : ":") + v)
                        }
                    }
                }
            } else {
                for (k in value) {
                    if (Object.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ": " : ":") + v)
                        }
                    }
                }
            }
            v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v
        }
    }
    if (typeof JSON.stringify !== "function") {
        JSON.stringify = function(value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " "
                }
            } else {
                if (typeof space === "string") {
                    indent = space
                }
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify")
            }
            return str("", {
                "": value
            })
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function(text, reviver) {
            var j;
            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v
                            } else {
                                delete value[k]
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value)
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function(a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                })
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({
                    "": j
                }, "") : j
            }
            throw new SyntaxError("JSON.parse")
        }
    }
}());
function parseUri(str) {
    var o = parseUri.options
      , m = o.parser[o.strictMode ? "strict" : "loose"].exec(str)
      , uri = {}
      , i = 14;
    while (i--) {
        uri[o.key[i]] = m[i] || ""
    }
    uri[o.q.name] = {};
    uri[o.key[12]].replace(o.q.parser, function($0, $1, $2) {
        if ($1) {
            uri[o.q.name][$1] = $2
        }
    });
    return uri
}
parseUri.options = {
    strictMode: false,
    key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
    q: {
        name: "queryKey",
        parser: /(?:^|&)([^&=]*)=?([^&]*)/g
    },
    parser: {
        strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
        loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
    }
};
jQuery.effects || (function($) {
    $.effects = {};
    $.each(["backgroundColor", "borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor", "color", "outlineColor"], function(i, attr) {
        $.fx.step[attr] = function(fx) {
            if (!fx.colorInit) {
                fx.start = getColor(fx.elem, attr);
                fx.end = getRGB(fx.end);
                fx.colorInit = true
            }
            fx.elem.style[attr] = "rgb(" + Math.max(Math.min(parseInt((fx.pos * (fx.end[0] - fx.start[0])) + fx.start[0], 10), 255), 0) + "," + Math.max(Math.min(parseInt((fx.pos * (fx.end[1] - fx.start[1])) + fx.start[1], 10), 255), 0) + "," + Math.max(Math.min(parseInt((fx.pos * (fx.end[2] - fx.start[2])) + fx.start[2], 10), 255), 0) + ")"
        }
    });
    function getRGB(color) {
        var result;
        if (color && color.constructor == Array && color.length == 3) {
            return color
        }
        if (result = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(color)) {
            return [parseInt(result[1], 10), parseInt(result[2], 10), parseInt(result[3], 10)]
        }
        if (result = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(color)) {
            return [parseFloat(result[1]) * 2.55, parseFloat(result[2]) * 2.55, parseFloat(result[3]) * 2.55]
        }
        if (result = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(color)) {
            return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]
        }
        if (result = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(color)) {
            return [parseInt(result[1] + result[1], 16), parseInt(result[2] + result[2], 16), parseInt(result[3] + result[3], 16)]
        }
        if (result = /rgba\(0, 0, 0, 0\)/.exec(color)) {
            return colors["transparent"]
        }
        return colors[$.trim(color).toLowerCase()]
    }
    function getColor(elem, attr) {
        var color;
        do {
            color = $.curCSS(elem, attr);
            if (color != "" && color != "transparent" || $.nodeName(elem, "body")) {
                break
            }
            attr = "backgroundColor"
        } while (elem = elem.parentNode);return getRGB(color)
    }
    var colors = {
        aqua: [0, 255, 255],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        black: [0, 0, 0],
        blue: [0, 0, 255],
        brown: [165, 42, 42],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgrey: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkviolet: [148, 0, 211],
        fuchsia: [255, 0, 255],
        gold: [255, 215, 0],
        green: [0, 128, 0],
        indigo: [75, 0, 130],
        khaki: [240, 230, 140],
        lightblue: [173, 216, 230],
        lightcyan: [224, 255, 255],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        navy: [0, 0, 128],
        olive: [128, 128, 0],
        orange: [255, 165, 0],
        pink: [255, 192, 203],
        purple: [128, 0, 128],
        violet: [128, 0, 128],
        red: [255, 0, 0],
        silver: [192, 192, 192],
        white: [255, 255, 255],
        yellow: [255, 255, 0],
        transparent: [255, 255, 255]
    };
    var classAnimationActions = ["add", "remove", "toggle"]
      , shorthandStyles = {
        border: 1,
        borderBottom: 1,
        borderColor: 1,
        borderLeft: 1,
        borderRight: 1,
        borderTop: 1,
        borderWidth: 1,
        margin: 1,
        padding: 1
    };
    function getElementStyles() {
        var style = document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle, newStyle = {}, key, camelCase;
        if (style && style.length && style[0] && style[style[0]]) {
            var len = style.length;
            while (len--) {
                key = style[len];
                if (typeof style[key] == "string") {
                    camelCase = key.replace(/\-(\w)/g, function(all, letter) {
                        return letter.toUpperCase()
                    });
                    newStyle[camelCase] = style[key]
                }
            }
        } else {
            for (key in style) {
                if (typeof style[key] === "string") {
                    newStyle[key] = style[key]
                }
            }
        }
        return newStyle
    }
    function filterStyles(styles) {
        var name, value;
        for (name in styles) {
            value = styles[name];
            if (value == null || $.isFunction(value) || name in shorthandStyles || (/scrollbar/).test(name) || (!(/color/i).test(name) && isNaN(parseFloat(value)))) {
                delete styles[name]
            }
        }
        return styles
    }
    function styleDifference(oldStyle, newStyle) {
        var diff = {
            _: 0
        }, name;
        for (name in newStyle) {
            if (oldStyle[name] != newStyle[name]) {
                diff[name] = newStyle[name]
            }
        }
        return diff
    }
    $.effects.animateClass = function(value, duration, easing, callback) {
        if ($.isFunction(easing)) {
            callback = easing;
            easing = null
        }
        return this.each(function() {
            var that = $(this), originalStyleAttr = that.attr("style") || " ", originalStyle = filterStyles(getElementStyles.call(this)), newStyle, className = that.prop("className");
            $.each(classAnimationActions, function(i, action) {
                if (value[action]) {
                    that[action + "Class"](value[action])
                }
            });
            newStyle = filterStyles(getElementStyles.call(this));
            that.prop("className", className);
            that.animate(styleDifference(originalStyle, newStyle), duration, easing, function() {
                $.each(classAnimationActions, function(i, action) {
                    if (value[action]) {
                        that[action + "Class"](value[action])
                    }
                });
                if (typeof that.attr("style") == "object") {
                    that.attr("style").cssText = "";
                    that.attr("style").cssText = originalStyleAttr
                } else {
                    that.attr("style", originalStyleAttr)
                }
                if (callback) {
                    callback.apply(this, arguments)
                }
            })
        })
    }
    ;
    $.fn.extend({
        _addClass: $.fn.addClass,
        addClass: function(classNames, speed, easing, callback) {
            return speed ? $.effects.animateClass.apply(this, [{
                add: classNames
            }, speed, easing, callback]) : this._addClass(classNames)
        },
        _removeClass: $.fn.removeClass,
        removeClass: function(classNames, speed, easing, callback) {
            return speed ? $.effects.animateClass.apply(this, [{
                remove: classNames
            }, speed, easing, callback]) : this._removeClass(classNames)
        },
        _toggleClass: $.fn.toggleClass,
        toggleClass: function(classNames, force, speed, easing, callback) {
            if (typeof force == "boolean" || force === undefined) {
                if (!speed) {
                    return this._toggleClass(classNames, force)
                } else {
                    return $.effects.animateClass.apply(this, [(force ? {
                        add: classNames
                    } : {
                        remove: classNames
                    }), speed, easing, callback])
                }
            } else {
                return $.effects.animateClass.apply(this, [{
                    toggle: classNames
                }, force, speed, easing])
            }
        },
        switchClass: function(remove, add, speed, easing, callback) {
            return $.effects.animateClass.apply(this, [{
                add: add,
                remove: remove
            }, speed, easing, callback])
        }
    });
    $.extend($.effects, {
        version: "1.8rc3",
        save: function(element, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i] !== null) {
                    element.data("ec.storage." + set[i], element[0].style[set[i]])
                }
            }
        },
        restore: function(element, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i] !== null) {
                    element.css(set[i], element.data("ec.storage." + set[i]))
                }
            }
        },
        setMode: function(el, mode) {
            if (mode == "toggle") {
                mode = el.is(":hidden") ? "show" : "hide"
            }
            return mode
        },
        getBaseline: function(origin, original) {
            var y, x;
            switch (origin[0]) {
            case "top":
                y = 0;
                break;
            case "middle":
                y = 0.5;
                break;
            case "bottom":
                y = 1;
                break;
            default:
                y = origin[0] / original.height
            }
            switch (origin[1]) {
            case "left":
                x = 0;
                break;
            case "center":
                x = 0.5;
                break;
            case "right":
                x = 1;
                break;
            default:
                x = origin[1] / original.width
            }
            return {
                x: x,
                y: y
            }
        },
        createWrapper: function(element) {
            if (element.parent().is(".ui-effects-wrapper")) {
                return element.parent()
            }
            var props = {
                width: element.outerWidth(true),
                height: element.outerHeight(true),
                "float": element.css("float")
            }
              , wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                fontSize: "100%",
                background: "transparent",
                border: "none",
                margin: 0,
                padding: 0
            });
            element.wrap(wrapper);
            wrapper = element.parent();
            if (element.css("position") == "static") {
                wrapper.css({
                    position: "relative"
                });
                element.css({
                    position: "relative"
                })
            } else {
                $.extend(props, {
                    position: element.css("position"),
                    zIndex: element.css("z-index")
                });
                $.each(["top", "left", "bottom", "right"], function(i, pos) {
                    props[pos] = element.css(pos);
                    if (isNaN(parseInt(props[pos], 10))) {
                        props[pos] = "auto"
                    }
                });
                element.css({
                    position: "relative",
                    top: 0,
                    left: 0
                })
            }
            return wrapper.css(props).show()
        },
        removeWrapper: function(element) {
            if (element.parent().is(".ui-effects-wrapper")) {
                return element.parent().replaceWith(element)
            }
            return element
        },
        setTransition: function(element, list, factor, value) {
            value = value || {};
            $.each(list, function(i, x) {
                unit = element.cssUnit(x);
                if (unit[0] > 0) {
                    value[x] = unit[0] * factor + unit[1]
                }
            });
            return value
        }
    });
    function _normalizeArguments(effect, options, speed, callback) {
        if (typeof effect == "object") {
            callback = options;
            speed = null;
            options = effect;
            effect = options.effect
        }
        if ($.isFunction(options)) {
            callback = options;
            speed = null;
            options = {}
        }
        if (typeof options == "number" || $.fx.speeds[options]) {
            callback = speed;
            speed = options;
            options = {}
        }
        options = options || {};
        speed = speed || options.duration;
        speed = $.fx.off ? 0 : typeof speed == "number" ? speed : $.fx.speeds[speed] || $.fx.speeds._default;
        callback = callback || options.complete;
        return [effect, options, speed, callback]
    }
    $.fn.extend({
        effect: function(effect, options, speed, callback) {
            var args = _normalizeArguments.apply(this, arguments)
              , args2 = {
                options: args[1],
                duration: args[2],
                callback: args[3]
            }
              , effectMethod = $.effects[effect];
            return effectMethod && !$.fx.off ? effectMethod.call(this, args2) : this
        },
        _show: $.fn.show,
        show: function(speed) {
            if (!speed || typeof speed == "number" || $.fx.speeds[speed]) {
                return this._show.apply(this, arguments)
            } else {
                var args = _normalizeArguments.apply(this, arguments);
                args[1].mode = "show";
                return this.effect.apply(this, args)
            }
        },
        _hide: $.fn.hide,
        hide: function(speed) {
            if (!speed || typeof speed == "number" || $.fx.speeds[speed]) {
                return this._hide.apply(this, arguments)
            } else {
                var args = _normalizeArguments.apply(this, arguments);
                args[1].mode = "hide";
                return this.effect.apply(this, args)
            }
        },
        __toggle: $.fn.toggle,
        toggle: function(speed) {
            if (!speed || typeof speed == "number" || $.fx.speeds[speed] || typeof speed == "boolean" || $.isFunction(speed)) {
                return this.__toggle.apply(this, arguments)
            } else {
                var args = _normalizeArguments.apply(this, arguments);
                args[1].mode = "toggle";
                return this.effect.apply(this, args)
            }
        },
        cssUnit: function(key) {
            var style = this.css(key)
              , val = [];
            $.each(["em", "px", "%", "pt"], function(i, unit) {
                if (style.indexOf(unit) > 0) {
                    val = [parseFloat(style), unit]
                }
            });
            return val
        }
    });
    $.easing.jswing = $.easing.swing;
    $.extend($.easing, {
        def: "easeOutQuad",
        swing: function(x, t, b, c, d) {
            return $.easing[$.easing.def](x, t, b, c, d)
        },
        easeInQuad: function(x, t, b, c, d) {
            return c * (t /= d) * t + b
        },
        easeOutQuad: function(x, t, b, c, d) {
            return -c * (t /= d) * (t - 2) + b
        },
        easeInOutQuad: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) {
                return c / 2 * t * t + b
            }
            return -c / 2 * ((--t) * (t - 2) - 1) + b
        },
        easeInCubic: function(x, t, b, c, d) {
            return c * (t /= d) * t * t + b
        },
        easeOutCubic: function(x, t, b, c, d) {
            return c * ((t = t / d - 1) * t * t + 1) + b
        },
        easeInOutCubic: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) {
                return c / 2 * t * t * t + b
            }
            return c / 2 * ((t -= 2) * t * t + 2) + b
        },
        easeInQuart: function(x, t, b, c, d) {
            return c * (t /= d) * t * t * t + b
        },
        easeOutQuart: function(x, t, b, c, d) {
            return -c * ((t = t / d - 1) * t * t * t - 1) + b
        },
        easeInOutQuart: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) {
                return c / 2 * t * t * t * t + b
            }
            return -c / 2 * ((t -= 2) * t * t * t - 2) + b
        },
        easeInQuint: function(x, t, b, c, d) {
            return c * (t /= d) * t * t * t * t + b
        },
        easeOutQuint: function(x, t, b, c, d) {
            return c * ((t = t / d - 1) * t * t * t * t + 1) + b
        },
        easeInOutQuint: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) {
                return c / 2 * t * t * t * t * t + b
            }
            return c / 2 * ((t -= 2) * t * t * t * t + 2) + b
        },
        easeInSine: function(x, t, b, c, d) {
            return -c * Math.cos(t / d * (Math.PI / 2)) + c + b
        },
        easeOutSine: function(x, t, b, c, d) {
            return c * Math.sin(t / d * (Math.PI / 2)) + b
        },
        easeInOutSine: function(x, t, b, c, d) {
            return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b
        },
        easeInExpo: function(x, t, b, c, d) {
            return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b
        },
        easeOutExpo: function(x, t, b, c, d) {
            return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b
        },
        easeInOutExpo: function(x, t, b, c, d) {
            if (t == 0) {
                return b
            }
            if (t == d) {
                return b + c
            }
            if ((t /= d / 2) < 1) {
                return c / 2 * Math.pow(2, 10 * (t - 1)) + b
            }
            return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b
        },
        easeInCirc: function(x, t, b, c, d) {
            return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b
        },
        easeOutCirc: function(x, t, b, c, d) {
            return c * Math.sqrt(1 - (t = t / d - 1) * t) + b
        },
        easeInOutCirc: function(x, t, b, c, d) {
            if ((t /= d / 2) < 1) {
                return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b
            }
            return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b
        },
        easeInElastic: function(x, t, b, c, d) {
            var s = 1.70158;
            var p = 0;
            var a = c;
            if (t == 0) {
                return b
            }
            if ((t /= d) == 1) {
                return b + c
            }
            if (!p) {
                p = d * 0.3
            }
            if (a < Math.abs(c)) {
                a = c;
                var s = p / 4
            } else {
                var s = p / (2 * Math.PI) * Math.asin(c / a)
            }
            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b
        },
        easeOutElastic: function(x, t, b, c, d) {
            var s = 1.70158;
            var p = 0;
            var a = c;
            if (t == 0) {
                return b
            }
            if ((t /= d) == 1) {
                return b + c
            }
            if (!p) {
                p = d * 0.3
            }
            if (a < Math.abs(c)) {
                a = c;
                var s = p / 4
            } else {
                var s = p / (2 * Math.PI) * Math.asin(c / a)
            }
            return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b
        },
        easeInOutElastic: function(x, t, b, c, d) {
            var s = 1.70158;
            var p = 0;
            var a = c;
            if (t == 0) {
                return b
            }
            if ((t /= d / 2) == 2) {
                return b + c
            }
            if (!p) {
                p = d * (0.3 * 1.5)
            }
            if (a < Math.abs(c)) {
                a = c;
                var s = p / 4
            } else {
                var s = p / (2 * Math.PI) * Math.asin(c / a)
            }
            if (t < 1) {
                return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b
            }
            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b
        },
        easeInBack: function(x, t, b, c, d, s) {
            if (s == undefined) {
                s = 1.70158
            }
            return c * (t /= d) * t * ((s + 1) * t - s) + b
        },
        easeOutBack: function(x, t, b, c, d, s) {
            if (s == undefined) {
                s = 1.70158
            }
            return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b
        },
        easeInOutBack: function(x, t, b, c, d, s) {
            if (s == undefined) {
                s = 1.70158
            }
            if ((t /= d / 2) < 1) {
                return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b
            }
            return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b
        },
        easeInBounce: function(x, t, b, c, d) {
            return c - $.easing.easeOutBounce(x, d - t, 0, c, d) + b
        },
        easeOutBounce: function(x, t, b, c, d) {
            if ((t /= d) < (1 / 2.75)) {
                return c * (7.5625 * t * t) + b
            } else {
                if (t < (2 / 2.75)) {
                    return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b
                } else {
                    if (t < (2.5 / 2.75)) {
                        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b
                    } else {
                        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b
                    }
                }
            }
        },
        easeInOutBounce: function(x, t, b, c, d) {
            if (t < d / 2) {
                return $.easing.easeInBounce(x, t * 2, 0, c, d) * 0.5 + b
            }
            return $.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b
        }
    })
}
)(jQuery);
(function() {
    JIRA.parseOptionsFromFieldset = function($fieldset) {
        var parsedValues = parseFieldset($fieldset, $fieldset);
        $fieldset.remove();
        return parsedValues
    }
    ;
    function parseFieldset($fieldset, $parentFieldset) {
        var ret = {};
        $fieldset.children().each(function() {
            var itemValue, $item = jQuery(this);
            if ($item.is("input[type=hidden]")) {
                itemValue = parseValue($item);
                ret[itemValue.id] = itemValue.value
            } else {
                if ($item.is("fieldset")) {
                    ret[$item.attr("title") || $item.attr("id")] = parseFieldset($item, $parentFieldset)
                } else {
                    $item.insertBefore($parentFieldset)
                }
            }
        });
        return ret
    }
    function parseValue($item) {
        var itemValue = {}
          , value = $item.val();
        itemValue.id = $item.attr("title") || $item.attr("id");
        itemValue.value = (value.match(/^(tru|fals)e$/i) ? value.toLowerCase() == "true" : value);
        return itemValue
    }
}
)();
jQuery.fn.handleAccessKeys = function(options) {
    var accessKeyAttr = "accesskey";
    if (jQuery.browser.msie && jQuery.browser.version == "7.0") {
        accessKeyAttr = "accessKey"
    }
    options = options || {};
    this.each(function() {
        var $form = AJS.$(this), blackList = [], $myAccessKeyElems, $accessKeyElems;
        $accessKeyElems = jQuery("form").not(this).find(":input[" + accessKeyAttr + "], a[" + accessKeyAttr + "]");
        $myAccessKeyElems = jQuery(":input[" + accessKeyAttr + "], a[" + accessKeyAttr + "]", this);
        if (!$form.is("form")) {
            console.warn("jQuery.fn.enableAccessKeys: node type [" + $form.prop("nodeName") + "] is not valid. " + "Only <form> supported");
            return this
        }
        if ($form.data("handleAccessKeys.applied")) {
            return
        }
        $form.data("handleAccessKeys.applied", true);
        $form.find(":input[" + accessKeyAttr + "], a[" + accessKeyAttr + "]").each(function() {
            var accessKey = jQuery(this).attr(accessKeyAttr);
            if (accessKey) {
                blackList.push(accessKey.toLowerCase())
            }
        });
        $form.delegate(":input, a", "focus", function() {
            removeAccessKeys($accessKeyElems, blackList);
            attachAccessKeys($myAccessKeyElems)
        }).delegate(":input, a", "blur", function() {
            attachAccessKeys($accessKeyElems)
        })
    });
    function isInvalid(key, blackList) {
        if (key) {
            if (options.selective === false) {
                return true
            }
            if (/[a-z]/i.test(key)) {
                key = key.toLowerCase()
            }
            return jQuery.inArray(key, blackList) !== -1
        }
    }
    function attachAccessKeys($accessKeyElems) {
        $accessKeyElems.each(function() {
            var $this = AJS.$(this);
            if ($this.data(accessKeyAttr)) {
                $this.attr(accessKeyAttr, $this.data(accessKeyAttr))
            }
        })
    }
    function removeAccessKeys($accessKeyElems, blackList) {
        $accessKeyElems.each(function() {
            var $this = AJS.$(this);
            if (isInvalid($this.attr(accessKeyAttr), blackList)) {
                $this.data(accessKeyAttr, $this.attr(accessKeyAttr));
                $this.removeAttr(accessKeyAttr)
            }
        })
    }
    return this
}
;
jQuery.fn.setSelectionRange = function(selectionStart, selectionEnd) {
    if (this.length == 0) {
        return
    }
    if (this[0].setSelectionRange) {
        this[0].focus();
        this[0].setSelectionRange(selectionStart, selectionEnd)
    } else {
        if (this[0].createTextRange) {
            var range = this[0].createTextRange();
            range.collapse(true);
            range.moveEnd("character", selectionEnd);
            range.moveStart("character", selectionStart);
            range.select()
        }
    }
}
,
jQuery.fn.setCaretToPosition = function(position) {
    this.setSelectionRange(position, position)
}
;
(function($) {
    $.fn.pjax = function(container, options) {
        if (options) {
            options.container = container
        } else {
            options = $.isPlainObject(container) ? container : {
                container: container
            }
        }
        if (options.container && typeof options.container !== "string") {
            throw "pjax container must be a string selector!";
            return false
        }
        return this.live("click", function(event) {
            if (event.which > 1 || event.metaKey) {
                return true
            }
            var defaults = {
                url: this.href,
                container: $(this).attr("data-pjax"),
                clickedElement: $(this),
                fragment: null
            };
            $.pjax($.extend({}, defaults, options));
            event.preventDefault()
        })
    }
    ;
    $.pjax = function(options) {
        var $container = $(options.container)
          , success = options.success || $.noop;
        delete options.success;
        if (typeof options.container !== "string") {
            throw "pjax container must be a string selector!"
        }
        var defaults = {
            timeout: 650,
            push: true,
            replace: false,
            data: {
                _pjax: true
            },
            type: "GET",
            dataType: "html",
            beforeSend: function(xhr) {
                $container.trigger("start.pjax");
                xhr.setRequestHeader("X-PJAX", "true")
            },
            error: function() {
                window.location = options.url
            },
            complete: function() {
                $container.trigger("end.pjax")
            },
            success: function(data) {
                if (options.fragment) {
                    var $fragment = $(data).find(options.fragment);
                    if ($fragment.length) {
                        data = $fragment.children()
                    } else {
                        return window.location = options.url
                    }
                } else {
                    if (!$.trim(data) || /<html/i.test(data)) {
                        return window.location = options.url
                    }
                }
                $container.html(data);
                var oldTitle = document.title
                  , title = $.trim($container.find("title").remove().text());
                if (title) {
                    document.title = title
                }
                var state = {
                    pjax: options.container,
                    fragment: options.fragment,
                    timeout: options.timeout
                };
                var query = $.param(options.data);
                if (query != "_pjax=true") {
                    state.url = options.url + (/\?/.test(options.url) ? "&" : "?") + query
                }
                if (options.replace) {
                    window.history.replaceState(state, document.title, options.url)
                } else {
                    if (options.push) {
                        if (!$.pjax.active) {
                            window.history.replaceState($.extend({}, state, {
                                url: null
                            }), oldTitle);
                            $.pjax.active = true
                        }
                        window.history.pushState(state, document.title, options.url)
                    }
                }
                if ((options.replace || options.push) && window._gaq) {
                    _gaq.push(["_trackPageview"])
                }
                var hash = window.location.hash.toString();
                if (hash !== "") {
                    window.location.href = hash
                }
                success.apply(this, arguments)
            }
        };
        options = $.extend(true, {}, defaults, options);
        if ($.isFunction(options.url)) {
            options.url = options.url()
        }
        var xhr = $.pjax.xhr;
        if (xhr && xhr.readyState < 4) {
            xhr.onreadystatechange = $.noop;
            xhr.abort()
        }
        $.pjax.xhr = $.ajax(options);
        $(document).trigger("pjax", $.pjax.xhr, options);
        return $.pjax.xhr
    }
    ;
    var popped = ("state"in window.history)
      , initialURL = location.href;
    $(window).bind("popstate", function(event) {
        var initialPop = !popped && location.href == initialURL;
        popped = true;
        if (initialPop) {
            return
        }
        var state = event.state;
        if (state && state.pjax) {
            var container = state.pjax;
            if ($(container + "").length) {
                $.pjax({
                    url: state.url || location.href,
                    fragment: state.fragment,
                    container: container,
                    push: false,
                    timeout: state.timeout
                })
            } else {
                window.location = location.href
            }
        }
    });
    if ($.inArray("state", $.event.props) < 0) {
        $.event.props.push("state")
    }
    $.support.pjax = window.history && window.history.pushState && window.history.replaceState && !navigator.userAgent.match(/(iPod|iPhone|iPad|WebApps\/.+CFNetwork)/);
    if (!$.support.pjax) {
        $.pjax = function(options) {
            window.location = $.isFunction(options.url) ? options.url() : options.url
        }
        ;
        $.fn.pjax = function() {
            return this
        }
    }
}
)(jQuery);
JIRA.SessionStorage = {};
(function() {
    var MAGIC_MARK = "jsessionstorage:";
    var nonNativeSessionStorageObjInitialised = false;
    var nonNativeSessionStorageObj = {};
    var nonNativeSessionStorageImpl = {
        nonnativeimplementation: true,
        _storage: function() {
            if (nonNativeSessionStorageObjInitialised) {
                return nonNativeSessionStorageObj
            }
            if (typeof window.name != "string") {
                window.name = MAGIC_MARK + "{}"
            }
            if (window.name.indexOf(MAGIC_MARK) != 0) {
                window.name = MAGIC_MARK + "{}"
            }
            var jsonData = window.name.substr(MAGIC_MARK.length);
            nonNativeSessionStorageObj = JSON.parse(jsonData);
            if (!nonNativeSessionStorageObj) {
                nonNativeSessionStorageObj = {}
            }
            nonNativeSessionStorageObjInitialised = true;
            return nonNativeSessionStorageObj
        },
        _persistStorage: function() {
            var storeObj = this._storage();
            var jsonData = JSON.stringify(storeObj);
            window.name = MAGIC_MARK + jsonData
        },
        length: function() {
            var i = 0;
            var store = this._storage();
            for (var x in store) {
                i++
            }
            return i
        },
        key: function(index) {
            var i = 0;
            var store = this._storage();
            for (var x in store) {
                if (i == index) {
                    return x
                }
                i++
            }
            return null
        },
        getItem: function(key) {
            return this._storage()[key]
        },
        setItem: function(key, value) {
            this._storage()[key] = value;
            this._persistStorage()
        },
        removeItem: function(key) {
            delete this._storage()[key];
            this._persistStorage()
        },
        clear: function() {
            var store = this._storage();
            for (var x in store) {
                delete x
            }
            this._persistStorage()
        }
    };
    var _sessionStorageImpl = window.sessionStorage != null ? window.sessionStorage : nonNativeSessionStorageImpl;
    JIRA.SessionStorage.nativesupport = window.sessionStorage != null;
    JIRA.SessionStorage.length = function() {
        if (typeof _sessionStorageImpl.length == "function") {
            return _sessionStorageImpl.length()
        }
        return _sessionStorageImpl.length
    }
    ;
    JIRA.SessionStorage.key = function(index) {
        return _sessionStorageImpl.key(index)
    }
    ;
    JIRA.SessionStorage.getItem = function(key) {
        return _sessionStorageImpl.getItem(key)
    }
    ;
    JIRA.SessionStorage.setItem = function(key, value) {
        _sessionStorageImpl.setItem(key, value)
    }
    ;
    JIRA.SessionStorage.removeItem = function(key) {
        _sessionStorageImpl.removeItem(key)
    }
    ;
    JIRA.SessionStorage.clear = function() {
        _sessionStorageImpl.clear()
    }
    ;
    JIRA.SessionStorage.asJSON = function() {
        var len = this.length();
        var jsData = "{\n";
        for (var i = 0; i < len; i++) {
            var key = this.key(i);
            var value = this.getItem(key);
            jsData += key + ":" + value;
            if (i < len - 1) {
                jsData += ","
            }
            jsData += "\n"
        }
        jsData += "}\n";
        return jsData
    }
}
)(jQuery);
AJS.namespace("jira.app.session.storage", null, JIRA.SessionStorage);
if (typeof localStorage === "undefined") {
    localStorage = {
        getItem: jQuery.noop,
        setItem: jQuery.noop,
        removeItem: jQuery.noop,
        clear: jQuery.noop
    }
}
;AJS.nextPage = function() {
    var data = []
      , oldBeforeUnload = window.onbeforeunload;
    window.onbeforeunload = function() {
        if (window.sessionStorage) {
            sessionStorage.setItem("AJS.thisPage", JSON.stringify(data))
        } else {
            saveCookie("AJS.thisPage", JSON.stringify(data))
        }
        if (oldBeforeUnload) {
            oldBeforeUnload()
        }
    }
    ;
    return function(name, value) {
        var replaced;
        jQuery.each(data, function() {
            if (this.name === name) {
                this.value = value;
                replaced = true
            }
        });
        if (!replaced) {
            data.push({
                name: name,
                value: value
            })
        }
    }
}();
AJS.thisPage = function() {
    var i, value, unformattedData, data = {};
    if (window.sessionStorage) {
        unformattedData = sessionStorage.getItem("AJS.thisPage");
        sessionStorage.removeItem("AJS.thisPage")
    } else {
        unformattedData = readCookie("AJS.thisPage");
        eraseCookie("AJS.thisPage")
    }
    if (unformattedData) {
        unformattedData = JSON.parse(unformattedData);
        for (i = 0; i < unformattedData.length; i++) {
            data[unformattedData[i].name] = unformattedData[i].value
        }
    }
    return function(key) {
        return data[key]
    }
}();
(function() {
    var META_TOKEN_ID = "atlassian-token";
    var PARAM_TOKEN_NAME = "atl_token";
    var INPUT_TOKEN_NAME = "atl_token";
    var tokenQueryParam = function(token) {
        return AJS.format("{0}={1}", PARAM_TOKEN_NAME, token)
    };
    var replaceTokenInMeta = function(oldToken, newToken) {
        var metaTokenSelector = AJS.format("meta#{0}", META_TOKEN_ID);
        AJS.$(metaTokenSelector).attr("content", newToken)
    };
    var replaceTokenInLinks = function(oldToken, newToken) {
        AJS.$("a,link").each(function() {
            var link = AJS.$(this);
            var href = link.attr("href");
            if (href) {
                link.attr("href", href.replace(tokenQueryParam(oldToken), tokenQueryParam(newToken)))
            }
        })
    };
    var replaceTokenInForms = function(oldToken, newToken) {
        AJS.$("form").each(function() {
            var $form = AJS.$(this);
            var action = $form.attr("action");
            if (action) {
                $form.attr("action", action.replace(tokenQueryParam(oldToken), tokenQueryParam(newToken)))
            }
            var formInputSelector = AJS.format("input[name={0}][value={1}]", INPUT_TOKEN_NAME, oldToken);
            $form.find(formInputSelector).each(function() {
                AJS.$(this).attr("value", newToken)
            })
        })
    };
    AJS.namespace("JIRA.XSRF");
    if (typeof JIRA.XSRF.updateTokenOnPage !== "function") {
        JIRA.XSRF.updateTokenOnPage = function(newToken) {
            var oldToken = atl_token();
            if (oldToken !== newToken) {
                replaceTokenInMeta(oldToken, newToken);
                replaceTokenInLinks(oldToken, newToken);
                replaceTokenInForms(oldToken, newToken)
            }
        }
    }
}());
AJS.namespace("jira.xsrf", null, JIRA.XSRF);
(function() {
    var defaultEvents = {};
    AJS.bindDefaultCustomEvent = function(name, defaultHandler) {
        if (defaultEvents[name]) {
            throw new Error("You have already bound a default handler for [" + name + "] event")
        }
        defaultEvents[name] = function(e) {
            var events = AJS.$(document).data("events")[name]
              , lastEventHandler = events[events.length - 1].handler;
            if (lastEventHandler !== arguments.callee) {
                e.preventDefault = function() {
                    defaultHandler = null
                }
                ;
                events[events.length - 1].handler = function() {
                    lastEventHandler.apply(this, arguments);
                    if (defaultHandler) {
                        defaultHandler.apply(this, arguments)
                    }
                    events[events.length - 1].handler = lastEventHandler
                }
            } else {
                defaultHandler.apply(this, arguments)
            }
        }
        ;
        AJS.$(document).bind(name, defaultEvents[name])
    }
    ;
    AJS.unbindDefaultCustomEvent = function(name) {
        if (defaultEvents[name]) {
            AJS.$(document).unbind(name, defaultEvents[name]);
            delete defaultEvents[name]
        }
    }
}
)();
AJS.ContentRetriever = Class.extend({
    startingRequest: jQuery.noop,
    finishedRequest: jQuery.noop,
    cache: jQuery.noop,
    isLocked: jQuery.noop,
    content: jQuery.noop
});
AJS.AjaxContentRetriever = AJS.ContentRetriever.extend({
    init: function(options) {
        var instance = this;
        this.ajaxOptions = options;
        if (!this.ajaxOptions.requestDelay && this.ajaxOptions.requestDelay !== 0) {
            this.ajaxOptions.requestDelay = 75
        }
    },
    getAjaxOptions: function() {
        var ajaxOptions, instance = this;
        if (typeof this.ajaxOptions === "string") {
            ajaxOptions = {
                url: this.ajaxOptions
            }
        } else {
            if (jQuery.isFunction(this.ajaxOptions)) {
                ajaxOptions = this.ajaxOptions()
            } else {
                ajaxOptions = this.ajaxOptions
            }
        }
        ajaxOptions.globalThrobber = false;
        ajaxOptions.success = function(data, textStatus, xhr) {
            instance._requestComplete(xhr, textStatus, data, true, null)
        }
        ;
        ajaxOptions.error = function(xhr, textStatus) {
            if (xhr.rc) {
                xhr.status = xhr.rc
            }
            instance._requestComplete(xhr, textStatus, null, false, null)
        }
        ;
        return ajaxOptions
    },
    content: function(arg) {
        if (AJS.$.isFunction(arg)) {
            this.callback = arg;
            this._makeRequest(arg)
        } else {
            if (arg) {
                if (this.callback) {
                    this.callback(arg);
                    delete this.callback
                }
            }
        }
        return this.$content
    },
    startingRequest: function(callback) {
        if (callback) {
            this.startingCallback = callback
        } else {
            if (this.startingCallback) {
                this.locked = true;
                this.startingCallback()
            }
        }
    },
    finishedRequest: function(callback) {
        if (callback) {
            this.finishedCallback = callback
        } else {
            if (this.finishedCallback) {
                this.locked = false;
                this.finishedCallback()
            }
        }
    },
    cache: function(cache) {
        if (typeof cache !== "undefined") {
            this.getAjaxOptions().cache = cache
        }
        return this.getAjaxOptions().cache
    },
    isLocked: function() {
        return this.locked
    },
    _requestComplete: function(xhr, statusText, data, successful, errorThrown) {
        if (statusText === "abort") {
            this.locked = false;
            return
        }
        var $content, smartAjaxResult, ajaxOptions = this.getAjaxOptions();
        if (JIRA.SmartAjax.SmartAjaxResult) {
            smartAjaxResult = JIRA.SmartAjax.SmartAjaxResult.apply(window, arguments)
        }
        if (successful) {
            if (AJS.$.isFunction(ajaxOptions.formatSuccess)) {
                $content = ajaxOptions.formatSuccess(data)
            } else {
                $content = AJS.$("<div>" + data + "</div>")
            }
        } else {
            if (AJS.$.isFunction(ajaxOptions.formatError)) {
                $content = ajaxOptions.formatError(data)
            } else {
                if (smartAjaxResult) {
                    var errorClass = smartAjaxResult.status === 401 ? "warning" : "error";
                    $content = AJS.$('<div class="aui-message ' + errorClass + '"><span class="aui-icon icon-' + errorClass + '"></span>' + JIRA.SmartAjax.buildSimpleErrorContent(smartAjaxResult) + "</div>")
                }
            }
        }
        this.content($content);
        this.finishedRequest()
    },
    _makeRequest: function() {
        var instance = this
          , ajaxOptions = this.getAjaxOptions();
        if (this.outstandingRequest) {
            this.outstandingRequest.abort();
            this.outstandingRequest = null
        }
        clearTimeout(this._queuedRequest);
        if (this.isLocked()) {
            this._queuedRequest = setTimeout(function() {
                instance._makeRequest()
            }, this.ajaxOptions.requestDelay)
        } else {
            doRequest()
        }
        function doRequest() {
            instance.startingRequest();
            instance.outstandingRequest = AJS.$.ajax(instance.getAjaxOptions())
        }
    }
});
AJS.DOMContentRetriever = AJS.ContentRetriever.extend({
    init: function(content) {
        this.$content = AJS.$(content)
    },
    content: function(callback) {
        if (AJS.$.isFunction(callback)) {
            callback(this.$content)
        }
        return this.$content
    },
    cache: function() {},
    isLocked: function() {},
    startingRequest: function() {},
    finishedRequest: function() {}
});
AJS.DeferredContentRetriever = AJS.ContentRetriever.extend({
    init: function(func) {
        this.func = func
    },
    content: function(callback) {
        if (AJS.$.isFunction(callback)) {
            var res = this.func();
            if (res instanceof jQuery) {
                callback(res)
            } else {
                res.done(_.bind(function(content) {
                    callback(content)
                }, this))
            }
        }
    },
    cache: function() {
        return false
    },
    isLocked: function() {},
    startingRequest: function() {},
    finishedRequest: function() {}
});
AJS.InlineLayer = AJS.Control.extend({
    CLASS_SIGNATURE: "AJS_InlineLayer",
    SCROLL_HIDE_EVENT: "scroll.hide-dropdown",
    init: function(options) {
        var instance = this;
        if (!(options instanceof AJS.InlineLayer.OptionsDescriptor)) {
            this.options = new AJS.InlineLayer.OptionsDescriptor(options)
        } else {
            this.options = options
        }
        this.offsetTarget(this.options.offsetTarget());
        this.contentRetriever = this.options.contentRetriever();
        AJS.$.extend(this, this.options.positioningController());
        if (!(this.contentRetriever instanceof AJS.ContentRetriever)) {
            throw new Error("AJS.InlineLayer: Failed construction, Content retriever does not implement interface " + "[AJS.ContentRetrieverInterface]")
        }
        this.contentRetriever.startingRequest(function() {
            instance._showLoading()
        });
        this.contentRetriever.finishedRequest(function() {
            instance._hideLoading()
        });
        this.$layer = this._render("layer", this.options.alignment())
    },
    content: function(arg) {
        var instance = this;
        if (AJS.$.isFunction(arg)) {
            this.contentRetriever.content(function(content) {
                instance.$content = content.removeClass("hidden");
                arg.call(instance)
            })
        } else {
            return this.$content
        }
    },
    offsetTarget: function() {
        var $offsetTarget = this.options.offsetTarget();
        if (AJS.$.isFunction($offsetTarget)) {
            $offsetTarget = $offsetTarget()
        }
        return $offsetTarget
    },
    contentChange: function(callback) {
        var instance = this;
        if (AJS.$.isFunction(callback)) {
            if (!this.contentChangeCallback) {
                this.contentChangeCallback = []
            }
            this.contentChangeCallback.push(callback)
        } else {
            if (!callback) {
                this.trigger("contentChanged", [this]);
                this.setWidth(this.options.width());
                if (this.contentChangeCallback) {
                    AJS.$.each(this.contentChangeCallback, function(i, callback) {
                        callback(instance)
                    })
                }
            }
        }
    },
    onhide: function(callback) {
        var instance = this;
        if (AJS.$.isFunction(callback)) {
            if (!this.hideCallback) {
                this.hideCallback = []
            }
            this.hideCallback.push(callback)
        } else {
            if (!callback && this.hideCallback) {
                AJS.$.each(this.hideCallback, function(i, callback) {
                    callback(instance)
                })
            }
        }
    },
    layer: function(layer) {
        if (layer) {
            this.$layer = layer
        } else {
            return this.$layer
        }
    },
    placeholder: function(placeholder) {
        if (placeholder) {
            this._throwReadOnlyError("placeholder")
        } else {
            return this.$placeholder
        }
    },
    isVisible: function(visible) {
        if (typeof visible !== "undefined") {
            this._throwReadOnlyError("visible")
        }
        return this.visible
    },
    scrollableContainer: function(scrollableContainer) {
        if (scrollableContainer) {
            this._throwReadOnlyError("scrollableContainer")
        }
        return this.$scrollableContainer
    },
    isInitialized: function(initialised) {
        if (initialised) {
            this._throwReadOnlyError("initialized")
        }
        return this.initialized
    },
    hide: function(reason, e) {
        var event;
        var target = e && e.target;
        if (!this.isVisible()) {
            return false
        }
        event = AJS.$.Event(AJS.InlineLayer.EVENTS.beforeHide);
        this.trigger(event, [this.layer(), reason, this.options.id, target]);
        JIRA.trigger(event, [this.layer(), reason, this.options.id, target]);
        if (!event.isDefaultPrevented()) {
            this.visible = false;
            this.layer().removeClass(AJS.ACTIVE_CLASS).hide();
            this.offsetTarget().removeClass(AJS.ACTIVE_CLASS);
            var positionController = this;
            setTimeout(function() {
                positionController.appendToPlaceholder()
            }, 0);
            this._unbindEvents();
            this.onhide();
            this.trigger("hideLayer", [this]);
            AJS.$(document).trigger("hideLayer", [this.CLASS_SIGNATURE, this]);
            this.trigger(AJS.InlineLayer.EVENTS.hide, [this.layer(), reason, this.options.id]);
            JIRA.trigger(AJS.InlineLayer.EVENTS.hide, [this.layer(), reason, this.options.id]);
            AJS.InlineLayer.current = null
        }
    },
    refreshContent: function(callback) {
        var instance = this;
        this.content(function() {
            if (this.layer().has(this.content()).length === 0) {
                this.layer().html(this.content())
            }
            if (AJS.$.isFunction(callback)) {
                callback.call(instance)
            }
            this.contentChange()
        })
    },
    show: function() {
        var instance = this, event;
        if (this.isVisible()) {
            return
        }
        event = AJS.$.Event(AJS.InlineLayer.EVENTS.beforeShow);
        this.trigger(event, [this.layer(), this.options.id]);
        JIRA.trigger(event, [this.layer(), this.options.id]);
        if (!event.isDefaultPrevented()) {
            if (!this.isInitialized()) {
                this._lazyInit(function() {
                    instance._show()
                })
            } else {
                if (this.contentRetriever.cache() === false) {
                    this.refreshContent(function() {
                        instance._show()
                    })
                } else {
                    instance._show()
                }
            }
        }
    },
    toggle: function(shouldShow) {
        if (shouldShow == null) {
            shouldShow = !this.isVisible()
        }
        if (shouldShow) {
            this.show()
        } else {
            this.hide(AJS.HIDE_REASON.toggle)
        }
    },
    setPosition: function() {
        var positioning, $window = AJS.$(window);
        if (!this.isInitialized() || !this.offsetTarget() || this.offsetTarget().length === 0) {
            return
        }
        var offsetTargetLeft = this.offsetTarget().offset().left;
        var layerWidth = this.layer().width();
        var hasSpaceOnRight = offsetTargetLeft + layerWidth < $window.width() + $window.scrollLeft();
        var hasSpaceOnLeft = offsetTargetLeft + this.offsetTarget().outerWidth() - layerWidth > $window.scrollLeft();
        if (this.options.alignment() === AJS.RIGHT) {
            if (hasSpaceOnLeft || !hasSpaceOnRight) {
                positioning = this.right()
            } else {
                positioning = this.left()
            }
        } else {
            if (this.options.alignment() === AJS.LEFT) {
                if (hasSpaceOnRight || !hasSpaceOnLeft) {
                    positioning = this.left()
                } else {
                    positioning = this.right()
                }
            } else {
                if (this.options.alignment() === AJS.INTELLIGENT_GUESS) {
                    if ((offsetTargetLeft + (this.offsetTarget().width() / 2)) > $window.width() / 2) {
                        positioning = this.right()
                    } else {
                        positioning = this.left()
                    }
                }
            }
        }
        this.trigger("setLayerPosition", positioning);
        if (this.options.properties.setMaxHeightToWindow || (this.options.properties.setMaxHeightToWindow !== false && AJS.$(".aui-blanket").is(":visible"))) {
            var scrollLeft = $window.scrollLeft();
            if (scrollLeft > 0) {
                positioning.left -= scrollLeft
            }
            positioning.maxHeight = $window.height() - positioning.top + $window.scrollTop() - this.options.cushion()
        }
        positioning.minHeight = this.options.properties.minHeight;
        this.layer().css(positioning)
    },
    setOverflowAndHeight: function() {
        if (this.options.properties.maxInlineResultsDisplayed) {
            this.layer().addClass("limited")
        }
    },
    setWidth: function(width) {
        this.layer().width(width)
    },
    _lazyInit: function(callback) {
        if (this.initializing) {
            return
        }
        this.initializing = true;
        this.refreshContent(function() {
            var instance = this;
            this.initializing = false;
            this.initialized = true;
            this.layer().insertAfter(this.offsetTarget());
            if (this._supportsBoxShadow()) {
                this.layer().addClass(AJS.BOX_SHADOW_CLASS)
            }
            this.$placeholder = AJS.$("<div class='ajs-layer-placeholder' />").insertAfter(this.offsetTarget());
            this.$scrollableContainer = this.offsetTarget().closest(this.options.hideOnScroll());
            this.rebuilt(function(layer) {
                instance.layer(layer)
            });
            callback()
        })
    },
    _show: function() {
        if (AJS.InlineLayer.current) {
            AJS.InlineLayer.current.hide()
        }
        this.visible = true;
        this.content().show();
        this.appendToBody();
        this.layer().addClass(AJS.ACTIVE_CLASS);
        this.offsetTarget().addClass(AJS.ACTIVE_CLASS);
        this.layer().show();
        this.setWidth(this.options.width());
        this.setPosition();
        this.setOverflowAndHeight();
        this._bindEvents();
        if (!AJS.dim.dim) {
            this.scrollTo()
        }
        AJS.InlineLayer.current = this;
        this.trigger("showLayer", [this]);
        AJS.$(document).trigger("showLayer", [this.CLASS_SIGNATURE, this]);
        this.trigger(AJS.InlineLayer.EVENTS.show, [this.layer(), this.options.id]);
        JIRA.trigger(AJS.InlineLayer.EVENTS.show, [this.layer(), this.options.id])
    },
    _hideLoading: function() {
        this.$layer.removeClass(AJS.LOADING_CLASS);
        this.offsetTarget().removeClass(AJS.LOADING_CLASS)
    },
    _showLoading: function() {
        this.$layer.addClass(AJS.LOADING_CLASS);
        this.offsetTarget().addClass(AJS.LOADING_CLASS)
    },
    _unbindEvents: function() {
        this.$scrollableContainer.unbind(this.SCROLL_HIDE_EVENT);
        this._unassignEvents("container", document);
        this._unassignEvents("win", window)
    },
    _bindEvents: function() {
        var instance = this;
        this.$scrollableContainer.one(this.SCROLL_HIDE_EVENT, function() {
            instance.hide()
        });
        this._assignEvents("container", document);
        this._assignEvents("win", window)
    },
    _validateClickToClose: function(e) {
        if (e.target === this.offsetTarget()[0]) {
            return false
        } else {
            if (e.target === this.layer()[0]) {
                return false
            } else {
                if (this.offsetTarget().has(e.target).length > 0) {
                    return false
                } else {
                    if (this.layer().has(e.target).length > 0) {
                        return false
                    }
                }
            }
        }
        return true
    },
    "keys": {
        Esc: function(e) {
            this.hide(AJS.HIDE_REASON.escPressed, e)
        }
    },
    _events: {
        container: {
            "aui:keydown": function(event) {
                this._handleKeyEvent(event)
            },
            click: function(e) {
                if (this._validateClickToClose(e)) {
                    this.hide(AJS.HIDE_REASON.clickOutside, e)
                }
            }
        },
        win: {
            resize: function() {
                this.setPosition()
            },
            scroll: function() {
                this.setPosition()
            }
        }
    },
    _renders: {
        layer: function() {
            return AJS.$("<div />").addClass("ajs-layer " + (this.options.styleClass() || ""))
        }
    }
});
AJS.InlineLayer.EVENTS = {
    beforeHide: "InlineLayer.beforeHide",
    hide: "InlineLayer.hide",
    beforeShow: "InlineLayer.beforeShow",
    show: "InlineLayer.show"
};
JIRA.bind(AJS.InlineLayer.EVENTS.beforeHide, function(e) {
    if (typeof Calendar !== "undefined" && Calendar.current) {
        e.preventDefault()
    }
});
AJS.InlineLayer.OptionsDescriptor = AJS.Descriptor.extend({
    init: function(properties) {
        this._super(properties);
        if (!this.contentRetriever()) {
            if (this.ajaxOptions()) {
                this.contentRetriever(new AJS.AjaxContentRetriever(this.ajaxOptions()))
            } else {
                if (AJS.$.isFunction(this.content())) {
                    this.contentRetriever(new AJS.DeferredContentRetriever(this.content()))
                } else {
                    if (this.content()) {
                        this.contentRetriever(new AJS.DOMContentRetriever(this.content()))
                    } else {
                        throw new Error("AJS.InlineLayer.OptionsDescriptor: Expected either [ajaxOptions] or [contentRetriever] or [content] to be defined")
                    }
                }
            }
        }
        if (!this.positioningController()) {
            if (!AJS.params.ignoreFrame && this._inIFrame()) {
                this.positioningController(new AJS.InlineLayer.IframePositioning())
            } else {
                this.positioningController(new AJS.InlineLayer.StandardPositioning())
            }
        }
        if (AJS.$.browser.msie && AJS.$.browser.version < 9 && this.positioningController().isOffsetIncludingScroll) {
            this.positioningController().isOffsetIncludingScroll(false)
        }
        if (!this.offsetTarget() && this.content()instanceof AJS.$) {
            this.offsetTarget(this.content().prev())
        }
    },
    _inIFrame: function() {
        var parentWindow = window;
        try {
            while (parentWindow.parent.window !== parentWindow.window) {
                parentWindow = parentWindow.parent;
                if (parentWindow.AJS) {
                    return true
                }
            }
        } catch (error) {}
        return false
    },
    _getDefaultOptions: function() {
        return {
            alignment: AJS.INTELLIGENT_GUESS,
            hideOnScroll: ".form-body",
            cushion: 20,
            width: 200
        }
    },
    positioningController: function(positioningController) {
        if (positioningController) {
            this.properties.positioningController = positioningController
        } else {
            return this.properties.positioningController
        }
    },
    ajaxOptions: function(ajaxOptions) {
        if (ajaxOptions) {
            this.properties.ajaxOptions = ajaxOptions
        } else {
            return this.properties.ajaxOptions
        }
    },
    content: function(content) {
        if (content) {
            content = AJS.$(content);
            if (content.length) {
                this.properties.content = content
            }
        } else {
            if (this.properties.content && (this.properties.content.length || AJS.$.isFunction(this.properties.content))) {
                return this.properties.content
            }
        }
    },
    contentRetriever: function(contentRetriever) {
        if (contentRetriever) {
            this.properties.contentRetriever = contentRetriever
        } else {
            return this.properties.contentRetriever
        }
    },
    offsetTarget: function(offsetTarget) {
        if (offsetTarget) {
            offsetTarget = AJS.$(offsetTarget);
            if (offsetTarget.length) {
                this.properties.offsetTarget = offsetTarget
            }
        } else {
            if (this.properties.offsetTarget && (this.properties.offsetTarget.length || AJS.$.isFunction(this.properties.offsetTarget))) {
                return this.properties.offsetTarget
            }
        }
    },
    cushion: function(cushion) {
        if (cushion) {
            this.properties.cushion = cushion
        } else {
            return this.properties.cushion
        }
    },
    styleClass: function(styleClass) {
        if (styleClass) {
            this.properties.styleClass = styleClass
        } else {
            return this.properties.styleClass
        }
    },
    hideOnScroll: function(hideOnScroll) {
        if (hideOnScroll) {
            this.properties.hideOnScroll = hideOnScroll
        } else {
            return this.properties.hideOnScroll
        }
    },
    alignment: function(alignment) {
        if (alignment) {
            this.properties.alignment = alignment
        } else {
            return this.properties.alignment
        }
    },
    width: function(width) {
        if (width) {
            this.properties.width = width
        } else {
            if (AJS.$.isFunction(this.properties.width)) {
                return this.properties.width.call(this)
            } else {
                return this.properties.width
            }
        }
    },
    allowDownsize: function(allowDownsize) {
        if (allowDownsize) {
            this.properties.allowDownsize = allowDownsize
        } else {
            return this.properties.allowDownsize
        }
    }
});
AJS.InlineLayer.create = function(options) {
    var inlineLayers = [];
    if (options.content) {
        options.content = AJS.$(options.content);
        AJS.$.each(options.content, function() {
            var instanceOptions = AJS.copyObject(options);
            instanceOptions.content = AJS.$(this);
            inlineLayers.push(new AJS.InlineLayer(instanceOptions))
        })
    }
    if (inlineLayers.length == 1) {
        return inlineLayers[0]
    } else {
        return inlineLayers
    }
}
;
AJS.InlineLayer.StandardPositioning = Class.extend({
    init: function() {
        this.rebuiltCallbacks = []
    },
    left: function() {
        var offset = this.offset();
        return {
            left: offset.left,
            top: offset.top + this.offsetTarget().outerHeight()
        }
    },
    right: function() {
        var offset = this.offset();
        return {
            left: offset.left - this.layer().outerWidth() + this.offsetTarget().outerWidth(),
            top: offset.top + this.offsetTarget().outerHeight()
        }
    },
    window: function() {
        return window
    },
    offset: function() {
        var offset = this.offsetTarget().offset();
        if (this.offsetTarget().hasFixedParent()) {
            this.layer().css("position", "fixed");
            offset.top = offset.top - AJS.$(window).scrollTop()
        } else {
            this.layer().css("position", "absolute")
        }
        return offset
    },
    rebuilt: function(arg) {
        var instance = this;
        if (AJS.$.isFunction(arg)) {
            this.rebuiltCallbacks.push(arg)
        } else {
            AJS.$.each(this.rebuiltCallbacks, function() {
                this(instance.layer())
            })
        }
    },
    appendToBody: function() {
        this.layer().appendTo("body")
    },
    appendToPlaceholder: function() {
        this.layer().appendTo(this.$placeholder)
    },
    scrollTo: function() {}
});
AJS.InlineLayer.IframePositioning = AJS.InlineLayer.StandardPositioning.extend({
    offset: function() {
        var offsetInDocument = this._super()
          , iframeOffset = AJS.$("iframe[name=" + window.name + "]", window.top.document.body).parent().offset()
          , topDocumentScrollTop = this._topDocumentScrollTop()
          , topDocumentScrollLeft = this._topDocumentScrollLeft()
          , iframeScrollTop = this._iframeScrollTop()
          , iframeScrollLeft = this._iframeScrollLeft()
          , scrollTopModifier = topDocumentScrollTop - iframeScrollTop
          , scrollLeftModifier = topDocumentScrollLeft - iframeScrollLeft;
        return {
            left: iframeOffset.left + offsetInDocument.left + scrollLeftModifier,
            top: iframeOffset.top + offsetInDocument.top + scrollTopModifier
        }
    },
    _topDocumentScrollTop: function() {
        return this.isOffsetIncludingScroll() ? 0 : Math.max(window.top.document.body.scrollTop, window.top.document.documentElement.scrollTop)
    },
    _topDocumentScrollLeft: function() {
        return this.isOffsetIncludingScroll() ? 0 : Math.max(window.top.document.body.scrollLeft, window.top.document.documentElement.scrollLeft)
    },
    _iframeScrollTop: function() {
        return this.isOffsetIncludingScroll() ? 2 * Math.max(window.document.body.scrollTop, window.document.documentElement.scrollTop) : 0
    },
    _iframeScrollLeft: function() {
        return this.isOffsetIncludingScroll() ? 2 * Math.max(window.document.body.scrollLeft, window.document.documentElement.scrollLeft) : 0
    },
    isOffsetIncludingScroll: function(offsetIncludingScroll) {
        if (typeof this.offsetIncludingScroll === "undefined") {
            this.offsetIncludingScroll = true
        }
        if (typeof offsetIncludingScroll !== "undefined") {
            this.offsetIncludingScroll = offsetIncludingScroll
        }
        return this.offsetIncludingScroll
    },
    appendToBody: function() {
        window.top.jQuery("body").append(this.layer())
    },
    window: function() {
        return window.top
    },
    scrollTo: function() {}
});
if (AJS.$.browser.safari || (AJS.$.browser.msie && AJS.$.browser.version < 8)) {
    AJS.InlineLayer.IframePositioning = AJS.InlineLayer.IframePositioning.extend({
        appendToBody: function() {
            this.layer(this._rebuildLayerInParent());
            window.top.jQuery("body").append(this.layer());
            this.rebuilt()
        },
        appendToPlaceholder: function() {
            this.layer(this._rebuildLayerInIframe());
            this.layer().appendTo(this.placeholder());
            this.rebuilt()
        },
        _rebuildLayerInParent: function() {
            return window.top.jQuery("<div class='ajs-layer'>" + this.layer().html() + "</div>")
        },
        _rebuildLayerInIframe: function() {
            return AJS.$("<div class='ajs-layer'>" + this.placeholder().html() + "</div>")
        }
    })
}
if (AJS.$.browser.mozilla) {
    AJS.InlineLayer.IframePositioning = AJS.InlineLayer.IframePositioning.extend({
        appendToPlaceholder: function() {
            var $oldLayer = this.layer();
            this.layer($oldLayer.clone(true).appendTo(this.placeholder()));
            this.rebuilt();
            window.setTimeout(function() {
                $oldLayer.remove()
            }, 10)
        }
    })
}
;AJS.Group = AJS.Control.extend({
    init: function() {
        this.items = [];
        this.index = -1;
        this._assignEvents("instance", this)
    },
    addItem: function(item) {
        this.items.push(item);
        this._assignEvents("item", item)
    },
    _removeItem: function(item) {
        var index = AJS.$.inArray(item, this.items);
        if (index < 0) {
            throw new Error("AJS.Group: item [" + item + "] is not a member of this group")
        }
        item.trigger("blur");
        if (index < this.index) {
            this.index--
        }
        this.items.splice(index, 1);
        this._unassignEvents("item", item)
    },
    removeItem: function(item) {
        item.trigger("remove")
    },
    removeAllItems: function() {
        while (this.items.length) {
            this.items[0].trigger("remove")
        }
    },
    shiftFocus: function(offset) {
        if (this.index === -1 && offset === 1) {
            offset = 0
        }
        if (this.items.length > 0) {
            var i = (Math.max(0, this.index) + this.items.length + offset) % this.items.length;
            this.items[i].trigger("focus")
        }
    },
    prepareForInput: function() {
        this._assignEvents("keys", document)
    },
    _events: {
        "instance": {
            "focus": function() {
                if (this.items.length === 0) {
                    return
                }
                if (this.index < 0) {
                    this.items[0].trigger("focus")
                } else {
                    this._assignEvents("keys", document)
                }
            },
            "blur": function() {
                if (this.index >= 0) {
                    this.items[this.index].trigger("blur")
                } else {
                    this._unassignEvents("keys", document)
                }
            }
        },
        "keys": {
            "aui:keydown": function(event) {
                this._handleKeyEvent(event)
            }
        },
        "item": {
            "focus": function(event) {
                var index = this.index;
                this.index = AJS.$.inArray(event.target, this.items);
                if (index < 0) {
                    this.trigger("focus")
                } else {
                    if (index !== this.index) {
                        this.items[index].trigger("blur")
                    }
                }
            },
            "blur": function(event) {
                if (this.index === AJS.$.inArray(event.target, this.items)) {
                    this.index = -1;
                    this.trigger("blur")
                }
            },
            "remove": function(event) {
                this._removeItem(event.target)
            }
        }
    },
    keys: {}
});
AJS.ItemDescriptor = AJS.Descriptor.extend({
    init: function(options) {
        if (options && typeof options.meta === "object") {
            options.meta = JSON.stringify(options.meta)
        }
        this._super(options)
    },
    REQUIRED_PROPERTIES: {
        label: true
    },
    _getDefaultOptions: function() {
        return {
            showLabel: true
        }
    },
    styleClass: function() {
        return this.properties.styleClass
    },
    meta: function() {
        if (this.properties.meta) {
            return JSON.parse(this.properties.meta)
        }
    },
    value: function() {
        return this.properties.value
    },
    invalid: function() {
        return this.properties.invalid
    },
    labelSuffix: function(value) {
        if (typeof value !== "undefined") {
            this.properties.labelSuffix = value
        }
        return this.properties.labelSuffix
    },
    title: function() {
        return this.properties.title
    },
    label: function() {
        return this.properties.label
    },
    disabled: function(disabled) {
        if (disabled) {
            this.properties.disabled = disabled
        } else {
            return this.properties.disabled
        }
    },
    allowDuplicate: function() {
        return this.properties.allowDuplicate
    },
    removeOnUnSelect: function(value) {
        if (typeof value !== "undefined") {
            this.properties.removeOnUnSelect = value
        }
        return this.properties.removeOnUnSelect
    },
    icon: function() {
        return this.properties.icon
    },
    selected: function(value) {
        if (typeof value !== "undefined") {
            this.properties.selected = value
        }
        return this.properties.selected
    },
    model: function($model) {
        if ($model) {
            this.properties.model = $model
        } else {
            return this.properties.model
        }
    },
    keywords: function() {
        return this.properties.keywords
    },
    href: function() {
        return this.properties.href
    },
    highlighted: function(value) {
        if (value === false) {
            if (this.properties.html) {
                this.properties.label = jQuery("<div>" + this.properties.html + "</div>").text();
                this.properties.html = null
            }
            this.properties.highlighted = false
        }
        return this.properties.highlighted && this.properties.html
    },
    html: function() {
        return this.properties.html
    },
    fieldText: function() {
        return this.properties.fieldText
    },
    noExactMatch: function() {
        return this.properties.noExactMatch
    }
});
AJS.GroupDescriptor = AJS.Descriptor.extend({
    _getDefaultOptions: function() {
        return {
            showLabel: true,
            label: "",
            items: []
        }
    },
    placement: function() {
        return this.properties.placement
    },
    styleClass: function() {
        return this.properties.styleClass
    },
    weight: function() {
        return this.properties.weight
    },
    label: function() {
        return this.properties.label
    },
    footerText: function(footerText) {
        if (footerText) {
            this.properties.footerText = footerText
        } else {
            return this.properties.footerText
        }
    },
    footerHtml: function(footerHtml) {
        if (footerHtml) {
            this.properties.footerHtml = footerHtml
        } else {
            return this.properties.footerHtml
        }
    },
    actionBarHtml: function(actionBarHtml) {
        if (actionBarHtml) {
            this.properties.actionBarHtml = actionBarHtml
        }
        return this.properties.actionBarHtml
    },
    showLabel: function() {
        return this.properties.showLabel
    },
    items: function(items) {
        if (items) {
            this.properties.items = items;
            return this
        } else {
            return this.properties.items
        }
    },
    addItem: function(item) {
        this.properties.items.push(item);
        return this
    },
    id: function() {
        return this.properties.id
    },
    setModel: function($model) {
        this.properties.model = $model
    },
    replace: function() {
        return this.properties.replace
    },
    uniqueItemScope: function() {
        return this.properties.uniqueItemScope
    },
    description: function() {
        return this.properties.description
    },
    model: function($model) {
        if ($model) {
            this.properties.model = $model
        } else {
            return this.properties.model
        }
    }
});
AJS.List = AJS.Control.extend({
    init: function(options) {
        options = options || {};
        if (options) {
            this.options = AJS.$.extend(true, this._getDefaultOptions(options), options)
        } else {
            this.options = this._getDefaultOptions(options)
        }
        this._renders = jQuery.extend({}, this._renders, this.options.renderers);
        this.disabled = true;
        this.reset();
        var instance = this;
        if (this.options.selectionHandler) {
            this.$container.delegate(this.options.itemSelector, this.options.selectionEvent, function(e) {
                instance.options.selectionHandler.call(instance, e)
            })
        }
        this.motionDetector.wait();
        this.$container.delegate(this.options.itemSelector, "mousemove", function() {
            if (!instance.disabled && (instance.motionDetector.moved || AJS.isSelenium())) {
                instance.index = AJS.$.inArray(this, instance.$visibleItems);
                instance.focus(true)
            }
        })
    },
    _getDefaultOptions: function() {
        return {
            selectionEvent: "click",
            delegateTarget: document,
            matchingStrategy: "(^|.*?(\\s+|\\())({0})(.*)",
            itemSelector: "li.aui-list-item",
            hasLinks: true,
            stallEventBind: true
        }
    },
    index: 0,
    moveToFirst: function() {
        if (this.$visibleItems.length > 0) {
            this.index = 0;
            this.focus()
        }
    },
    moveToNext: function() {
        if (this.index < this.maxIndex) {
            ++this.index;
            this.focus()
        } else {
            if (this.$visibleItems.length > 1) {
                this.index = 0;
                this.focus()
            }
        }
    },
    container: function(container) {
        if (container) {
            this.$container = AJS.$(container);
            this.containerSelector = container
        } else {
            return this.$container
        }
    },
    getItemsByDescriptor: function(descriptorToMatch) {
        var $matches = AJS.$();
        this.$container.find(this.options.itemSelector).each(function() {
            var descriptor = AJS.$.data(this, "descriptor");
            if (descriptor && descriptor.value() === descriptorToMatch.value()) {
                $matches = $matches.add(this)
            }
        });
        return $matches
    },
    scrollContainer: function() {
        return (this.options.scrollContainer) ? this.$container.find(this.options.scrollContainer) : this.$container.parent()
    },
    _isScrollConstrained: function() {
        var scrollContainer = this.scrollContainer()[0];
        return scrollContainer.clientHeight < scrollContainer.scrollHeight
    },
    moveToPrevious: function() {
        if (this.index > 0) {
            --this.index;
            this.focus()
        } else {
            if (this.$visibleItems.length > 0) {
                this.index = this.$visibleItems.length - 1;
                this.focus()
            }
        }
    },
    scrollActiveItemIntoView: function() {
        var $activeItem = this.$visibleItems.filter(".active");
        var $scrollContainer = this.scrollContainer();
        var scrollTop = $scrollContainer.scrollTop();
        if ($activeItem.length === 0) {
            return
        }
        if (!this._isScrollConstrained()) {
            $activeItem.scrollIntoView({
                callback: AJS.$.proxy(this.motionDetector, "wait")
            });
            return
        }
        if ($activeItem.closest($scrollContainer).length === 0) {
            return
        }
        if ($activeItem.is($scrollContainer.find(this.items).first())) {
            this._scrollContainerTo(0);
            return
        }
        var roomAbove = $activeItem.offset().top - $scrollContainer.offset().top;
        var roomBelow = $scrollContainer.outerHeight() - $activeItem.outerHeight() - roomAbove;
        if (roomAbove >= 0) {
            if (roomBelow < 0) {
                this._scrollContainerTo(scrollTop - roomBelow)
            }
        } else {
            this._scrollContainerTo(scrollTop + roomAbove)
        }
    },
    _scrollContainerTo: function(scrollTop) {
        var $scrollContainer = this.scrollContainer();
        if ($scrollContainer.scrollTop() !== scrollTop) {
            this.motionDetector.unbind();
            this.motionDetector.wait();
            $scrollContainer.scrollTop(scrollTop)
        }
    },
    focus: function(noScroll) {
        this.$visibleItems.removeClass("active");
        var $target = this.$visibleItems.eq(this.index);
        $target.addClass("active");
        this.lastFocusedItemDescriptor = $target.data("descriptor");
        if (!noScroll) {
            this.scrollActiveItemIntoView()
        }
    },
    motionDetector: new JIRA.Mouse.MotionDetector(),
    disable: function() {
        if (this.disabled) {
            return
        }
        this._unassignEvents("delegateTarget", this.options.delegateTarget);
        this.disabled = true;
        this.lastFocusedItemDescriptor = null
    },
    enable: function() {
        var instance = this;
        if (!instance.disabled) {
            return
        }
        if (this.options.stallEventBind) {
            window.setTimeout(function() {
                instance._assignEvents("delegateTarget", instance.options.delegateTarget)
            }, 0)
        } else {
            instance._assignEvents("delegateTarget", instance.options.delegateTarget)
        }
        instance.disabled = false;
        this._scrollContainerTo(0)
    },
    getFocused: function() {
        return this.$visibleItems.filter(".active")
    },
    reset: function(index) {
        this.$container = AJS.$(this.options.containerSelector);
        this.items = AJS.$(this.options.itemSelector, this.$container).not(".no-suggestions");
        this.$visibleItems = this.items.not(".hidden, .disabled");
        this.groups = AJS.$(this.options.groupSelector, this.$container);
        this.maxIndex = this.$visibleItems.length - 1;
        this.index = this.$visibleItems[index] ? index : 0;
        this.focus(true)
    },
    selectValue: function(value) {
        var matchedItem = this.$container.find(this.options.itemSelector).filter(function() {
            return AJS.$(this).parent().data("descriptor").value() == value
        });
        if (!matchedItem.length) {
            AJS.log("WARN: No List item found with Decriptor value '" + value + "'")
        }
        matchedItem.click()
    },
    _getLinkFromItem: function(item) {
        var link;
        item = AJS.$(item);
        if (item.is("a")) {
            link = item
        } else {
            link = item.find("a")
        }
        return link
    },
    _makeResultDiv: function(data, query) {
        var $fixedContainer = AJS.$('<div class="aui-list-fixed">')
          , $resultsContainer = AJS.$('<div class="aui-list-scroll" tabindex="-1">')
          , instance = this
          , ungrouped = [];
        function appendUngrouped() {
            if (ungrouped.length > 0) {
                $resultsContainer.append(instance._generateUngroupedOptions(ungrouped, query));
                ungrouped = []
            }
        }
        AJS.$.each(data, function(i, descriptor) {
            var $container, $optgroup;
            if (descriptor instanceof AJS.GroupDescriptor) {
                appendUngrouped();
                $container = (descriptor.placement() === "fixed") ? $fixedContainer : $resultsContainer;
                $optgroup = instance._generateOptGroup(descriptor, query);
                $container.append($optgroup)
            } else {
                if (descriptor instanceof AJS.ItemDescriptor) {
                    ungrouped.push(descriptor)
                }
            }
        });
        appendUngrouped();
        if ($fixedContainer.children().length === 0) {
            return $resultsContainer
        }
        return $fixedContainer.add($resultsContainer)
    },
    _addResultToContainer: function($result) {
        if ($result.not(".aui-list-fixed").find(this.options.itemSelector).length === 0) {
            var $scrollContainer = this.$container.find(".aui-list-scroll");
            if ($scrollContainer.length == 0) {
                $scrollContainer = AJS.$('<div class="aui-list-scroll" tabindex="-1">').appendTo(this.$container)
            }
            $scrollContainer.html(this._render("noSuggestion"))
        } else {
            $result.find("ul:last").addClass("aui-last");
            this.$container.html($result)
        }
    },
    generateListFromJSON: function(data, query) {
        var $listItems;
        this.suggestions = 0;
        this.exactMatchIndex = -1;
        this.lastFocusedIndex = -1;
        this.lastQuery = query;
        var $result = this._makeResultDiv(data, query);
        this._addResultToContainer($result, query);
        this.$container.hide();
        if (this.options.hasLinks) {
            $listItems = AJS.$(this.options.itemSelector + " > a", this.$container)
        } else {
            $listItems = AJS.$(this.options.itemSelector, this.$container)
        }
        var instance = this;
        $listItems.each(function() {
            var elem = AJS.$(this);
            elem.attr("title", elem.text())
        });
        this.$container.show();
        var indexToHighlight = this.exactMatchIndex >= 0 ? this.exactMatchIndex : this.lastFocusedIndex;
        this.reset(indexToHighlight)
    },
    _generateOption: function(item, query, labelRegex) {
        var replacementText;
        if (!item.highlighted() && labelRegex && labelRegex.test(item.label())) {
            replacementText = item.label().replace(labelRegex, function(_, prefix, spaceOrParenthesis, match, suffix) {
                var div = AJS.$("<div>");
                prefix && div.append(AJS.$("<span>").text(prefix));
                div.append(AJS.$("<em>").text(match));
                suffix && div.append(AJS.$("<span>").text(suffix));
                return div.html()
            })
        }
        if (this.exactMatchIndex < 0) {
            var itemValue = AJS.$.trim(item.label()).toLowerCase();
            if (!item.noExactMatch() && itemValue === AJS.$.trim(query).toLowerCase()) {
                this.exactMatchIndex = this.suggestions
            } else {
                if (this.lastFocusedIndex < 0 && this.lastFocusedItemDescriptor && itemValue === AJS.$.trim(this.lastFocusedItemDescriptor.label()).toLowerCase()) {
                    this.lastFocusedIndex = this.suggestions
                }
            }
        }
        this.suggestions++;
        return this._render("suggestion", item, replacementText)
    },
    _filterOptions: function(options, regexEscapedQuery, labelRegex) {
        if (!regexEscapedQuery) {
            return options
        }
        var filtered = []
          , keywordsRegex = new RegExp(AJS.format(".*{0}.*", regexEscapedQuery),"i");
        for (var i = 0, len = options.length; i < len; i++) {
            var item = options[i];
            if (item.highlighted()) {
                filtered.push(item)
            } else {
                if (labelRegex.test(item.label())) {
                    filtered.push(item)
                } else {
                    if (item.keywords()) {
                        var matchedKeywords = [];
                        var keywordString = "" + item.keywords()
                          , keywords = keywordString.split(",");
                        for (var j = 0; j < keywords.length; j++) {
                            var keyword = keywords[j];
                            if (keywordsRegex.test(keyword)) {
                                matchedKeywords.push(keyword)
                            }
                        }
                        if (matchedKeywords.length) {
                            item.labelSuffix(" " + matchedKeywords.join(", "));
                            filtered.push(item)
                        }
                    }
                }
            }
        }
        return filtered
    },
    _addOptionsToContainer: function(options, $container, query, labelRegex) {
        var instance = this
          , maxInlineResultsDisplayed = this.options.maxInlineResultsDisplayed
          , hasSuggestion = false;
        for (var i = 0, len = options.length; i < len; i++) {
            var option = options[i];
            if (!maxInlineResultsDisplayed || i < maxInlineResultsDisplayed || !query) {
                var $suggestion = instance._generateOption(option, query, labelRegex);
                if ($suggestion) {
                    hasSuggestion = true;
                    $container.append($suggestion)
                }
            } else {
                $container.append(instance._render("tooManySuggestions", options.length - i));
                break
            }
        }
        return hasSuggestion
    },
    _filterAndAddOptions: function(options, container, query) {
        var regexEscapedQuery, labelRegex;
        if (query) {
            regexEscapedQuery = RegExp.escape(query);
            labelRegex = new RegExp(AJS.format(this.options.matchingStrategy, regexEscapedQuery),"i");
            options = this._filterOptions(options, regexEscapedQuery, labelRegex)
        }
        return this._addOptionsToContainer(options, container, query, labelRegex)
    },
    _generateUngroupedOptions: function(options, query) {
        var $container = this._render("ungroupedSuggestions");
        var optionsAdded = this._filterAndAddOptions(options, $container, query);
        if (optionsAdded) {
            return $container
        }
    },
    _generateOptGroup: function(groupDescriptor, query) {
        var res = AJS.$(), optContainer = this._render("suggestionGroup", groupDescriptor), options = groupDescriptor.items(), optionsAdded;
        optionsAdded = this._filterAndAddOptions(options, optContainer, query);
        if (!optionsAdded) {
            return
        }
        if (groupDescriptor.label() && groupDescriptor.showLabel() !== false) {
            res = res.add(this._render("suggestionGroupHeading", groupDescriptor))
        }
        if (groupDescriptor.footerText()) {
            optContainer.append(this._render("suggestionsGroupFooter", groupDescriptor.footerText()))
        } else {
            if (groupDescriptor.footerHtml()) {
                optContainer.append(groupDescriptor.footerHtml())
            }
        }
        if (groupDescriptor.actionBarHtml()) {
            optContainer.prepend(groupDescriptor.actionBarHtml())
        }
        res = res.add(optContainer);
        return res
    },
    _events: {
        delegateTarget: {
            "aui:keydown": function(event) {
                this._handleKeyEvent(event)
            }
        }
    },
    _renders: {
        suggestion: function(descriptor, replacementText) {
            var idSuffix = descriptor.fieldText() || descriptor.label();
            var itemId = AJS.escapeHTML(AJS.$.trim(idSuffix.toLowerCase()).replace(/[\s\.]+/g, "-"))
              , listElem = AJS.$('<li class="aui-list-item aui-list-item-li-' + itemId + '">')
              , linkElem = AJS.$("<a />").addClass("aui-list-item-link");
            if (descriptor.selected()) {
                listElem.addClass("aui-checked")
            }
            linkElem.attr("href", descriptor.href() || "#");
            if (descriptor.icon() && descriptor.icon() !== "none") {
                linkElem.addClass("aui-iconised-link").css({
                    backgroundImage: "url(" + descriptor.icon() + ")"
                })
            }
            if (descriptor.styleClass()) {
                linkElem.addClass(descriptor.styleClass())
            }
            if (replacementText) {
                linkElem.html(replacementText)
            } else {
                if (descriptor.html()) {
                    linkElem.html(descriptor.html())
                } else {
                    linkElem.text(descriptor.label())
                }
            }
            if (descriptor.labelSuffix()) {
                var suffixSpan = AJS.$("<span class='aui-item-suffix' />").text(descriptor.labelSuffix());
                linkElem.append(suffixSpan)
            }
            listElem.append(linkElem).data("descriptor", descriptor);
            return listElem
        },
        noSuggestion: function() {
            return AJS.$("<li class='no-suggestions'>" + "No Matches" + "</li>")
        },
        tooManySuggestions: function(suggestionCount) {
            return AJS.$("<li class='no-suggestions'>" + AJS.format("{0} more options. Continue typing to refine further.", suggestionCount) + "</li>")
        },
        ungroupedSuggestions: function() {
            return AJS.$("<ul>")
        },
        suggestionGroup: function(descriptor) {
            return AJS.$("<ul class='aui-list-section' />").attr("id", descriptor.label().replace(/\s/g, "-").toLowerCase()).addClass(descriptor.styleClass()).data("descriptor", descriptor)
        },
        suggestionGroupHeading: function(descriptor) {
            var elem = AJS.$("<h5 />").text(descriptor.label()).addClass(descriptor.styleClass()).data("descriptor", descriptor);
            if (descriptor.description()) {
                AJS.$("<span class='aui-section-description' />").text(" (" + descriptor.description() + ")").appendTo(elem)
            }
            return elem
        },
        suggestionsGroupFooter: function(text) {
            return AJS.$("<li class='aui-list-section-footer' />").text(text)
        }
    },
    _acceptSuggestion: function(item) {
        if (!item instanceof AJS.$) {
            item = AJS.$(item)
        }
        var linkNode = this._getLinkFromItem(item);
        if (linkNode.length) {
            var event = new jQuery.Event("click");
            linkNode.trigger(event, [linkNode]);
            if (!event.isDefaultPrevented()) {
                window.location.href = linkNode.attr("href")
            }
        }
    },
    getAllItems: function() {
        return this.$container.find(this.options.itemSelector)
    },
    _acceptUserInput: function($field) {
        $field.triggerHandler("blur")
    },
    _handleSectionByKeyboard: function(e) {
        var $focusedItem = this.getFocused();
        var $field = AJS.$(e.target);
        if ($focusedItem.length === 0) {
            return
        }
        if (this._latestQuery && AJS.$.trim($field.val()) !== this._latestQuery) {
            var inputWords = $field.val().toLowerCase().match(/\S+/g);
            if (inputWords) {
                var html = this.lastFocusedItemDescriptor && this.lastFocusedItemDescriptor.html();
                var $item = html ? AJS.$("<div>").html(html) : $focusedItem;
                var matches = [];
                $item.find("em,b").each(function() {
                    var $match = AJS.$(this)
                      , nextText = AJS.$($match.attr("nextSibling")).text().toLowerCase().match(/^\S*/)[0];
                    AJS.$.each($match.text().toLowerCase().match(/\S+/g), function(i, match) {
                        matches.push(match + nextText)
                    })
                });
                for (var i = 0; i < inputWords.length; i++) {
                    var word = inputWords[i];
                    var n = word.length;
                    var hasMatch = false;
                    for (var j = 0; j < matches.length; j++) {
                        if (matches[j].slice(0, n) === word) {
                            hasMatch = true;
                            break
                        }
                    }
                    if (!hasMatch) {
                        this._acceptUserInput($field);
                        return
                    }
                }
            }
        }
        this.scrollActiveItemIntoView();
        if (this.options.selectionHandler && !this.options.selectionHandler.call(this, e)) {
            return
        }
        this._acceptSuggestion($focusedItem)
    },
    _isValidInput: function() {
        return !this.disabled && this.$container.is(":visible")
    },
    keys: {
        "Down": function(event) {
            this.moveToNext();
            event.preventDefault()
        },
        "Up": function(event) {
            this.moveToPrevious();
            event.preventDefault()
        },
        "Return": function(event) {
            this._handleSectionByKeyboard(event);
            event.preventDefault()
        }
    }
});
AJS.Dropdown = AJS.Control.extend({
    CLASS_SIGNATURE: "AJS_DROPDOWN",
    init: function(options) {
        var layerProperties, instance = this;
        if (!(options instanceof AJS.Dropdown.OptionsDescriptor)) {
            this.options = new AJS.Dropdown.OptionsDescriptor(options)
        } else {
            this.options = options
        }
        layerProperties = this.options.allProperties();
        if (!layerProperties.offsetTarget) {
            layerProperties.offsetTarget = layerProperties.trigger
        }
        this.layerController = new AJS.InlineLayer(this.options.allProperties());
        this.layerController._validateClickToClose = function(e) {
            if (e.target === this.offsetTarget()[0]) {
                return false
            } else {
                if (e.target === this.layer()[0]) {
                    return false
                } else {
                    if (this.offsetTarget().has(e.target).length > 0) {
                        return false
                    }
                }
            }
            return true
        }
        ;
        this.listController = this.options.listController();
        this.listEnabler = function(e) {
            instance.listController._handleKeyEvent(e)
        }
        ;
        this.layerController.onhide(function() {
            instance.hide()
        });
        this.layerController.contentChange(function() {
            instance.listController.removeAllItems();
            instance.layerController.layer().find("div > ul > li:visible:has(a)").each(function() {
                instance.listController.addItem(new AJS.Dropdown.ListItem({
                    element: this,
                    autoScroll: instance.options.autoScroll()
                }))
            });
            if (instance.options.focusFirstItem()) {
                instance.listController.shiftFocus(0)
            } else {
                instance.listController.prepareForInput()
            }
        });
        this.trigger(this.options.trigger());
        this._applyIdToLayer()
    },
    show: function() {
        var instance = this;
        this.trigger().addClass(AJS.ACTIVE_CLASS);
        jQuery(this).trigger("showLayer");
        this.layerController.show();
        if (this.options.focusFirstItem()) {
            this.listController.shiftFocus(0)
        } else {
            this.listController.prepareForInput()
        }
    },
    hide: function() {
        jQuery(this).trigger("hideLayer");
        this.trigger().removeClass(AJS.ACTIVE_CLASS);
        this.layerController.hide();
        this.listController.trigger("blur")
    },
    toggle: function() {
        if (this.layerController.isVisible()) {
            this.hide()
        } else {
            this.show()
        }
    },
    content: function(content) {
        if (content) {
            this.layerController.content(content)
        } else {
            return this.layerController.content()
        }
    },
    trigger: function(trigger) {
        if (trigger) {
            if (this.options.trigger()) {
                this._unassignEvents("trigger", this.options.trigger())
            }
            this.options.trigger(AJS.$(trigger));
            if (!this.layerController.offsetTarget()) {
                this.layerController.offsetTarget(this.options.trigger())
            }
            this._assignEvents("trigger", this.options.trigger())
        } else {
            return this.options.trigger()
        }
    },
    _applyIdToLayer: function() {
        if (this.trigger().attr("id")) {
            this.layerController.layer().attr("id", this.trigger().attr("id") + "_drop")
        }
    },
    _events: {
        trigger: {
            click: function(e) {
                e.preventDefault();
                this.toggle()
            }
        }
    }
});
AJS.Dropdown.TRIGGER_SELECTOR = ".aui-dropdown-trigger";
AJS.Dropdown.CONTENT_SELECTOR = ".aui-dropdown-content";
AJS.DropDown = AJS.Dropdown;
AJS.Dropdown.create = function(options) {
    var dropdowns = [];
    if (options.content && !options.trigger) {
        options.content = AJS.$(options.content);
        AJS.$.each(options.content, function() {
            var instanceOptions = AJS.copyObject(options);
            instanceOptions.content = AJS.$(this);
            dropdowns.push(new AJS.Dropdown(instanceOptions))
        })
    } else {
        if (!options.content && options.trigger) {
            options.trigger = AJS.$(options.trigger);
            AJS.$.each(options.trigger, function() {
                var instanceOptions = AJS.copyObject(options);
                instanceOptions.trigger = AJS.$(this);
                dropdowns.push(new AJS.Dropdown(instanceOptions))
            })
        } else {
            if (options.content && options.trigger) {
                options.content = AJS.$(options.content);
                options.trigger = AJS.$(options.trigger);
                if (options.content.length === options.trigger.length) {
                    options.trigger.each(function(i) {
                        var instanceOptions = AJS.copyObject(options);
                        instanceOptions.trigger = AJS.$(this);
                        instanceOptions.content = options.content.eq(i);
                        dropdowns.push(new AJS.Dropdown(instanceOptions))
                    })
                } else {
                    throw new Error("AJS.Dropdown.create: Expected the same number of content elements as trigger elements")
                }
            }
        }
    }
    return dropdowns
}
;
AJS.Dropdown.OptionsDescriptor = AJS.Descriptor.extend({
    init: function(properties) {
        this._super(properties);
        if (!this.content() && !this.trigger()) {
            throw new Error("AJS.Dropdown.OptionsDescriptor: expected either [content] or [trigger] to be defined.")
        }
        if (this.trigger() && !this.content()) {
            this.content(this.trigger().next(AJS.Dropdown.CONTENT_SELECTOR))
        } else {
            if (this.content() && !this.trigger()) {
                this.content(this.trigger().next(AJS.Dropdown.TRIGGER_SELECTOR))
            }
        }
        if (this.trigger() && !this.content()) {
            if (!this.ajaxOptions()) {
                if (this.trigger().attr("href")) {
                    this.ajaxOptions(this.trigger().attr("href"))
                }
            } else {
                if (!this.ajaxOptions().url) {
                    this.ajaxOptions().url = this.trigger().attr("href")
                }
            }
            this.contentRetriever(new AJS.AjaxContentRetriever(this.ajaxOptions()))
        } else {
            if (this.content()) {
                if (AJS.$.isFunction(this.content())) {
                    this.contentRetriever(new AJS.DeferredContentRetriever(this.content()))
                } else {
                    this.contentRetriever(new AJS.DOMContentRetriever(this.content()))
                }
            }
        }
        if (!this.listController()) {
            this.listController(new AJS.Dropdown.ListItemGroup())
        }
    },
    _getDefaultOptions: function() {
        return {
            trigger: null,
            ajaxOptions: null,
            autoScroll: true
        }
    },
    content: function(content) {
        if (content) {
            content = AJS.$(content);
            if (content.length) {
                this.properties.content = content
            }
        } else {
            return this.properties.content
        }
    },
    trigger: function(trigger) {
        if (trigger) {
            this.properties.trigger = trigger
        } else {
            return this.properties.trigger
        }
    },
    contentRetriever: function(contentRetriever) {
        if (contentRetriever) {
            this.properties.contentRetriever = contentRetriever
        } else {
            return this.properties.contentRetriever
        }
    },
    listController: function(listController) {
        if (listController) {
            this.properties.listController = listController
        } else {
            return this.properties.listController
        }
    },
    focusFirstItem: function(focusFirstItem) {
        if (focusFirstItem) {
            this.properties.focusFirstItem = focusFirstItem
        } else {
            return this.properties.focusFirstItem
        }
    },
    autoScroll: function(autoScroll) {
        if (typeof autoScroll !== "undefined") {
            this.properties.autoScroll = !!autoScroll
        }
        return this.properties.autoScroll
    },
    ajaxOptions: function(ajaxOptions) {
        if (ajaxOptions) {
            this.properties.ajaxOptions = ajaxOptions
        } else {
            return this.properties.ajaxOptions
        }
    },
    loop: function(loop) {
        if (typeof loop !== "undefined") {
            this.properties.loop = loop
        } else {
            return this.properties.loop
        }
    },
    alignment: function(alignment) {
        if (alignment) {
            this.properties.alignment = alignment
        } else {
            return this.properties.alignment
        }
    },
    eventDelegator: function(eventDelegator) {
        if (typeof eventDelegator !== "undefined") {
            this.properties.eventDelegator = eventDelegator
        } else {
            return this.properties.eventDelegator
        }
    }
});
AJS.Dropdown.ListItem = AJS.Control.extend({
    init: function(options) {
        this._setOptions(options);
        this.$element = AJS.$(this.options.element);
        this.hasFocus = false;
        this._assignEvents("instance", this);
        this._assignEvents("element", this.$element)
    },
    _getDefaultOptions: function() {
        return {
            element: null,
            autoScroll: true,
            focusClass: AJS.ACTIVE_CLASS
        }
    },
    _events: {
        "instance": {
            "focus": function(event) {
                this.hasFocus = true;
                this.$element.addClass(this.options.focusClass);
                if (!event.noscrolling) {
                    AJS.Dropdown.ListItem.MOTION_DETECTOR.unbind();
                    this.isWaitingForMove = true;
                    if (this.options.autoScroll) {
                        this.$element.scrollIntoView(AJS.Dropdown.ListItem.SCROLL_INTO_VIEW_OPTIONS)
                    }
                }
            },
            "blur": function() {
                this.hasFocus = false;
                this.$element.removeClass(this.options.focusClass)
            },
            "accept": function() {
                var event = new jQuery.Event("click");
                var $target = this.$element.is("a[href]") ? this.$element : this.$element.find("a[href]");
                $target.trigger(event);
                if (!event.isDefaultPrevented()) {
                    window.top.location = $target.attr("href")
                }
            }
        },
        "element": {
            "mousemove": function() {
                if (((this.isWaitingForMove && AJS.Dropdown.ListItem.MOTION_DETECTOR.moved) && !this.hasFocus) || !this.hasFocus) {
                    this.isWaitingForMove = false;
                    this.trigger({
                        type: "focus",
                        noscrolling: true
                    })
                }
            }
        }
    }
});
AJS.Dropdown.ListItem.MOTION_DETECTOR = new JIRA.Mouse.MotionDetector();
AJS.Dropdown.ListItem.SCROLL_INTO_VIEW_OPTIONS = {
    duration: 100,
    callback: function() {
        AJS.Dropdown.ListItem.MOTION_DETECTOR.wait()
    }
};
AJS.Dropdown.ListItemGroup = AJS.Group.extend({
    keys: {
        "Up": function(event) {
            this.shiftFocus(-1);
            event.preventDefault()
        },
        "Down": function(event) {
            this.shiftFocus(1);
            event.preventDefault()
        },
        "Return": function(event) {
            this.items[this.index].trigger("accept");
            event.preventDefault()
        }
    }
});
JIRA.Dropdown = function() {
    var instances = [];
    return {
        addInstance: function() {
            instances.push(this)
        },
        hideInstances: function() {
            var that = this;
            jQuery(instances).each(function() {
                if (that !== this) {
                    this.hideDropdown()
                }
            })
        },
        getHash: function() {
            if (!this.hash) {
                this.hash = {
                    container: this.dropdown,
                    hide: this.hideDropdown,
                    show: this.displayDropdown
                }
            }
            return this.hash
        },
        displayDropdown: function() {
            if (JIRA.Dropdown.current === this) {
                return
            }
            this.hideInstances();
            JIRA.Dropdown.current = this;
            this.dropdown.css({
                display: "block"
            });
            this.displayed = true;
            var dd = this.dropdown;
            if (!window.top.JIRA.Dialog.current) {
                setTimeout(function() {
                    var win = jQuery(window);
                    var minScrollTop = dd.offset().top + dd.prop("offsetHeight") - win.height() + 10;
                    if (win.scrollTop() < minScrollTop) {
                        jQuery("html,body").animate({
                            scrollTop: minScrollTop
                        }, 300, "linear")
                    }
                }, 100)
            }
        },
        hideDropdown: function() {
            if (this.displayed === false) {
                return
            }
            JIRA.Dropdown.current = null;
            this.dropdown.css({
                display: "none"
            });
            this.displayed = false
        },
        init: function(trigger, dropdown) {
            var that = this;
            this.addInstance(this);
            this.dropdown = jQuery(dropdown);
            this.dropdown.css({
                display: "none"
            });
            jQuery(document).keydown(function(e) {
                if (e.keyCode === 9) {
                    that.hideDropdown()
                }
            });
            if (trigger.target) {
                jQuery.aop.before(trigger, function() {
                    if (!that.displayed) {
                        that.displayDropdown()
                    }
                })
            } else {
                that.dropdown.css("top", jQuery(trigger).outerHeight() + "px");
                trigger.click(function(e) {
                    if (!that.displayed) {
                        that.displayDropdown();
                        e.stopPropagation()
                    } else {
                        that.hideDropdown()
                    }
                    e.preventDefault()
                })
            }
            jQuery(document.body).click(function() {
                if (that.displayed) {
                    that.hideDropdown()
                }
            })
        }
    }
}();
JIRA.Dropdown.Standard = function(trigger, dropdown) {
    var that = begetObject(JIRA.Dropdown);
    that.init(trigger, dropdown);
    return that
}
;
JIRA.Dropdown.AutoComplete = function(trigger, dropdown) {
    var that = begetObject(JIRA.Dropdown);
    that.init = function(trigger, dropdown) {
        this.addInstance(this);
        this.dropdown = jQuery(dropdown).click(function(e) {
            e.stopPropagation()
        });
        this.dropdown.css({
            display: "none"
        });
        if (trigger.target) {
            jQuery.aop.before(trigger, function() {
                if (!that.displayed) {
                    that.displayDropdown()
                }
            })
        } else {
            trigger.click(function(e) {
                if (!that.displayed) {
                    that.displayDropdown();
                    e.stopPropagation()
                }
            })
        }
        jQuery(document.body).click(function() {
            if (that.displayed) {
                that.hideDropdown()
            }
        })
    }
    ;
    that.init(trigger, dropdown);
    return that
}
;
AJS.namespace("jira.widget.dropdown", null, JIRA.Dropdown);
JIRA.containDropdown = function(dropdown, containerSelector, dynamic) {
    function getDropdownOffset() {
        return dropdown.$.offset().top - jQuery(containerSelector).offset().top
    }
    var container, ddOffset, availableArea, shadowOffset = 25;
    if (dropdown.$.parents(containerSelector).length !== -1) {
        container = jQuery(containerSelector),
        ddOffset = getDropdownOffset(),
        shadowOffset = 30,
        availableArea = container.outerHeight() - ddOffset - shadowOffset;
        if (availableArea <= parseInt(dropdown.$.prop("scrollHeight"), 10)) {
            JIRA.containDropdown.containHeight(dropdown, availableArea)
        } else {
            if (dynamic) {
                JIRA.containDropdown.releaseContainment(dropdown)
            }
        }
        dropdown.reset()
    }
}
;
JIRA.containDropdown.containHeight = function(dropdown, availableArea) {
    dropdown.$.css({
        height: availableArea
    });
    if (dropdown.$.css("overflowY") !== "scroll") {
        dropdown.$.css({
            width: 15 + dropdown.$.prop("scrollWidth"),
            overflowY: "scroll",
            overflowX: "hidden"
        })
    }
}
;
JIRA.containDropdown.releaseContainment = function(dropdown) {
    dropdown.$.css({
        height: "",
        width: "",
        overflowY: "",
        overflowX: ""
    })
}
;
AJS.namespace("AJS.containDropdown", null, JIRA.containDropdown);
AJS.$.deactivateLinkedMenu = function() {}
;
AJS.$.linkedMenuInstances = [];
AJS.$.fn.linkedMenu = function(opts) {
    var idx, that = this, onDisable, enabled = false, focusElement = function(elem) {
        elem = AJS.$(elem);
        that.blur();
        elem.trigger("click", "focus", "mousedown")
    }, keyHandler = function(e) {
        var targ;
        if (e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 27) {
            if (e.keyCode === 37) {
                targ = idx - 1;
                if (idx - 1 >= 0) {
                    if (isNotActive(that[targ])) {
                        idx = targ;
                        focusElement(that[idx])
                    }
                } else {
                    targ = that.length - 1;
                    if (isNotActive(that[targ])) {
                        idx = targ;
                        focusElement(that[idx])
                    }
                }
            } else {
                if (e.keyCode === 39) {
                    targ = idx + 1;
                    if (targ < that.length) {
                        if (isNotActive(that[targ])) {
                            idx = targ;
                            focusElement(that[idx])
                        }
                    } else {
                        targ = 0;
                        if (isNotActive(that[targ])) {
                            idx = targ;
                            focusElement(that[idx])
                        }
                    }
                } else {
                    that.disableLinkedMenu(e)
                }
            }
            e.preventDefault()
        }
    }, isNotActive = function(elem) {
        if (elem !== that[idx]) {
            return true
        }
    }, focusBridge = function() {
        if (isNotActive(this)) {
            idx = AJS.$.inArray(this, that);
            focusElement(this)
        }
    }, reflectionBridge = function() {
        var targ = AJS.$.inArray(this, AJS.$(opts.reflectFocus));
        if (isNotActive(that[targ])) {
            idx = targ;
            focusElement(that[idx])
        }
    }, enable = function() {
        var elem, clss;
        if (!enabled) {
            AJS.$.currentLinkedMenu = that;
            if (opts.onFocusRemoveClass) {
                elem = AJS.$(opts.onFocusRemoveClass);
                clss = opts.onFocusRemoveClass.match(/\.([a-z]*)$/);
                if (clss && clss[1] && elem.length > 0) {
                    AJS.$(opts.onFocusRemoveClass).removeClass(clss[1]);
                    onDisable = function() {
                        AJS.$(elem).addClass(clss[1])
                    }
                }
            }
            enabled = true;
            idx = AJS.$.inArray(this, that);
            that.mouseover(focusBridge);
            if (AJS.$.browser.mozilla) {
                AJS.$(document).keypress(keyHandler)
            } else {
                AJS.$(document).keydown(keyHandler)
            }
            AJS.$(document).mousedown(that.disableLinkedMenu);
            if (opts.reflectFocus) {
                AJS.$(opts.reflectFocus).mouseover(reflectionBridge)
            }
        }
    };
    that.disableLinkedMenu = function(e) {
        AJS.$(document).unbind("keypress", keyHandler);
        AJS.$(document).unbind("keydown", keyHandler);
        that.unbind("mouseover", focusBridge);
        AJS.$(document).unbind("mousedown", arguments.callee);
        if (opts.reflectFocus) {
            AJS.$(opts.reflectFocus).unbind("mouseover", reflectionBridge)
        }
        if (onDisable) {
            onDisable()
        }
        that.blur();
        delete AJS.$.currentLinkedMenu;
        window.setTimeout(function() {
            enabled = false
        }, 200)
    }
    ;
    opts = opts || {};
    focusElement = opts.focusElement || focusElement;
    that.click(enable);
    return that
}
;
(function() {
    var jQuery = window.top.jQuery || window.jQuery;
    function getNewScrollTop(options) {
        options = options || {};
        options.marginTop = options.marginTop || options.margin || 0;
        options.marginBottom = options.marginBottom || options.margin || 0;
        var $window = jQuery(window.top);
        var $stalker = jQuery("#stalker");
        var scrollTop = $window.scrollTop();
        var scrollHeight = $window.height();
        var offsetTop = Math.max(0, getPageY(this[0]) - options.marginTop);
        var offsetHeight = options.marginTop + this.outerHeight() + options.marginBottom;
        var newScrollTop = scrollTop;
        if (newScrollTop + scrollHeight < offsetTop + offsetHeight) {
            newScrollTop = offsetTop + offsetHeight - scrollHeight
        }
        if ($stalker.length !== 0) {
            var offsetParent = this[0];
            var positionedParent = null;
            do {
                if (jQuery(offsetParent).css("position") === "absolute") {
                    positionedParent = offsetParent
                }
            } while (offsetParent = offsetParent.offsetParent);if (positionedParent && getPageY(positionedParent) > getPageY($stalker[0])) {
                offsetTop -= $stalker.outerHeight()
            }
        }
        if (newScrollTop > offsetTop) {
            newScrollTop = offsetTop
        }
        return newScrollTop
    }
    function getPageY(element) {
        var currElement = element
          , offsetTop = 0;
        do {
            offsetTop += currElement.offsetTop
        } while (currElement = currElement.offsetParent);currElement = element;
        do {
            if (currElement && currElement.scrollTop) {
                offsetTop -= currElement.scrollTop
            }
            currElement = currElement.parentNode
        } while (currElement && currElement != document.body);return offsetTop
    }
    window.jQuery.fn.scrollIntoView = function(options) {
        if (this.length === 0) {
            return this
        }
        var fixedParent = this.hasFixedParent();
        if (!fixedParent) {
            options = options || {};
            if (!this.is(":visible") && options.callback) {
                options.callback();
                return this
            }
            var scrollTop = jQuery(window.top).scrollTop();
            var newScrollTop = getNewScrollTop.call(this, options);
            var $stalker = jQuery("#stalker");
            if (newScrollTop !== scrollTop) {
                var $target = this;
                var $document = jQuery(window.top.document);
                $document.trigger("moveToStarted", $target);
                if (options.duration) {
                    $document.find("body, html").stop(true).animate({
                        scrollTop: newScrollTop
                    }, options.duration, "swing", function() {
                        if (options.callback) {
                            options.callback()
                        }
                        $document.trigger("moveToFinished", $target);
                        $stalker.trigger("positionChanged")
                    })
                } else {
                    $document.find("body, html").prop("scrollTop", newScrollTop)
                }
            } else {
                if (options.callback) {
                    options.callback()
                }
            }
        } else {
            var $elementToScrollTo = jQuery(this)
              , $fixedParent = jQuery(fixedParent)
              , fixedParentHeight = $fixedParent.outerHeight()
              , fixedParentScrollTop = $fixedParent.scrollTop()
              , fixedParentScrollBottom = fixedParentScrollTop + fixedParentHeight
              , elementPosition = $elementToScrollTo.position()
              , elementPositionBottom = elementPosition.top + $elementToScrollTo.height();
            var below = elementPositionBottom + fixedParentScrollTop > fixedParentScrollBottom
              , above = elementPosition.top < 0;
            if (below) {
                $fixedParent.scrollTop(fixedParentScrollTop + elementPositionBottom - fixedParentHeight)
            } else {
                if (above) {
                    $fixedParent.scrollTop(fixedParentScrollTop + elementPosition.top)
                }
            }
        }
        return this
    }
    ;
    jQuery.fn.isInView = function(options) {
        if (this.length > 0 && !this.hasFixedParent()) {
            options = options || {};
            var scrollTop = jQuery(window.top).scrollTop();
            var newScrollTop = getNewScrollTop.call(this, options);
            return newScrollTop === scrollTop
        }
        return this
    }
}
)();
AJS.namespace("JIRA.FRAGMENTS");
JIRA.FRAGMENTS.issueActionsFragment = function() {
    function addIssueIdToReturnUrl(issueId) {
        var matchSelectedIssueId = /selectedIssueId=[0-9]*/g;
        if (self != top) {
            return encodeURIComponent(window.top.location.href)
        }
        var url = window.location.href
          , newUrl = url;
        if (/selectedIssueId=[0-9]*/.test(url)) {
            newUrl = url.replace(matchSelectedIssueId, "selectedIssueId=" + issueId)
        } else {
            if (url.lastIndexOf("?") >= 0) {
                newUrl = url + "&"
            } else {
                newUrl = url + "?"
            }
            newUrl = newUrl + "selectedIssueId=" + issueId
        }
        return encodeURIComponent(newUrl)
    }
    return function(json) {
        var returnURL = addIssueIdToReturnUrl(json.id);
        var htmlParts = ['<div class="aui-list"><ul class="aui-list-section"><li class="aui-list-item"><a href="', contextPath, "/browse/", json.key, '" class="aui-list-item-link">', htmlEscape(json.viewIssue), "</a></li></ul>"];
        var hasActions = json.actions && json.actions.length > 0;
        var hasOperations = json.operations && json.operations.length > 0;
        if (hasActions) {
            htmlParts.push(hasOperations ? '<ul class="aui-list-section">' : '<ul class="aui-list-section aui-last">');
            var URL_A = contextPath + "/secure/WorkflowUIDispatcher.jspa?id=" + json.id + "&amp;action=";
            var URL_B = "&amp;atl_token=" + json.atlToken + "&amp;returnUrl=" + returnURL;
            AJS.$.each(json.actions, function() {
                htmlParts.push('<li class="aui-list-item"><a href="', URL_A, this.action, URL_B, '" rel="', this.action, '" class="aui-list-item-link issueaction-workflow-transition" data-issueId="' + json.id + '" data-issueKey="' + json.key + '">', htmlEscape(this.name), "</a></li>")
            });
            htmlParts.push("</ul>")
        }
        if (hasOperations) {
            htmlParts.push('<ul class="aui-list-section aui-last">');
            URL_A = "&amp;returnUrl=" + returnURL;
            URL_B = "&amp;atl_token=" + json.atlToken;
            AJS.$.each(json.operations, function() {
                htmlParts.push('<li class="aui-list-item"><a href="', this.url, URL_A, URL_B, '" class="aui-list-item-link ', this.styleClass, '" data-issueId="' + json.id + '" data-issueKey="' + json.key + '">', htmlEscape(this.name), "</a></li>")
            });
            htmlParts.push("</ul>")
        }
        htmlParts.push("</div>");
        return AJS.$(htmlParts.join(""))
    }
}();
AJS.DropdownSelect = AJS.Control.extend({
    init: function(options) {
        var instance = this;
        this.model = new AJS.SelectModel(options);
        this.model.$element.hide();
        this._createFurniture();
        this.dropdownController = AJS.InlineLayer.create({
            alignment: AJS.LEFT,
            width: 200,
            content: AJS.$(".aui-list", this.$container)
        });
        this.dropdownController.layer().addClass("select-menu");
        this.listController = new AJS.List({
            containerSelector: AJS.$(".aui-list", this.$container),
            groupSelector: "ul.opt-group",
            itemSelector: "li:not(.no-suggestions)",
            selectionHandler: function(e) {
                instance._selectionHandler(this.getFocused(), e);
                e.preventDefault()
            }
        });
        this._assignEventsToFurniture()
    },
    show: function() {
        this.dropdownController.show();
        this._resetSuggestions();
        this.listController.enable()
    },
    _assignEventsToFurniture: function() {
        this._assignEvents("trigger", this.$trigger)
    },
    _createFurniture: function() {
        var id = this.model.$element.attr("id");
        this.$container = this._render("container", id);
        this.$trigger = this.model.$element.prev("a").appendTo(this.$container);
        this.$container.append(this._render("suggestionsContainer", id));
        this.$container.insertBefore(this.model.$element)
    },
    _resetSuggestions: function() {
        this.listController.generateListFromJSON(this.model.getAllDescriptors());
        this.listController.index = 0;
        this.listController.focus()
    },
    _renders: {
        container: function(idPrefix) {
            return AJS.$('<div class="select-menu" id="' + idPrefix + '-multi-select">')
        },
        suggestionsContainer: function(idPrefix) {
            return AJS.$('<div class="aui-list aui-list-checked" id="' + idPrefix + '-suggestions" tabindex="-1"></div>')
        }
    },
    _selectionHandler: function(selected) {
        var instance = this
          , intCount = 0;
        this.model.setSelected(selected.data("descriptor"));
        this.dropdownController.content().find(".aui-checked").removeClass(".aui-checked");
        selected.addClass(".aui-checked");
        var myInterval = window.setInterval(function() {
            intCount++;
            selected.toggleClass(".aui-checking");
            if (intCount > 2) {
                clearInterval(myInterval);
                instance.dropdownController.hide()
            }
        }, 80)
    },
    _events: {
        trigger: {
            click: function(e) {
                //this.show();
                e.preventDefault();
                e.stopPropagation()
            }
        }
    }
});
AJS.namespace("AJS.SelectMenu", null, AJS.DropdownSelect);
AJS.SecurityLevelSelect = AJS.DropdownSelect.extend({
    _createFurniture: function() {
        AJS.populateParameters();
        this._super()
    },
    _selectionHandler: function(selected) {
        var descriptor = selected.data("descriptor");
        if (descriptor && !descriptor.value()) {
            this.$trigger.find("span:first").removeClass("icon-locked").addClass("icon-unlocked");
            this.$container.parent().find(".current-level").text("Viewable by All Users")
        } else {
            this.$trigger.find("span:first").removeClass("icon-unlocked").addClass("icon-locked");
            var htmlEscapedLabel = AJS.$("<div/>").text(descriptor.label()).html();
            this.$container.parent().find(".current-level").html(AJS.format("Restricted to \u003cspan class=\'redText\'>{0}\u003c\/span>", htmlEscapedLabel))
        }
        this._super(selected)
    },
    _handleDownKey: function(e) {
        if (e.keyCode === jQuery.ui.keyCode.DOWN && !this.dropdownController.isVisible()) {
            e.preventDefault();
            e.stopPropagation();
            this.show()
        }
    },
    _events: {
        trigger: {
            keydown: function(e) {
                this._handleDownKey(e)
            },
            keypress: function(e) {
                this._handleDownKey(e)
            }
        }
    }
});
AJS.namespace("AJS.SecurityLevel", null, AJS.SecurityLevelSelect);
// This file was automatically generated from QueryableSelect.soy.
// Please don't edit this file by hand.

if (typeof AJS == 'undefined') {
    var AJS = {};
}
if (typeof AJS.Templates == 'undefined') {
    AJS.Templates = {};
}

AJS.Templates.queryableSelect = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<select ', (opt_data.name) ? 'name="' + soy.$$escapeHtml(opt_data.name) + '"' : '', ' ', (opt_data.id) ? 'id="' + soy.$$escapeHtml(opt_data.id) + '"' : '', ' multiple="multiple">');
    var descriptorList16 = opt_data.descriptors;
    var descriptorListLen16 = descriptorList16.length;
    for (var descriptorIndex16 = 0; descriptorIndex16 < descriptorListLen16; descriptorIndex16++) {
        var descriptorData16 = descriptorList16[descriptorIndex16];
        if (descriptorData16.properties.items) {
            output.append('<optgroup label="', soy.$$escapeHtml(descriptorData16.properties.label), '">');
            var optionList22 = descriptorData16.properties.items;
            var optionListLen22 = optionList22.length;
            for (var optionIndex22 = 0; optionIndex22 < optionListLen22; optionIndex22++) {
                var optionData22 = optionList22[optionIndex22];
                AJS.Templates.option({
                    option: optionData22
                }, output);
            }
            output.append('</optgroup>');
        } else {
            AJS.Templates.option({
                option: descriptorData16
            }, output);
        }
    }
    output.append('</select>');
    return opt_sb ? '' : output.toString();
}
;

AJS.Templates.option = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<option ', (opt_data.option.properties.title) ? 'title="' + soy.$$escapeHtml(opt_data.option.properties.title) + '"' : '', ' ', (opt_data.option.properties.meta) ? 'data-meta="' + soy.$$escapeHtml(opt_data.option.properties.meta) + '"' : '', ' ', (opt_data.option.properties.selected) ? 'selected="selected"' : '', ' value="', soy.$$escapeHtml(opt_data.option.properties.value), '">', soy.$$escapeHtml(opt_data.option.properties.label), '</option>');
    return opt_sb ? '' : output.toString();
}
;

AJS.SelectHelper = {
    updateFreeInputVal: function() {
        if (this.options.submitInputVal) {
            this.model.updateFreeInput(this.$field.val())
        }
    },
    removeFreeInputVal: function() {
        if (this.options.submitInputVal) {
            this.model.removeFreeInputVal()
        }
    }
};
AJS.SelectModel = AJS.Control.extend({
    init: function(options) {
        var instance = this;
        if (options.element) {
            options.element = AJS.$(options.element)
        } else {
            options.element = AJS.$(options)
        }
        this._setOptions(options);
        this.$element = this.options.element.hide();
        this.type = this.$element.attr("multiple") ? "multiple" : "single";
        this.id = this.$element.attr("id") || this.$element.attr("name");
        if (this.type === "single") {
            this.$element.attr("multiple", "multiple")
        }
        this.$element.bind("reset", function() {
            instance._parseDescriptors()
        });
        this._parseDescriptors()
    },
    _getFreeInputEl: function() {
        return this.$element.find(".free-input")
    },
    removeFreeInputVal: function() {
        this._getFreeInputEl().remove()
    },
    updateFreeInput: function(val) {
        var $freeInput = this._getFreeInputEl();
        val = AJS.$.trim(val);
        if (val) {
            if (!$freeInput.length) {
                $freeInput = AJS.$("<option class='free-input' />").appendTo(this.$element)
            }
            $freeInput.attr({
                "value": val,
                "selected": "selected"
            })
        } else {
            $freeInput.remove()
        }
    },
    _getDefaultOptions: function() {
        return {}
    },
    getSelectedValues: function() {
        var selectedVals = []
          , selected = this.getDisplayableSelectedDescriptors();
        for (var i = 0; i < selected.length; i++) {
            selectedVals.push(selected[i].value())
        }
        return selectedVals
    },
    setSelected: function(descriptor) {
        var instance = this
          , selectedItem = false
          , changed = false
          , $toSelect = this.$element.find("option").not(this._getExclusions()).filter(function() {
            return this.value === descriptor.value()
        });
        if (this.type === "single") {
            if (this.getValue() === descriptor.value()) {
                return changed
            }
            $toSelect = $toSelect.first();
            this.$element.find("option:selected").not(this._getExclusions()).each(function(i, option) {
                var currDescriptor = AJS.$(this).data("descriptor");
                if ($toSelect[0] !== option) {
                    instance.setUnSelected(currDescriptor)
                }
            })
        }
        $toSelect.each(function() {
            var $this = AJS.$(this);
            selectedItem = true;
            changed = !$this.is(":selected");
            $this.attr("selected", "selected").data("descriptor").selected(true)
        });
        if (!selectedItem) {
            descriptor.selected(true);
            descriptor.removeOnUnSelect(true);
            var newOption = this._render("option", descriptor);
            newOption.attr("selected", "selected");
            this.$element.append(newOption);
            changed = true
        }
        descriptor.highlighted(false);
        if (changed) {
            this.$element.trigger("change", descriptor)
        }
        return changed
    },
    setAllSelected: function() {
        var instance = this;
        AJS.$(this.getDisplayableUnSelectedDescriptors()).each(function() {
            instance.setSelected(this)
        })
    },
    setAllUnSelected: function() {
        var instance = this;
        AJS.$(this.getDisplayableSelectedDescriptors()).each(function() {
            instance.setUnSelected(this)
        })
    },
    setUnSelected: function(descriptor) {
        var instance = this
          , value = descriptor.value();
        this.$element.find("option:selected").not(this._getExclusions()).filter(function() {
            return AJS.$(this).attr("value") === value
        }).each(function() {
            var $this = AJS.$(this);
            if (instance.options.removeOnUnSelect || $this.data("descriptor").removeOnUnSelect()) {
                $this.remove()
            } else {
                $this.removeAttr("selected");
                $this.data("descriptor").selected(false)
            }
        })
    },
    remove: function(descriptor) {
        if (descriptor && descriptor.model()) {
            descriptor.model().remove()
        }
    },
    getDescriptor: function(value) {
        var returnDescriptor;
        value = AJS.$.trim(value.toLowerCase());
        AJS.$.each(this.getAllDescriptors(false), function(e, descriptor) {
            if (value === AJS.$.trim(descriptor.label().toLowerCase()) || value === AJS.$.trim(descriptor.value().toLowerCase())) {
                returnDescriptor = descriptor;
                return false
            }
        });
        return returnDescriptor
    },
    _parseOption: function(optionElem) {
        var descriptor, icon;
        optionElem = AJS.$(optionElem);
        if (this.options.removeNullOptions && this._hasNullValue(optionElem)) {
            optionElem.remove();
            return null
        }
        icon = optionElem.attr("data-icon");
        descriptor = new AJS.ItemDescriptor({
            styleClass: optionElem.prop("className"),
            value: optionElem.val(),
            invalid: optionElem.hasClass("invalid_sel"),
            fieldText: optionElem.attr("data-field-text"),
            title: optionElem.attr("title"),
            meta: optionElem.data("meta"),
            label: optionElem.attr("data-field-label") || AJS.$.trim(optionElem.text()),
            icon: icon ? icon : optionElem.css("backgroundImage").replace(/url\(['"]?(.*?)['"]?\)/, "$1"),
            selected: optionElem.prop("selected"),
            removeOnUnSelect: !!optionElem.data("remove-on-unselect"),
            model: optionElem
        });
        optionElem.data("descriptor", descriptor);
        return descriptor
    },
    _hasNullValue: function(optionElement) {
        return optionElement.val() < 0
    },
    _parseDescriptors: function() {
        var instance = this
          , items = this.$element.children();
        function parseOptGroup(optionGroup) {
            var properties = {
                label: optionGroup.attr("label"),
                placement: optionGroup.attr("data-placement"),
                footerText: optionGroup.attr("data-footer-text"),
                styleClass: optionGroup.prop("className"),
                model: optionGroup,
                items: retrieveAvailableOptions(optionGroup)
            };
            var weight = optionGroup.data("weight");
            if (weight) {
                properties.weight = +weight
            }
            optionGroup.data("descriptor", new AJS.GroupDescriptor(properties))
        }
        function retrieveAvailableOptions(parent) {
            var availableOptionElems = AJS.$("option", parent)
              , arr = [];
            AJS.$.each(availableOptionElems, function() {
                arr.push(instance._parseOption(this))
            });
            return arr
        }
        items.each(function(i) {
            var item = items.eq(i);
            if (item.is("optgroup")) {
                parseOptGroup(item)
            } else {
                if (item.is("option")) {
                    if (item.attr("data-placeholder")) {
                        instance.placeholder = item.text();
                        item.remove()
                    } else {
                        instance._parseOption(item)
                    }
                }
            }
        })
    },
    getPlaceholder: function() {
        return this.placeholder
    },
    _getExclusions: function() {
        return ".free-input"
    },
    getValue: function() {
        if (this.type === "single") {
            return this.$element.val() && this.$element.val()[0]
        } else {
            return this.$element.val()
        }
    },
    getDisplayableSelectedDescriptors: function() {
        var descriptors = [];
        this.$element.find("option:selected").not(this._getExclusions()).each(function() {
            descriptors.push(AJS.$.data(this, "descriptor"))
        });
        return descriptors
    },
    getDisplayableUnSelectedDescriptors: function() {
        var descriptors = [];
        this.$element.find("option").not(":selected").not(this._getExclusions()).each(function() {
            descriptors.push(AJS.$.data(this, "descriptor"))
        });
        return descriptors
    },
    getAllDescriptors: function(showGroups) {
        var properties, descriptors = [];
        this.$element.children().each(function() {
            var descriptor, elem = AJS.$(this);
            if (elem.is("option")) {
                if (elem.data("descriptor")) {
                    descriptors.push(elem.data("descriptor"))
                }
            } else {
                if (elem.is("optgroup")) {
                    if (showGroups !== false) {
                        properties = AJS.copyObject(elem.data("descriptor").allProperties(), false);
                        properties.items = [];
                        descriptor = new AJS.GroupDescriptor(properties);
                        descriptors.push(descriptor)
                    }
                    elem.children("option").each(function() {
                        var elem = AJS.$(this);
                        var itemDescriptor = elem.data("descriptor");
                        if (itemDescriptor) {
                            if (showGroups !== false) {
                                descriptor.addItem(itemDescriptor)
                            } else {
                                descriptors.push(itemDescriptor)
                            }
                        }
                    })
                }
            }
        });
        return descriptors
    },
    clearUnSelected: function() {
        this.$element.find("option:not(:selected)").not(this._getExclusions()).remove()
    },
    getUnSelectedDescriptors: function() {
        var instance = this
          , descriptors = []
          , selectedValues = {}
          , addedValues = {};
        function isValid(descriptor) {
            var descriptorVal = descriptor.value().toLowerCase();
            if (!selectedValues[descriptorVal] && (!addedValues[descriptorVal] || descriptor.allowDuplicate() !== false)) {
                addedValues[descriptorVal] = true;
                return true
            }
            return false
        }
        var selectedDescriptors = this.getDisplayableSelectedDescriptors();
        AJS.$.each(selectedDescriptors, function(i, descriptor) {
            selectedValues[descriptor.value().toLowerCase()] = true
        });
        var selectChildren = this.$element.children();
        selectChildren.each(function() {
            var descriptor, properties, elem = AJS.$(this);
            if (elem.is("option") && !this.selected) {
                descriptor = AJS.$.data(this, "descriptor");
                if (isValid(descriptor)) {
                    descriptors.push(descriptor)
                }
            } else {
                if (elem.is("optgroup")) {
                    properties = AJS.copyObject(elem.data("descriptor").allProperties(), false);
                    properties.items = [];
                    descriptor = new AJS.GroupDescriptor(properties);
                    descriptors.push(descriptor);
                    elem.find("option").not(instance._getExclusions()).each(function(option) {
                        if (option.selected) {
                            return
                        }
                        var itemDescriptor = AJS.$.data(this, "descriptor");
                        if (isValid(itemDescriptor)) {
                            descriptor.addItem(itemDescriptor)
                        }
                    })
                }
            }
        });
        return descriptors
    },
    _renders: {
        option: function(descriptor) {
            var label = descriptor.label();
            var text = descriptor.fieldText() || label;
            var option = new Option(text,descriptor.value());
            var $option = AJS.$(option);
            var iconUrl = descriptor.icon();
            option.title = descriptor.title();
            if (text != label) {
                $option.data("field-label", label)
            }
            if (descriptor.selected()) {
                $option.attr("selected", "selected")
            }
            AJS.$.data(option, "descriptor", descriptor);
            descriptor.model($option);
            if (iconUrl) {
                $option.css("backgroundImage", "url(" + iconUrl + ")")
            }
            return $option
        },
        optgroup: function(descriptor) {
            var elem = AJS.$("<optgroup />").addClass(descriptor.styleClass()).attr("label", descriptor.label());
            descriptor.model(elem);
            elem.data("descriptor", descriptor);
            if (descriptor.id()) {
                elem.attr("id", descriptor.id())
            }
            return elem
        }
    }
});
(function() {
    AJS.SuggestHelper = {
        createDescriptorFetcher: function(options, model) {
            if (options.ajaxOptions && options.ajaxOptions.url) {
                if (model && options.content === "mixed") {
                    return new AJS.MixedDescriptorFetcher(options,model)
                } else {
                    return new AJS.AjaxDescriptorFetcher(options.ajaxOptions)
                }
            } else {
                if (options.suggestions) {
                    return new AJS.FuncDescriptorFetcher(options)
                } else {
                    if (model) {
                        return new AJS.StaticDescriptorFetcher(options,model)
                    }
                }
            }
        },
        extractItems: function(descriptors) {
            return _.flatten(_.map(descriptors, function(descriptor) {
                if (descriptor instanceof AJS.GroupDescriptor) {
                    return descriptor.items()
                } else {
                    return [descriptor]
                }
            }))
        },
        mirrorQuery: function(query, label, uppercaseValue) {
            var value = uppercaseValue ? query.toUpperCase() : query;
            return new AJS.GroupDescriptor({
                label: "user inputted option",
                showLabel: false,
                replace: true
            }).addItem(new AJS.ItemDescriptor({
                value: value,
                label: value,
                labelSuffix: " (" + label + ")",
                title: value,
                allowDuplicate: false,
                noExactMatch: true
            }))
        },
        isSelected: function(itemDescriptor, selectedVals) {
            return _.any(selectedVals, function(descriptor) {
                return itemDescriptor.value() === descriptor.value()
            })
        },
        removeDuplicates: function(descriptors, vals) {
            vals = vals || [];
            return _.filter(descriptors, _.bind(function(descriptor) {
                if (descriptor instanceof AJS.GroupDescriptor) {
                    descriptor.items(this.removeDuplicates(descriptor.items(), vals));
                    return true
                } else {
                    if (!_.include(vals, descriptor.value())) {
                        if (descriptor.value()) {
                            vals.push(descriptor.value())
                        }
                        return true
                    }
                }
            }, this))
        },
        removeSelected: function(descriptors, selectedValues) {
            return _.filter(descriptors, _.bind(function(descriptor) {
                if ((descriptor instanceof AJS.ItemDescriptor) && this.isSelected(descriptor, selectedValues)) {
                    return false
                }
                if (descriptor instanceof AJS.GroupDescriptor) {
                    descriptor.items(this.removeSelected(descriptor.items(), selectedValues))
                }
                return true
            }, this))
        }
    };
    AJS.DefaultSuggestHandler = Class.extend({
        init: function(options) {
            this.options = options;
            this.descriptorFetcher = AJS.SuggestHelper.createDescriptorFetcher(options)
        },
        validateMirroring: function(query) {
            return this.options.userEnteredOptionsMsg && query.length > 0
        },
        formatSuggestions: function(descriptors, query) {
            if (this.validateMirroring(query)) {
                descriptors.push(AJS.SuggestHelper.mirrorQuery(query, this.options.userEnteredOptionsMsg, this.options.uppercaseUserEnteredOnSelect))
            }
            return descriptors
        },
        execute: function(query, force) {
            var deferred = jQuery.Deferred();
            var fetcherDef = this.descriptorFetcher.execute(query, force).done(_.bind(function(descriptors) {
                if (descriptors) {
                    descriptors = this.formatSuggestions(descriptors, query)
                }
                deferred.resolve(descriptors, query)
            }, this));
            deferred.fail(function() {
                fetcherDef.reject()
            });
            return deferred
        }
    });
    AJS.SelectSuggestHandler = AJS.DefaultSuggestHandler.extend({
        init: function(options, model) {
            this.descriptorFetcher = AJS.SuggestHelper.createDescriptorFetcher(options, model);
            this.options = options;
            this.model = model
        },
        formatSuggestions: function(descriptors, query) {
            var suggestions = this._super(descriptors, query);
            var selectedDescriptors = this.model.getDisplayableSelectedDescriptors();
            if (this.options.removeDuplicates) {
                suggestions = AJS.SuggestHelper.removeDuplicates(descriptors)
            }
            return AJS.SuggestHelper.removeSelected(suggestions, selectedDescriptors)
        }
    });
    JIRA.AssigneeSuggestHandler = AJS.SelectSuggestHandler.extend({
        formatSuggestions: function(descriptors, query) {
            var descriptors = this._super(descriptors, query);
            if (query.length === 0) {
                descriptors[0].footerText("Start Typing for Users")
            }
            return descriptors
        }
    });
    AJS.CheckboxMultiSelectSuggestHandler = AJS.SelectSuggestHandler.extend({
        createClearAll: function() {
            return "<li class='check-list-group-actions'><a class='clear-all' href='#'>" + "Clear selected items" + "</a></li>"
        },
        formatSuggestions: function(descriptors, query) {
            var selectedItems = AJS.SuggestHelper.removeDuplicates(this.model.getDisplayableSelectedDescriptors());
            var selectedGroup = new AJS.GroupDescriptor({
                styleClass: "selected-group",
                items: selectedItems,
                actionBarHtml: selectedItems.length > 1 ? this.createClearAll() : null
            });
            descriptors.splice(0, 0, selectedGroup);
            if (query.length > 0) {
                descriptors = AJS.SuggestHelper.removeDuplicates(descriptors);
                var items = AJS.SuggestHelper.extractItems(descriptors).sort(function(a, b) {
                    a = a.label().toLowerCase();
                    b = b.label().toLowerCase();
                    return a.localeCompare(b)
                });
                descriptors = [new AJS.GroupDescriptor({
                    items: items
                })]
            }
            return descriptors
        }
    });
    AJS.UserListSuggestHandler = AJS.SelectSuggestHandler.extend({
        emailExpression: /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/,
        validateMirroring: function(query) {
            return this.options.freeEmailInput && query.length > 0 && this.emailExpression.test(query)
        }
    });
    AJS.StaticDescriptorFetcher = Class.extend({
        init: function(options, model) {
            this.model = model
        },
        execute: function(query) {
            var deferred = jQuery.Deferred();
            deferred.resolve(this.model.getUnSelectedDescriptors(), query);
            return deferred
        }
    });
    AJS.AjaxDescriptorFetcher = Class.extend({
        init: function(options) {
            this.options = _.extend({
                keyInputPeriod: 75,
                minQueryLength: 1,
                data: {},
                dataType: "json"
            }, options)
        },
        makeRequest: function(deferred, ajaxOptions, query) {
            ajaxOptions.complete = _.bind(function() {
                this.outstandingRequest = null
            }, this);
            ajaxOptions.success = _.bind(function(data) {
                if (ajaxOptions.query) {
                    deferred.resolve(ajaxOptions.formatResponse(data, query))
                } else {
                    this.lastResponse = ajaxOptions.formatResponse(data, query);
                    deferred.resolve(this.lastResponse)
                }
            }, this);
            var originalError = ajaxOptions.error;
            ajaxOptions.error = function(xhr, textStatus, msg, smartAjaxResult) {
                if (!smartAjaxResult.aborted) {
                    if (originalError) {
                        originalError.apply(this, arguments)
                    } else {
                        alert(JIRA.SmartAjax.buildSimpleErrorContent(smartAjaxResult, {
                            alert: true
                        }))
                    }
                }
            }
            ;
            this.outstandingRequest = JIRA.SmartAjax.makeRequest(ajaxOptions)
        },
        incubateRequest: function(deferred, ajaxOptions, query, force) {
            clearTimeout(this.queuedRequest);
            if (force && this.outstandingRequest) {
                this.outstandingRequest.abort();
                this.outstandingRequest = null
            }
            if (!ajaxOptions.query && this.lastResponse) {
                deferred.resolve(this.lastResponse)
            } else {
                if (!this.outstandingRequest) {
                    if (typeof ajaxOptions.data === "function") {
                        ajaxOptions.data = ajaxOptions.data(query)
                    } else {
                        ajaxOptions.data.query = query
                    }
                    if (typeof ajaxOptions.url === "function") {
                        ajaxOptions.url = ajaxOptions.url()
                    }
                    if ((query.length >= parseInt(ajaxOptions.minQueryLength, 10)) || force) {
                        this.makeRequest(deferred, ajaxOptions, query)
                    } else {
                        deferred.resolve()
                    }
                } else {
                    this.queuedRequest = setTimeout(_.bind(function() {
                        this.incubateRequest(deferred, ajaxOptions, query, true)
                    }, this), ajaxOptions.keyInputPeriod)
                }
            }
            return deferred
        },
        execute: function(query, force) {
            var deferred = jQuery.Deferred();
            deferred.fail(_.bind(function() {
                clearTimeout(this.queuedRequest);
                if (this.outstandingRequest) {
                    this.outstandingRequest.abort()
                }
            }, this));
            this.incubateRequest(deferred, _.extend({}, this.options), query, force);
            return deferred
        }
    });
    AJS.MixedDescriptorFetcher = Class.extend({
        init: function(options, model) {
            this.ajaxFetcher = new AJS.AjaxDescriptorFetcher(options.ajaxOptions);
            this.options = options;
            this.model = model
        },
        execute: function(query, force) {
            var deferred = jQuery.Deferred();
            if (query.length >= 1) {
                var ajaxDeferred = this.ajaxFetcher.execute(query, force).done(_.bind(function(suggestions) {
                    var descriptors = [].concat(this.model.getAllDescriptors()).concat(suggestions);
                    deferred.resolve(descriptors, query)
                }, this));
                deferred.fail(function() {
                    ajaxDeferred.reject()
                })
            } else {
                deferred.resolve(this.model.getUnSelectedDescriptors(), query)
            }
            return deferred
        }
    });
    AJS.FuncDescriptorFetcher = Class.extend({
        init: function(options) {
            this.options = options
        },
        execute: function(query) {
            var deferred = jQuery.Deferred();
            deferred.resolve(this.options.suggestions(query), query);
            return deferred
        }
    })
}
)();
AJS.QueryableDropdownSelect = AJS.Control.extend({
    INVALID_KEYS: {
        "Shift": true,
        "Esc": true,
        "Right": true
    },
    init: function(options) {
        this.suggestionsVisible = false;
        this._setOptions(options);
        this._createFurniture();
        this._createDropdownController();
        this._createSuggestionsController();
        this._createListController();
        this._assignEventsToFurniture();
        if (this.options.width) {
            this.setFieldWidth(this.options.width)
        }
        if (this.options.loadOnInit) {
            this.requestSuggestions(true)
        }
    },
    _createDropdownController: function() {
        var instance = this;
        if (this.options.dropdownController) {
            this.dropdownController = this.options.dropdownController
        } else {
            this.dropdownController = AJS.InlineLayer.create({
                offsetTarget: this.$field,
                width: this.$field.innerWidth(),
                content: this.options.element
            })
        }
        this.dropdownController.onhide(function() {
            instance.hideSuggestions()
        })
    },
    _createSuggestionsController: function() {
        this.suggestionsHandler = this.options.suggestionsHandler ? new this.options.suggestionsHandler(this.options) : new AJS.DefaultSuggestHandler(this.options)
    },
    _createListController: function() {
        var instance = this;
        this.listController = new AJS.List({
            containerSelector: this.options.element,
            groupSelector: "ul.aui-list-section",
            matchingStrategy: this.options.matchingStrategy,
            eventTarget: this.$field,
            selectionHandler: function() {
                instance.$field.val("Loading...").css("color", "#999");
                instance.hideSuggestions();
                return true
            }
        })
    },
    setFieldWidth: function(width) {
        this.$container.css({
            width: width,
            minWidth: width
        })
    },
    showErrorMessage: function(value) {
        var $container = this.$container.parent(".field-group");
        this.hideErrorMessage();
        this.$errorMessage.text(AJS.format(this.options.errorMessage, value || this.getQueryVal()));
        if ($container.length === 1) {
            $container.append(this.$errorMessage);
            return
        }
        if ($container.length === 0) {
            $container = this.$container.parent(".frother-control-renderer")
        }
        if ($container.length === 1) {
            this.$errorMessage.prependTo($container);
            return
        }
        if ($container.length === 0) {
            this.$container.parent().append(this.$errorMessage)
        }
    },
    hideErrorMessage: function() {
        if (this.$errorMessage) {
            this.$errorMessage.remove()
        }
        this.$container.parent().find(".error").remove()
    },
    _getDefaultOptions: function() {
        return {
            id: "default",
            keyInputPeriod: 75,
            localListLiveUpdateLimit: 25,
            localListLiveUpdateDelay: 150
        }
    },
    _createFurniture: function() {
        this.$container = this._render("container").insertBefore(this.options.element);
        this.$field = this._render("field").appendTo(this.$container);
        this.$dropDownIcon = this._render("dropdownAndLoadingIcon", this._hasDropdownButton()).appendTo(this.$container);
        if (this.options.overlabel) {
            this.$overlabel = this._render("overlabel").insertBefore(this.$field);
            this.$overlabel.overlabel()
        }
    },
    _hasDropdownButton: function() {
        return this.options.showDropdownButton || this.options.ajaxOptions && this.options.ajaxOptions.minQueryLength === 0
    },
    _assignEventsToFurniture: function() {
        var instance = this;
        this._assignEvents("ignoreBlurElement", this.dropdownController.$layer);
        this._assignEvents("container", this.$container);
        if (this._hasDropdownButton()) {
            this._assignEvents("ignoreBlurElement", this.$dropDownIcon);
            this._assignEvents("dropdownAndLoadingIcon", this.$dropDownIcon)
        }
        setTimeout(function() {
            instance._assignEvents("field", instance.$field);
            instance._assignEvents("keys", instance.$field)
        }, 15)
    },
    requestSuggestions: function(force) {
        var instance = this
          , deferred = jQuery.Deferred();
        this.outstandingRequest = this.suggestionsHandler.execute(this.getQueryVal(), force).done(function(descriptors, query) {
            if (query === instance.getQueryVal()) {
                deferred.resolve(descriptors, query)
            }
        });
        if (!this.outstandingRequest.isResolved()) {
            window.clearTimeout(this.loadingWait);
            this.loadingWait = window.setTimeout(function() {
                if (!instance.outstandingRequest.isResolved() && !instance.outstandingRequest.isRejected()) {
                    instance.showLoading()
                }
            }, 150);
            this.outstandingRequest.always(function() {
                instance.hideLoading()
            })
        }
        return deferred
    },
    showLoading: function() {
        this.$dropDownIcon.addClass("loading").removeClass("noloading");
        return this
    },
    hideLoading: function() {
        this.$dropDownIcon.removeClass("loading").addClass("noloading");
        return this
    },
    _setSuggestions: function(data) {
        this.suggestionsVisible = true;
        if (data) {
            this.dropdownController.show();
            this.dropdownController.setWidth(this.$field.innerWidth());
            this.dropdownController.setPosition();
            this.listController.generateListFromJSON(data, this.getQueryVal());
            this.listController.enable()
        } else {
            this.hideSuggestions()
        }
        this.$container.attr("data-query", this.getQueryVal())
    },
    disable: function() {
        if (!this.disabled) {
            this.$container.addClass("aui-disabled");
            this.$disabledBlanket = this._render("disabledBlanket").appendTo(this.$container);
            this.$field.attr("disabled", true);
            this.dropdownController.hide();
            this.disabled = true
        }
    },
    enable: function() {
        if (this.disabled) {
            this.$container.removeClass("aui-disabled");
            this.$disabledBlanket.remove();
            this.$field.attr("disabled", false);
            this.disabled = false
        }
    },
    getQueryVal: function() {
        return AJS.$.trim(this.$field.val())
    },
    _isValidInput: function(event) {
        return this.$field.is(":visible") && !(event.type === "aui:keydown" && this.INVALID_KEYS[event.key])
    },
    _handleCharacterInput: function(force) {
        var queryLength = this.getQueryVal().length;
        if (queryLength >= 1 || force) {
            this.requestSuggestions(force).done(_.bind(function(suggestions) {
                this._setSuggestions(suggestions)
            }, this))
        } else {
            this.hideSuggestions()
        }
    },
    _handleDown: function(e) {
        if (!this.suggestionsVisible) {
            this.listController._latestQuery = "";
            this._handleCharacterInput(true)
        }
        e.preventDefault()
    },
    _rejectPendingRequests: function() {
        if (this.outstandingRequest) {
            this.outstandingRequest.reject()
        }
    },
    hideSuggestions: function() {
        if (!this.suggestionsVisible) {
            return
        }
        this._rejectPendingRequests();
        this.suggestionsVisible = false;
        this.$dropDownIcon.addClass("noloading");
        this.dropdownController.hide();
        this.listController.disable()
    },
    _deactivate: function() {
        this.hideSuggestions()
    },
    _handleEscape: function(e) {
        if (this.suggestionsVisible) {
            e.stopPropagation();
            if (e.type === "keyup") {
                this.hideSuggestions();
                if (AJS.$.browser.msie) {
                    this.$field.focus()
                }
            }
        }
    },
    acceptFocusedSuggestion: function() {
        var focused = this.listController.getFocused();
        if (focused.length !== 0 && focused.is(":visible")) {
            this.listController._acceptSuggestion(focused)
        }
    },
    keys: {
        "Down": function(e) {
            if (this._hasDropdownButton()) {
                this._handleDown(e)
            }
        },
        "Up": function(e) {
            e.preventDefault()
        },
        "Return": function(e) {
            e.preventDefault()
        }
    },
    onEdit: function() {
        this._handleCharacterInput()
    },
    _events: {
        dropdownAndLoadingIcon: {
            click: function(e) {
                if (this.suggestionsVisible) {
                    this.hideSuggestions()
                } else {
                    this._handleDown(e);
                    this.$field.focus()
                }
                e.stopPropagation()
            }
        },
        container: {
            disable: function() {
                this.disable()
            },
            enable: function() {
                this.enable()
            }
        },
        field: {
            blur: function() {
                if (!this.ignoreBlurEvent) {
                    this._deactivate()
                } else {
                    this.ignoreBlurEvent = false
                }
            },
            click: function(e) {
                e.stopPropagation()
            },
            "keydown keyup": function(e) {
                if (e.keyCode === 27) {
                    this._handleEscape(e)
                }
            }
        },
        keys: {
            "aui:keydown input": function(event) {
                this._handleKeyEvent(event)
            }
        },
        ignoreBlurElement: {
            mousedown: function(e) {
                if (jQuery.browser.msie) {
                    var targetIsDropdownController = (jQuery(e.target)[0] == jQuery(this.dropdownController.$layer)[0]);
                    if (targetIsDropdownController) {
                        this.ignoreBlurEvent = true
                    }
                    if (typeof document.addEventListener === "undefined") {
                        if (!targetIsDropdownController) {
                            var field = this.$field.get(0);
                            function onbeforedeactivate(event) {
                                event.returnValue = false
                            }
                            field.attachEvent("onbeforedeactivate", onbeforedeactivate);
                            setTimeout(function() {
                                field.detachEvent("onbeforedeactivate", onbeforedeactivate)
                            }, 0)
                        }
                        return
                    }
                }
                e.preventDefault()
            }
        }
    },
    _renders: {
        disabledBlanket: function() {
            return AJS.$("<div class='aui-disabled-blanket' />").height(this.$field.outerHeight())
        },
        overlabel: function() {
            return AJS.$("<span id='" + this.options.id + "-overlabel' data-target='" + this.options.id + "-field' class='overlabel'>" + this.options.overlabel + "</span>")
        },
        field: function() {
            return jQuery("<input>").attr({
                "autocomplete": "off",
                "class": "text",
                "id": this.options.id + "-field",
                "type": "text"
            })
        },
        container: function() {
            return AJS.$("<div class='queryable-select' id='" + this.options.id + "-queryable-container' />")
        },
        dropdownAndLoadingIcon: function(showDropdown) {
            var $element = AJS.$('<span class="icon noloading"><span>More</span></span>');
            if (showDropdown) {
                $element.addClass("drop-menu")
            }
            return $element
        },
        suggestionsContainer: function() {
            return AJS.$("<div class='aui-list' id='" + this.options.id + "' tabindex='-1'></div>")
        }
    }
});
AJS.namespace("AJS.QueryableDropdown", null, AJS.QueryableDropdownSelect);
AJS.MultiSelect = AJS.QueryableDropdownSelect.extend({
    init: function(options) {
        if (this._setOptions(options) === this.INVALID) {
            return this.INVALID
        }
        jQuery.extend(this, AJS.SelectHelper);
        this.options.element = AJS.$(this.options.element);
        this.lozengeGroup = this.options.itemGroup;
        this._createSelectModel();
        if (this.options.disabled) {
            this._createFurniture(true);
            return this
        }
        this._createFurniture();
        this._createSuggestionsController();
        this._createListController();
        this._createDropdownController();
        this._assignEventsToFurniture();
        this._setInitState();
        if (this.options.width) {
            this.setFieldWidth(this.options.width)
        }
        this.model.$element.trigger("initialized", [this])
    },
    _createSelectModel: function() {
        this.model = new AJS.SelectModel({
            element: this.options.element,
            removeOnUnSelect: this.options.removeOnUnSelect
        })
    },
    _setInitState: function() {
        this._restoreSelectedOptions();
        if (this.options.inputText) {
            this.$field.val(this.options.inputText);
            this.updateFreeInputVal()
        }
    },
    _createListController: function() {
        var instance = this;
        this.listController = new AJS.List({
            containerSelector: AJS.$(".aui-list", this.$container),
            groupSelector: "ul.aui-list-section",
            matchingStrategy: this.options.matchingStrategy,
            maxInlineResultsDisplayed: this.options.maxInlineResultsDisplayed,
            selectionHandler: function(e) {
                instance._selectionHandler(this.getFocused(), e);
                return false
            }
        })
    },
    _createDropdownController: function() {
        var instance = this;
        this.dropdownController = AJS.InlineLayer.create({
            alignment: AJS.LEFT,
            offsetTarget: this.$field,
            maxInlineResultsDisplayed: this.options.maxInlineResultsDisplayed,
            content: AJS.$(".aui-list", this.$container)
        });
        if (this.options.layerId) {
            this.dropdownController.options.id = this.options.layerId
        }
        this.dropdownController.onhide(function() {
            instance.hideSuggestions()
        })
    },
    _createSuggestionsController: function() {
        this.suggestionsHandler = this.options.suggestionsHandler ? new this.options.suggestionsHandler(this.options,this.model) : new AJS.SelectSuggestHandler(this.options,this.model)
    },
    _getDefaultOptions: function() {
        return AJS.$.extend(true, this._super(), {
            minRoomForText: 50,
            errorMessage: "The value {0} is invalid.",
            showDropdownButton: true,
            itemGroup: new AJS.MultiSelect.LozengeGroup(),
            suggestionsHandler: AJS.SelectSuggestHandler,
            itemBuilder: function(descriptor) {
                return new AJS.MultiSelect.Lozenge({
                    label: descriptor.label(),
                    title: descriptor.title(),
                    container: this.$selectedItemsContainer
                })
            }
        })
    },
    _createFurniture: function(disabled) {
        var id = this.model.$element.attr("id");
        if (this.model.$element.prev().hasClass("ajs-multi-select-placeholder")) {
            this.model.$element.prev().remove()
        }
        if (disabled) {
            this.model.$element.replaceWith(this._render("disableSelectField", id))
        } else {
            this.$container = this._render("container", id);
            this.$field = this._render("field", id).appendTo(this.$container);
            this.$container.append(this._render("suggestionsContainer", id));
            this.$container.insertBefore(this.model.$element);
            this.$dropDownIcon = this._render("dropdownAndLoadingIcon", this._hasDropdownButton()).appendTo(this.$container);
            this.$errorMessage = this._render("errorMessage", id);
            this.$selectedItemsWrapper = this._render("selectedItemsWrapper").appendTo(this.$container);
            this.$selectedItemsContainer = this._render("selectedItemsContainer").appendTo(this.$selectedItemsWrapper)
        }
    },
    _assignEventsToFurniture: function() {
        var instance = this;
        this._super();
        this._assignEvents("body", document);
        this._assignEvents("selectedItemsContainer", this.$selectedItemsContainer);
        this._assignEvents("lozengeGroup", this.lozengeGroup);
        this.model.$element.bind("updateOptions", function(e) {
            instance.options = jQuery.extend(true, instance.options, instance.model.$element.getOptionsFromAttributes());
            instance._createSuggestionsController()
        }).bind("selectOption", function(e, descriptor) {
            instance.addItem(descriptor)
        }).bind("removeOption", function(e, descriptor) {
            instance.removeItem(descriptor)
        }).bind("clearSelection", function() {
            instance.clearLozenges()
        })
    },
    _getUserInputValue: function() {
        return this.options.uppercaseUserEnteredOnSelect ? this.$field.val().toUpperCase() : this.$field.val()
    },
    clear: function() {
        this.$field.val("");
        this.hideSuggestions();
        this.clearSelection()
    },
    clearSelection: function() {
        this.model.setAllUnSelected();
        this.updateItemsIndent();
        this.model.$element.trigger("unselect", [this])
    },
    clearLozenges: function() {
        this.lozengeGroup.removeAllItems();
        this.clear()
    },
    removeItem: function(descriptor) {
        var instance = this;
        this.model.setUnSelected(descriptor);
        window.setTimeout(function() {
            instance.updateItemsIndent()
        }, 0);
        this.model.$element.trigger("unselect", [descriptor, this])
    },
    _restoreSelectedOptions: function() {
        var instance = this;
        AJS.$.each(this.model.getDisplayableSelectedDescriptors(), function() {
            instance.addItem(this, true)
        });
        this.updateItemsIndent()
    },
    _shouldEnableLozengeGroup: function() {
        return this.lozengeGroup.items.length > 0 && this.lozengeGroup.index < 0 && (this.$field.val().length === 0 || this.getCaret(this.$field[0]) === 0)
    },
    _handleBackSpace: function() {
        var instance = this;
        if (this._shouldEnableLozengeGroup()) {
            setTimeout(function() {
                instance.lozengeGroup.shiftFocus(-1)
            }, 0)
        }
    },
    _handleLeft: function() {
        if (this._shouldEnableLozengeGroup()) {
            var instance = this;
            setTimeout(function() {
                instance.lozengeGroup.shiftFocus(-1)
            }, 0)
        }
    },
    updateItemsIndent: function() {
        var lineHeight = 20;
        var inputIndent = this._getInputIndent();
        var newHeight = inputIndent.top + lineHeight;
        if (AJS.DarkFeatures.isEnabled("com.atlassian.jira.config.PDL")) {
            newHeight += 6
        }
        this.$field.css({
            paddingTop: inputIndent.top,
            paddingLeft: inputIndent.left
        });
        this.$field.css({
            height: newHeight
        });
        if (this.currentTopOffset && this.currentTopOffset !== inputIndent.top) {
            this.$container.trigger("multiSelectHeightUpdated", [this])
        }
        if (AJS.$.browser.msie) {
            this.$field.val(this.$field.val() + " ");
            this.$field.val(this.$field.val().replace(/\s$/, ""))
        }
        this.currentTopOffset = inputIndent.top
    },
    _isItemPresent: function(descriptor) {
        var duplicate = false;
        var value = descriptor.value();
        AJS.$.each(this.lozengeGroup.items, function() {
            if (this.value === value) {
                duplicate = true;
                return false
            }
        });
        return duplicate
    },
    addItem: function(descriptor, initialize) {
        if (descriptor instanceof AJS.ItemDescriptor) {
            descriptor = AJS.copyObject(descriptor.allProperties(), false)
        }
        descriptor.value = AJS.$.trim(descriptor.value);
        descriptor.label = AJS.$.trim(descriptor[this.options.itemAttrDisplayed]) || descriptor.value;
        descriptor.title = AJS.$.trim(descriptor.title) || descriptor.label;
        descriptor = new AJS.ItemDescriptor(descriptor);
        if (this._isItemPresent(descriptor)) {
            return
        }
        var lozenge = this.options.itemBuilder.call(this, descriptor);
        this.lozengeGroup.addItem(lozenge);
        this._assignEvents("lozenge", lozenge);
        this.model.setSelected(descriptor);
        this.updateItemsIndent();
        this.dropdownController.setPosition();
        lozenge.value = descriptor.value();
        if (!initialize) {
            this.model.$element.trigger("selected", [descriptor, this])
        }
    },
    _addMultipleItems: function(items, removeOnUnSelect) {
        var instance = this;
        AJS.$.each(items, function(i, descriptor) {
            if (removeOnUnSelect) {
                descriptor.removeOnUnSelect = true
            }
            instance.addItem(descriptor)
        })
    },
    _getInputIndent: function() {
        var top, left, indent, iconArea = 21, paddingLeft = 2, paddingTop = 3, lastLozengeIndex = this.lozengeGroup.items.length - 1, $last;
        if (AJS.DarkFeatures.isEnabled("com.atlassian.jira.config.PDL")) {
            paddingLeft = 5;
            paddingTop = 4
        }
        indent = {
            top: paddingTop,
            left: paddingLeft
        };
        if (lastLozengeIndex >= 0) {
            $last = this.lozengeGroup.items[lastLozengeIndex].$lozenge;
            top = $last.prop("offsetTop");
            left = $last.prop("offsetLeft") + $last.outerWidth();
            if (left > this.$container.width() - iconArea - this.options.minRoomForText) {
                top += $last.prop("offsetHeight");
                left = 0
            }
            indent.top += top;
            indent.left += left
        }
        return indent
    },
    _selectionHandler: function(selected, e) {
        var instance = this;
        selected.each(function() {
            instance.addItem(AJS.$.data(this, "descriptor"))
        });
        this.$field.val("").focus().scrollIntoView({
            margin: 20
        });
        this.hideSuggestions();
        this.hideErrorMessage();
        this.updateFreeInputVal();
        this.model.$element.trigger("change");
        e.preventDefault()
    },
    isValidItem: function(itemValue) {
        var suggestedItemDescriptor = this.listController.getFocused().data("descriptor");
        if (!suggestedItemDescriptor) {
            return false
        }
        itemValue = itemValue.toLowerCase();
        return itemValue === AJS.$.trim(suggestedItemDescriptor.label.toLowerCase()) || itemValue === AJS.$.trim(suggestedItemDescriptor.value.toLowerCase())
    },
    handleFreeInput: function() {
        var value = AJS.$.trim(this.$field.val()), descriptor;
        if (value) {
            descriptor = this.model.getDescriptor(value);
            if (descriptor) {
                this.addItem(descriptor);
                this.model.$element.trigger("change");
                this.$field.val("");
                this.hideErrorMessage()
            } else {
                if (!this.options.submitInputVal) {
                    this.showErrorMessage(value)
                }
            }
        }
    },
    submitForm: function() {
        if (this.$field.val().length === 0 && !this.suggestionsVisible) {
            AJS.$(this.$field[0].form).submit()
        }
    },
    _handleCharacterInput: function(ignoreBuffer, ignoreQueryLength) {
        this._super(ignoreBuffer, ignoreQueryLength);
        this.updateFreeInputVal()
    },
    _deactivate: function() {
        this.handleFreeInput();
        this.lozengeGroup.trigger("blur");
        this.hideSuggestions()
    },
    keys: {
        "Left": function() {
            this._handleLeft()
        },
        "Backspace": function() {
            this._handleBackSpace()
        },
        "Return": function(e) {
            this.submitForm();
            e.preventDefault()
        },
        "Tab": function(e) {
            this.acceptFocusedSuggestion()
        }
    },
    _events: {
        body: {
            tabSelect: function() {
                if (this.$field.is(":visible")) {
                    this.updateItemsIndent()
                }
            },
            bulkTabSelect: function() {
                if (this.$field.is(":visible")) {
                    this.updateItemsIndent()
                }
            },
            multiSelectRevealed: function() {
                if (this.$field.is(":visible")) {
                    this.updateItemsIndent()
                }
            }
        },
        field: {
            blur: function() {
                if (!this.ignoreBlurEvent) {
                    this._deactivate()
                } else {
                    this.ignoreBlurEvent = false;
                    this.$field.focus()
                }
            },
            "aui:keydown aui:keypress": function(event) {
                if (this.lozengeGroup.index >= 0) {
                    if (event.key in this.lozengeGroup.keys) {
                        event.preventDefault()
                    } else {
                        if (event.key === "Return") {
                            this.submitForm();
                            event.preventDefault()
                        } else {
                            this.onEdit(event);
                            this.lozengeGroup.trigger("blur")
                        }
                    }
                }
            },
            click: function() {
                this.lozengeGroup.trigger("blur");
                this.$field.focus()
            }
        },
        lozengeGroup: {
            focus: function() {
                this.$field.focus();
                this.hideSuggestions();
                this._unassignEvents("keys", this.$field)
            },
            blur: function() {
                this._assignEvents("keys", this.$field);
                if (this.$field.val()) {
                    this._handleCharacterInput()
                }
            }
        },
        lozenge: {
            remove: function(event) {
                this.removeItem(this.model.getDescriptor(event.target.value));
                this.$field.focus()
            }
        },
        selectedItemsContainer: {
            click: function(event) {
                if (event.target === event.currentTarget) {
                    this.lozengeGroup.trigger("blur");
                    this.$field.focus()
                }
            }
        }
    },
    _renders: {
        errorMessage: function(idPrefix) {
            return AJS.$('<div class="error" />').attr("id", idPrefix + "-error")
        },
        selectedItemsWrapper: function() {
            return AJS.$('<div class="representation"></div>')
        },
        selectedItemsContainer: function() {
            return AJS.$('<ul class="items" />')
        },
        field: function(idPrefix) {
            if (AJS.DarkFeatures.isEnabled("com.atlassian.jira.config.PDL")) {
                return AJS.$('<textarea autocomplete="off" id="' + idPrefix + '-textarea" class="text long-field" wrap="off"></textarea>')
            }
            return AJS.$('<textarea autocomplete="off" id="' + idPrefix + '-textarea" class="aui-field" wrap="off"></textarea>')
        },
        disableSelectField: function(id) {
            return AJS.$("<input type='text' class='long-field' name='" + id + "' id='" + id + "' />")
        },
        container: function(idPrefix) {
            if (AJS.DarkFeatures.isEnabled("com.atlassian.jira.config.PDL")) {
                return AJS.$('<div class="jira-multi-select long-field" id="' + idPrefix + '-multi-select">')
            }
            return AJS.$('<div class="multi-select" id="' + idPrefix + '-multi-select">')
        },
        suggestionsContainer: function(idPrefix) {
            return AJS.$('<div class="aui-list" id="' + idPrefix + '-suggestions" tabindex="-1"></div>')
        }
    }
});
AJS.MultiSelect.Lozenge = AJS.Control.extend({
    init: function(options) {
        this._setOptions(options);
        this.$lozenge = this._render("lozenge");
        this.$removeButton = this._render("removeButton");
        this._assignEvents("instance", this);
        this._assignEvents("lozenge", this.$lozenge);
        this._assignEvents("removeButton", this.$removeButton);
        this.$removeButton.appendTo(this.$lozenge);
        this.$lozenge.appendTo(this.options.container)
    },
    _getDefaultOptions: function() {
        return {
            label: null,
            title: null,
            container: null,
            focusClass: "focused"
        }
    },
    _renders: {
        "lozenge": function() {
            var label = AJS.escapeHtml(this.options.label);
            var title = AJS.escapeHtml(this.options.title) || "";
            return AJS.$('<li class="item-row" title="' + title + '"><button type="button" tabindex="-1" class="value-item"><span><span class="value-text">' + label + "</span></span></button></li>")
        },
        "removeButton": function() {
            return AJS.$('<em class="item-delete" title="' + AJS.escapeHtml("Remove") + '"></em>')
        }
    },
    _events: {
        "instance": {
            "focus": function() {
                this.$lozenge.addClass(this.options.focusClass)
            },
            "blur": function() {
                this.$lozenge.removeClass(this.options.focusClass)
            },
            "remove": function() {
                this.$lozenge.remove()
            }
        },
        "lozenge": {
            "click": function() {
                this.trigger("focus")
            }
        },
        "removeButton": {
            "click": function() {
                this.trigger("remove")
            }
        }
    }
});
AJS.MultiSelect.LozengeGroup = AJS.Group.extend({
    keys: {
        "Left": function() {
            if (this.index > 0) {
                this.shiftFocus(-1)
            }
        },
        "Right": function() {
            if (this.index === this.items.length - 1) {
                this.items[this.index].trigger("blur")
            } else {
                this.shiftFocus(1)
            }
        },
        "Backspace": function() {
            var index = this.index;
            if (index > 0) {
                this.shiftFocus(-1)
            } else {
                if (this.items.length > 1) {
                    this.shiftFocus(1)
                }
            }
            this.items[index].trigger("remove")
        },
        "Del": function() {
            var index = this.index;
            if (index + 1 < this.items.length) {
                this.shiftFocus(1)
            }
            this.items[index].trigger("remove")
        }
    }
});
JIRA.IssuePicker = AJS.MultiSelect.extend({
    _formatResponse: function(response) {
        var ret = []
          , canonicalBaseUrl = (function() {
            var uri = parseUri(window.location);
            return uri.protocol + "://" + uri.authority
        }
        )();
        if (response && response.sections) {
            AJS.$(response.sections).each(function(i, section) {
                var groupDescriptor = new AJS.GroupDescriptor({
                    weight: i,
                    label: section.label,
                    description: section.sub
                });
                if (section.issues && section.issues.length > 0) {
                    AJS.$(section.issues).each(function() {
                        groupDescriptor.addItem(new AJS.ItemDescriptor({
                            highlighted: true,
                            value: this.key,
                            label: this.key + " - " + this.summaryText,
                            icon: this.img ? canonicalBaseUrl + contextPath + this.img : null,
                            html: this.keyHtml + " - " + this.summary
                        }))
                    })
                }
                ret.push(groupDescriptor)
            })
        }
        return ret
    },
    _getDefaultOptions: function() {
        return AJS.$.extend(true, this._super(), {
            ajaxOptions: {
                formatResponse: this._formatResponse
            }
        })
    },
    _launchPopup: function() {
        function getWithDefault(value, def) {
            if (typeof value == "undefined" || value == null) {
                return def
            } else {
                return value
            }
        }
        var url, urlParam, vWinUsers, options, instance = this;
        JIRA.IssuePicker.callback = function(items) {
            if (typeof items === "string") {
                items = JSON.parse(items)
            }
            instance._addMultipleItems(items, true);
            instance.$field.focus()
        }
        ;
        options = this.options.ajaxOptions.data;
        url = contextPath + "/secure/popups/IssuePicker.jspa?";
        urlParam = {
            singleSelectOnly: "false",
            decorator: "popup",
            currentIssue: options.currentIssueKey || "",
            showSubTasks: getWithDefault(options.showSubTasks, false),
            showSubTasksParent: getWithDefault(options.showSubTaskParent, false)
        };
        if (options.currentProjectId) {
            urlParam["currentProjectId"] = options.currentProjectId
        }
        url += AJS.$.param(urlParam);
        vWinUsers = window.open(url, "IssueSelectorPopup", "status=no,resizable=yes,top=100,left=200,width=" + this.options.popupWidth + ",height=" + this.options.popupHeight + ",scrollbars=yes,resizable");
        vWinUsers.opener = self;
        vWinUsers.focus()
    },
    _createFurniture: function(disabled) {
        var $popupLink;
        this._super(disabled);
        $popupLink = this._render("popupLink");
        this._assignEvents("popupLink", $popupLink);
        this.$container.addClass("jira-issue-picker");
        this.$container.addClass("hasIcon");
        this.$container.after($popupLink)
    },
    handleFreeInput: function() {
        var values = this.$field.val().toUpperCase().match(/\S+/g);
        if (values) {
            this._addMultipleItems(jQuery.map(values, function(value) {
                return {
                    value: value,
                    label: value
                }
            }))
        }
        this.$field.val("")
    },
    _events: {
        popupLink: {
            click: function(e) {
                this._launchPopup();
                e.preventDefault()
            }
        }
    },
    _renders: {
        popupLink: function() {
            return AJS.$("<a class='issue-picker-popup' />").attr({
                href: "#",
                title: this.options.popupLinkMessage
            }).text("" + this.options.popupLinkMessage + "")
        }
    }
});
AJS.namespace("jira.issuepicker", null, JIRA.IssuePicker);
AJS.namespace("AJS.IssuePicker", null, JIRA.IssuePicker);
JIRA.LabelPicker = AJS.MultiSelect.extend({
    _getDefaultOptions: function() {
        return AJS.$.extend(true, this._super(), {
            ajaxOptions: {
                url: contextPath + "/includes/js/ajs/layer/labeldata.js",
                query: true,
                formatResponse: this._formatResponse,
            },
            removeDuplicates: true,
            removeOnUnSelect: true,
            userEnteredOptionsMsg: "New Label"
        })
    },
    isValidItem: function(itemValue) {
        return !/\s/.test(itemValue)
    },
    _handleServerSuggestions: function(data) {
        if (data && data.token) {
            if (AJS.$.trim(this.$field.val()) !== data.token) {
                return
            }
        }
        this._super(data)
    },
    _handleSpace: function() {
        if (AJS.$.trim(this.$field.val()) !== "") {
            if (this.handleFreeInput()) {
                this.hideSuggestions()
            }
        }
    },
    keys: {
        "Spacebar": function(event) {
            this._handleSpace();
            event.preventDefault()
        }
    },
    _formatResponse: function(data) {
        var optgroup = new AJS.GroupDescriptor({
            label: "Suggestions",
            type: "optgroup",
            styleClass: "labels-suggested"
        });
        if (data && data.suggestions) {
            AJS.$.each(data.suggestions, function() {
                optgroup.addItem(new AJS.ItemDescriptor({
                    value: this.label,
                    label: this.label,
                    html: this.html,
                    highlighted: true
                }))
            })
        }
        return [optgroup]
    },
    handleFreeInput: function() {
        var values = AJS.$.trim(this.$field.val()).match(/\S+/g);
        if (values) {
            for (var value, i = 0; value = values[i]; i++) {
                this.addItem({
                    value: value,
                    label: value
                })
            }
            this.model.$element.trigger("change")
        }
        this.$field.val("")
    }
});
AJS.namespace("AJS.LabelPicker", null, JIRA.LabelPicker);
AJS.SingleSelect = AJS.QueryableDropdownSelect.extend({
    init: function(options) {
        if (this._setOptions(options) === this.INVALID) {
            return this.INVALID
        }
        this._createSelectModel();
        if (this.options.disabled) {
            this._createFurniture(true);
            return this
        }
        jQuery.extend(this, AJS.SelectHelper);
        this._createFurniture();
        this._createSuggestionsController();
        this._createDropdownController();
        this._createListController();
        this._assignEventsToFurniture();
        this._setInitState();
        if (this.options.width) {
            this.setFieldWidth(this.options.width)
        }
        if (this.$overlabel) {
            this.$overlabel.overlabel(this.$field)
        }
        this.model.$element.trigger("initialized", [this])
    },
    _setInitState: function() {
        if (this.options.editValue) {
            this._setEditingMode();
            this.$field.val(this.options.editValue)
        } else {
            if (this.getSelectedDescriptor()) {
                this.setSelection(this.getSelectedDescriptor())
            } else {
                this._setEditingMode();
                if (this.options.inputText) {
                    this.$field.val(this.options.inputText)
                }
            }
        }
    },
    _createSelectModel: function() {
        this.model = new AJS.SelectModel({
            element: this.options.element,
            removeOnUnSelect: this.options.removeOnUnSelect
        })
    },
    _createDropdownController: function() {
        this.dropdownController = AJS.InlineLayer.create({
            alignment: AJS.LEFT,
            offsetTarget: this.$field,
            content: AJS.$(".aui-list", this.$container),
            setMaxHeightToWindow: this.options.setMaxHeightToWindow,
            minHeight: this.options.minHeight
        })
    },
    _createSuggestionsController: function() {
        this.suggestionsHandler = this.options.suggestionsHandler ? new this.options.suggestionsHandler(this.options,this.model) : new AJS.SelectSuggestHandler(this.options,this.model)
    },
    _assignEventsToFurniture: function() {
        var instance = this;
        this._super();
        this.model.$element.bind("reset", function() {
            var selectedDescriptor = instance.getSelectedDescriptor();
            if (selectedDescriptor) {
                instance.setSelection(instance.getSelectedDescriptor())
            }
        }).bind("set-selection-value", function(e, value) {
            instance._setDescriptorWithValue(value)
        })
    },
    setFieldWidth: function(width) {
        this.$container.css({
            width: width,
            minWidth: width
        });
        this.$field.width(width)
    },
    _createListController: function() {
        var instance = this;
        this.listController = new AJS.List({
            containerSelector: AJS.$(".aui-list", this.$container),
            groupSelector: "ul.aui-list-section",
            matchingStrategy: this.options.matchingStrategy,
            maxInlineResultsDisplayed: this.options.maxInlineResultsDisplayed,
            matchItemText: this.options.matchItemText,
            selectionHandler: function(e) {
                var selectedSuggestion = this.getFocused()
                  , selectedDescriptor = selectedSuggestion.data("descriptor");
                instance.setSelection(selectedDescriptor);
                instance.$field.select();
                e.preventDefault();
                return false
            }
        })
    },
    getSelectedDescriptor: function() {
        return this.model.getDisplayableSelectedDescriptors()[0]
    },
    getDisplayVal: function(descriptor) {
        return descriptor[this.options.itemAttrDisplayed || "label"]()
    },
    _getDefaultOptions: function() {
        return AJS.$.extend(true, this._super(), {
            errorMessage: "The value {0} is invalid.",
            revertOnInvalid: false,
            showDropdownButton: true
        })
    },
    _createFurniture: function(disabled) {
        var id = this.model.$element.attr("id");
        this.model.$element.data("aui-ss", true);
        this.$container = this._render("container", this.model.id);
        var containerClass = this.model.$element.data("container-class");
        if (containerClass) {
            this.$container.addClass(containerClass)
        }
        if (disabled) {
            var value = this.model.$element.val() && this.model.$element.val()[0];
            value = value || "";
            this.model.$element.replaceWith(this._render("disableSelectField", id, value))
        } else {
            var placeholder = this.model.getPlaceholder();
            this.$field = this._render("field", this.model.id, placeholder).appendTo(this.$container);
            this.$container.append(this._render("suggestionsContainer", this.model.id));
            this.$container.insertBefore(this.model.$element);
            this.$dropDownIcon = this._render("dropdownAndLoadingIcon", this._hasDropdownButton()).appendTo(this.$container);
            this.$errorMessage = this._render("errorMessage")
        }
    },
    getQueryVal: function() {
        if (this.$container.hasClass("aui-ss-editing")) {
            return jQuery.trim(this.$field.val())
        } else {
            return ""
        }
    },
    _setSuggestions: function(data, context) {
        if (data) {
            this._super(data, context);
            this.model.$element.trigger("suggestionsRefreshed", [this])
        } else {
            this.hideSuggestions()
        }
    },
    _setEditingMode: function() {
        this.$container.addClass("aui-ss-editing").removeClass("aui-ss-has-entity-icon");
        this.$field.css("paddingLeft")
    },
    _hasIcon: function() {
        var icon, selectedDescriptor = this.getSelectedDescriptor();
        if (selectedDescriptor) {
            icon = selectedDescriptor.icon();
            return icon && icon !== "none"
        }
    },
    _setReadOnlyMode: function() {
        this.$container.removeClass("aui-ss-editing");
        if (this._hasIcon()) {
            this.$container.addClass("aui-ss-has-entity-icon");
            if (jQuery.browser.msie && jQuery.browser.version > 8) {
                this.$container.append(this.$field.detach())
            }
        }
    },
    submitForm: function() {
        if (!this.suggestionsVisible) {
            this.handleFreeInput();
            AJS.$(this.$field[0].form).submit()
        }
    },
    selectValue: function(value) {
        this.listController.selectValue(value)
    },
    setSelection: function(descriptor) {
        if (typeof descriptor === "string") {
            descriptor = new AJS.ItemDescriptor({
                value: descriptor,
                label: descriptor
            })
        }
        this.removeFreeInputVal();
        this.$field.val(descriptor.fieldText() || this.getDisplayVal(descriptor));
        if (this.model.setSelected(descriptor)) {
            this.hideErrorMessage()
        }
        if (this._hasIcon()) {
            if (this.$entityIcon) {
                this.$entityIcon.remove()
            }
            this.$entityIcon = this._render("entityIcon", descriptor.icon()).appendTo(this.$container)
        }
        this._setReadOnlyMode();
        this.hideSuggestions();
        this.lastSelection = descriptor;
        this.model.$element.trigger("selected", [descriptor, this])
    },
    clear: function() {
        this.$field.val("");
        this.hideSuggestions();
        this.clearSelection()
    },
    clearSelection: function() {
        var instance = this;
        instance._setEditingMode();
        instance.model.setAllUnSelected();
        instance.model.$element.trigger("unselect", [this])
    },
    _handleServerSuggestions: function(data) {
        this.cleanUpModel();
        this._super(data)
    },
    cleanUpModel: function() {
        if (this.options.ajaxOptions.query) {
            this.model.clearUnSelected()
        }
    },
    onEdit: function() {
        if (this.getSelectedDescriptor()) {
            this.clearSelection()
        }
        this._super();
        this.model.$element.trigger("query")
    },
    handleFreeInput: function(value) {
        value = value || AJS.$.trim(this.$field.val());
        if (this.options.revertOnInvalid && !this.model.getDescriptor(value)) {
            this.setSelection(this.lastSelection)
        } else {
            if (this.$container.hasClass("aui-ss-editing")) {
                if (this._setDescriptorWithValue(value)) {
                    this.hideErrorMessage()
                } else {
                    if (!this.options.submitInputVal) {
                        this.showErrorMessage(value)
                    }
                }
            }
        }
    },
    _setDescriptorWithValue: function(value) {
        var descriptor = this.model.getDescriptor(value);
        if (descriptor) {
            this.setSelection(descriptor);
            return true
        }
        return false
    },
    _handleCharacterInput: function(force) {
        this._super(force);
        if (this.$container.hasClass("aui-ss-editing")) {
            this.updateFreeInputVal()
        }
    },
    _deactivate: function() {
        this.handleFreeInput();
        this.hideSuggestions()
    },
    keys: {
        "Return": function(e) {
            this.submitForm();
            e.preventDefault()
        },
        "Tab": function() {
            this.acceptFocusedSuggestion()
        }
    },
    _events: {
        field: {
            focus: function() {
                var instance = this;
                window.setTimeout(function() {
                    if (instance.$field.is(":focus")) {
                        instance.$field.select()
                    }
                }, 0)
            },
            click: function() {
                this._handleCharacterInput(true)
            }
        }
    },
    _renders: {
        label: function(label, id) {
            return AJS.$("<label />").attr("for", id).text(label).addClass("overlabel")
        },
        errorMessage: function() {
            return AJS.$('<div class="error" />')
        },
        entityIcon: function(url) {
            return AJS.$('<div class="aui-ss-entity-icon" />').css("backgroundImage", "url('" + url + "')")
        },
        field: function(idPrefix, placeholder) {
            var $field = AJS.$("<input>").attr({
                "autocomplete": "off",
                "class": "text aui-ss-field ajs-dirty-warning-exempt",
                "id": idPrefix + "-field"
            });
            if (placeholder) {
                $field.attr("placeholder", placeholder)
            }
            return $field
        },
        disableSelectField: function(id, value) {
            return AJS.$("<input type='text' class='long-field' value='" + value + "' name='" + id + "' id='" + id + "' />")
        },
        container: function(idPrefix) {
            return AJS.$('<div class="aui-ss" id="' + idPrefix + '-single-select">')
        },
        suggestionsContainer: function(idPrefix) {
            return AJS.$('<div class="aui-list" id="' + idPrefix + '-suggestions" tabindex="-1"></div>')
        },
        dropdownAndLoadingIcon: function(showDropdown) {
            var $element = AJS.$('<span class="icon aui-ss-icon noloading"><span>More</span></span>');
            if (showDropdown) {
                $element.addClass("drop-menu")
            }
            return $element
        }
    }
});
AJS.CheckboxMultiSelect = AJS.QueryableDropdownSelect.extend({
    init: function(options) {
        var instance = this;
        AJS.$.extend(this, AJS.SelectHelper);
        this._setOptions(options);
        var element = AJS.$(this.options.element);
        if (!element.attr("multiple")) {
            throw "Cannot create CheckboxMultiSelect without multiple-select select element."
        }
        this.options.element = AJS.$(this.options.element).hide();
        this.model = new AJS.SelectModel({
            element: this.options.element,
            removeOnUnSelect: this.options.removeOnUnSelect
        });
        this.suggestionsHandler = this.options.suggestionsHandler ? new this.options.suggestionsHandler(this.options,this.model) : new AJS.CheckboxMultiSelectSuggestHandler(this.options,this.model);
        this.options.element.bind("updateOptions", function() {
            instance._setOptions(options)
        }).bind("selectOption", function(e, descriptor) {
            instance.selectItem(descriptor)
        }).bind("removeOption", function(e, descriptor) {
            instance.unselectItem(descriptor)
        }).bind("clear", function() {
            instance.clear()
        });
        this._createFurniture();
        this.dropdownController = {
            show: AJS.$.noop,
            setWidth: AJS.$.noop,
            setPosition: AJS.$.noop,
            hide: AJS.$.noop
        };
        this.listController = new AJS.List({
            stallEventBind: this.options.stallEventBind,
            containerSelector: AJS.$(".aui-list", this.$container),
            scrollContainer: ".aui-list-scroll",
            selectionEvent: "change",
            delegateTarget: this.$field,
            hasLinks: false,
            itemSelector: ".check-list-item",
            groupSelector: "ul.aui-list-section",
            matchingStrategy: this.options.matchingStrategy,
            maxInlineResultsDisplayed: this.options.maxInlineResultsDisplayed,
            renderers: {
                suggestion: this._renders.suggestionItem
            },
            selectionHandler: function(e) {
                var focusedItem;
                if (e.type === "change") {
                    focusedItem = AJS.$(e.target).closest(this.options.itemSelector)
                } else {
                    focusedItem = this.getFocused()
                }
                instance._selectionHandler(focusedItem, e);
                return false
            }
        });
        this._assignEventsToFurniture();
        this.render();
        this.model.$element.trigger("initialized", [this]);
        JIRA.trigger(JIRA.Events.CHECKBOXMULITSELECT_READY, [this.model.$element, this]);
        return this
    },
    _handleCharacterInput: function(force) {
        this.listController.$container.find(".invalid-item").tipsy("hide");
        this.requestSuggestions(force).done(_.bind(function(suggestions) {
            this._setSuggestions(suggestions)
        }, this));
        this.$dropDownIcon.toggleClass("clear-field", !!this.getQueryVal());
        this.listController.moveToFirst()
    },
    _getDefaultOptions: function() {
        return AJS.$.extend(true, this._super(), {
            errorMessage: "The value {0} is invalid.",
            stallEventBind: true
        })
    },
    _createFurniture: function() {
        var id = this.model.$element.attr("id");
        this.$container = this._render("container", id);
        this.$fieldContainer = this._render("fieldContainer").appendTo(this.$container);
        this.$field = this._render("field", id, this._getPlaceholderText()).appendTo(this.$fieldContainer);
        this.$container.append(this._render("suggestionsContainer", id));
        this.$container.insertBefore(this.model.$element);
        this.$dropDownIcon = this._render("dropdownAndLoadingIcon").appendTo(this.$fieldContainer)
    },
    _getPlaceholderText: function() {
        var placeholderText = AJS.$.trim(this.model.$element.data("placeholder-text"));
        return (placeholderText && placeholderText !== "") ? placeholderText : "Search"
    },
    _assignEventsToFurniture: function() {
        var instance = this;
        this._assignEvents("body", document);
        if (this.options.stallEventBind) {
            window.setTimeout(function() {
                instance._assignEvents("field", instance.$field)._assignEvents("keys", instance.$field)._assignEvents("container", instance.$container)._assignEvents("fieldIcon", instance.$dropDownIcon)
            }, 0)
        } else {
            instance._assignEvents("field", instance.$field)._assignEvents("keys", instance.$field)._assignEvents("fieldIcon", instance.$dropDownIcon)
        }
        this.listController.$container.delegate(".clear-all", "click", function(event) {
            event.preventDefault();
            var $clearAll = jQuery(event.target);
            if ($clearAll.hasClass("disabled")) {
                return
            }
            $clearAll.parent().remove();
            instance.clear()
        })
    },
    clear: function() {
        var instance = this;
        var selectedDescriptors = this.model.getDisplayableSelectedDescriptors();
        this.model.setAllUnSelected();
        if (this.$field.val().length === 0) {
            this.$field.val("");
            this.listController.$container.find(":checkbox").removeAttr("checked")
        } else {
            this.clearQueryField();
            this.listController.moveToFirst()
        }
        this._toggleClearButton();
        jQuery.each(selectedDescriptors, function() {
            instance.model.$element.trigger("unselect", [this, instance, true])
        })
    },
    clearQueryField: function() {
        this.$field.val("");
        this._handleCharacterInput(true);
        this.$field.focus()
    },
    unselectItem: function(descriptor) {
        this.model.setUnSelected(descriptor);
        this.model.$element.trigger("unselect", [descriptor, this, false]);
        this.$container.find(".aui-list input[type=checkbox]").each(function() {
            if (this.value === descriptor.value()) {
                this.checked = false
            }
        })
    },
    _handleEscape: function(e) {
        var $field = this.$field;
        if (e.type === "keydown" && $field.val() !== "") {
            e.stopPropagation();
            $field.val("");
            $field.on("keyup", handleEscKeyUp);
            this._handleCharacterInput(true)
        }
        function handleEscKeyUp(event) {
            if (event.keyCode === 27) {
                event.stopPropagation();
                $field.off("keyup", handleEscKeyUp)
            }
        }
    },
    selectItem: function(descriptor, initialize) {
        this.model.setSelected(descriptor);
        if (!initialize) {
            this.model.$element.trigger("selected", [descriptor, this])
        }
        this.$container.find(".aui-list input[type=checkbox]").each(function() {
            if (this.value === descriptor.value()) {
                this.checked = true
            }
        })
    },
    _selectionHandler: function(selected, event) {
        var instance = this;
        selected.each(function() {
            var descriptor = AJS.$.data(this, "descriptor")
              , $input = AJS.$(this).find(":input");
            if (instance._directCheckboxClick || event.shiftKey) {
                descriptor.properties.fromCheckbox = true
            }
            instance._setDescriptorSelection(descriptor, $input)
        });
        this._toggleClearButton()
    },
    _toggleClearButton: function() {
        var hasSelection = this.model.getSelectedValues().length > 0;
        this.listController.$container.find(".clear-all").attr("tabindex", hasSelection ? null : -1).closest(".check-list-group-actions").toggleClass("hidden", !hasSelection)
    },
    _setDescriptorSelection: function(descriptor, $input) {
        if (!descriptor.selected()) {
            this.selectItem(descriptor);
            $input.attr("checked", "checked")
        } else {
            this.unselectItem(descriptor);
            $input.removeAttr("checked")
        }
    },
    render: function() {
        this._handleCharacterInput(true)
    },
    _events: {
        field: {
            "keydown": function(event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                    var instance = this;
                    this.model.$element.bind("unselect selected", handleSelected);
                    setTimeout(function() {
                        instance.model.$element.unbind("unselect selected", handleSelected)
                    }, 0)
                }
                function handleSelected() {
                    if (jQuery.trim(instance.$field.val()) !== "") {
                        instance.$field.val("");
                        instance._handleCharacterInput(true)
                    }
                }
            }
        },
        container: {
            mousedown: function(event) {
                var instance = this;
                function onmouseup(event) {
                    if (event.type === "mouseup") {
                        instance._directCheckboxClick = true;
                        setTimeout(function() {
                            instance._directCheckboxClick = false
                        }, 40)
                    }
                    jQuery(document).unbind("mouseup mouseleave", onmouseup)
                }
                if (jQuery(event.target).is("input[type=checkbox]")) {
                    jQuery(document).unbind("mouseup mouseleave", onmouseup).bind("mouseup mouseleave", onmouseup)
                }
                if (event.target !== this.$field.get(0)) {
                    event.preventDefault()
                }
            },
            click: function() {
                if (this.$field.get(0) !== document.activeElement) {
                    this.$field.focus()
                }
            }
        },
        fieldIcon: {
            click: function(e) {
                if (AJS.$(e.target).hasClass("clear-field")) {
                    this.clearQueryField()
                }
            }
        }
    },
    _renders: {
        errorMessage: function(idPrefix) {
            return AJS.$('<div class="error" />').attr("id", idPrefix + "-error")
        },
        fieldContainer: function() {
            return AJS.$("<div class='check-list-field-container' />")
        },
        field: function(idPrefix, placeholderText) {
            return jQuery("<input>").attr({
                "autocomplete": "off",
                "placeholder": placeholderText,
                "class": "aui-field check-list-field",
                "id": idPrefix + "-input",
                "wrap": "off"
            })
        },
        disableSelectField: function(id) {
            return AJS.$("<input type='text' class='long-field' name='" + id + "' id='" + id + "' />")
        },
        container: function(idPrefix) {
            return AJS.$('<div class="check-list-select" id="' + idPrefix + '-multi-select">')
        },
        suggestionsContainer: function(idPrefix) {
            return AJS.$('<div class="aui-list" id="' + idPrefix + '-suggestions"></div>')
        },
        suggestionItem: function(descriptor, replacementText) {
            var $checkbox = AJS.$("<input type='checkbox' tabindex='-1' />").val(descriptor.value()), $listElem = AJS.$('<li class="check-list-item">'), $label = AJS.$("<label class='item-label' />"), $tipsyTarget;
            if (descriptor.styleClass()) {
                $listElem.addClass(descriptor.styleClass())
            }
            if (replacementText) {
                $label.html(replacementText)
            } else {
                if (descriptor.html()) {
                    $label.html(descriptor.html())
                } else {
                    $label.text(descriptor.label())
                }
            }
            if (descriptor.selected()) {
                $checkbox.attr("checked", "checked")
            }
            if (descriptor.icon() && descriptor.icon() !== "none") {
                $label.prepend("<img src='" + descriptor.icon() + "' height='16' width='16' align='absmiddle' />")
            }
            if (descriptor.title()) {
                $label.attr("title", descriptor.title())
            }
            if (descriptor.disabled()) {
                $listElem.addClass("disabled");
                $checkbox.attr("disabled", "disabled")
            }
            $label.prepend($checkbox);
            if (descriptor.invalid() || descriptor.disabled()) {
                $listElem.addClass("has-invalid-item");
                $label.append("<span class='invalid-item'></span>");
                $tipsyTarget = $label.find(".invalid-item");
                _.defer(function() {
                    $listElem.attr("original-title", $listElem.attr("title"));
                    $listElem.removeAttr("title")
                });
                var title;
                if (descriptor.title()) {
                    title = descriptor.title();
                    $label.attr("original-title", title);
                    $label.removeAttr("title")
                } else {
                    title = AJS.format("{0} \'\'{1}\'\' is not valid for your current Project(s) and\/or Issue Type(s) selection", "Value", descriptor.label())
                }
                $tipsyTarget.tipsy({
                    title: function() {
                        return title
                    },
                    className: "tipsy-front",
                    trigger: "manual"
                });
                $tipsyTarget.hoverIntent({
                    interval: 200,
                    over: function() {
                        $tipsyTarget.tipsy("show")
                    },
                    out: function() {
                        $tipsyTarget.tipsy("hide")
                    }
                })
            }
            return $listElem.append($label).data("descriptor", descriptor)
        }
    },
    handleFreeInput: jQuery.noop,
    hideSuggestions: jQuery.noop,
    showErrorMessage: jQuery.noop,
    _deactivate: jQuery.noop
});
JIRA.Events.CHECKBOXMULITSELECT_READY = "checkboxMultiSelectReady";
(function($) {
    JIRA.Loading = {
        showLoadingIndicator: function() {
            var heightOfSprite = 440
              , currentOffsetOfSprite = 0;
            clearInterval(this.loadingTimer);
            _get$loadingIndicator().show();
            this.loadingTimer = window.setInterval(function() {
                if (currentOffsetOfSprite === heightOfSprite) {
                    currentOffsetOfSprite = 0
                }
                currentOffsetOfSprite = currentOffsetOfSprite + 40;
                _get$loadingIndicator().css("backgroundPosition", "0 -" + currentOffsetOfSprite + "px")
            }, 50)
        },
        hideLoadingIndicator: function() {
            clearInterval(this.loadingTimer);
            _get$loadingIndicator().hide()
        }
    };
    function _get$loadingIndicator() {
        if (!JIRA.Loading.$loadingIndicator) {
            JIRA.Loading.$loadingIndicator = $("<div />").addClass("aui-loading").css("zIndex", 9999).appendTo("body")
        }
        return JIRA.Loading.$loadingIndicator
    }
}
)(AJS.$);
JIRA.Dialog = AJS.Control.extend({
    _getDefaultOptions: function() {
        return {
            height: "auto",
            cached: false,
            widthClass: "medium",
            ajaxOptions: {
                data: {
                    inline: true,
                    decorator: "dialog"
                }
            }
        }
    },
    init: function(options) {
        if (typeof options === "string" || options instanceof jQuery) {
            options = {
                trigger: options
            }
        } else {
            if (options && options.width) {
                options.widthClass = "custom"
            }
        }
        this.options = jQuery.extend(true, this._getDefaultOptions(), options);
        this.options.width = JIRA.Dialog.WIDTH_PRESETS[this.options.widthClass] || options.width;
        if (typeof this.options.content === "function") {
            this.options.type = "builder"
        } else {
            if (this.options.content instanceof jQuery || (typeof this.options.content === "object" && this.options.nodeName)) {
                this.options.type = "element"
            } else {
                if (!this.options.type && !this.options.content || (typeof this.options.content === "object" && this.options.content.url)) {
                    this.options.type = "ajax"
                }
            }
        }
        if (this.options.trigger) {
            var triggerArray = AJS.$.makeArray(this.options.trigger);
            var instance = this;
            AJS.$.each(triggerArray, function(index, trigger) {
                instance._assignEvents("trigger", trigger)
            })
        }
        this.onContentReadyCallbacks = [];
        this._assignEvents("container", document)
    },
    _runContentReadyCallbacks: function() {
        var that = this;
        AJS.$.each(this.onContentReadyCallbacks, function() {
            this.call(that)
        })
    },
    _setContent: function(content, decorate) {
        if (!content) {
            this._contentRetrievers[this.options.type].call(this, this._setContent)
        } else {
            if (JIRA.Dialog.current === this) {
                this.get$popup().show().css("visibility", "hidden").addClass("popup-width-" + this.options.widthClass);
                this.$content = content;
                this.get$popupContent().html(content);
                if (decorate !== false) {
                    if (this.decorateContent) {
                        this.decorateContent()
                    }
                }
                this._positionInCenter();
                if (decorate !== false) {
                    AJS.$(document).trigger("dialogContentReady", [this]);
                    this._runContentReadyCallbacks()
                }
                this.get$popup().css("visibility", "");
                if (decorate !== false) {
                    if (AJS.$.isFunction(this.options.onContentRefresh)) {
                        this.options.onContentRefresh.call(this)
                    }
                }
                this._onShowContent()
            } else {
                if (this.options.cached === false) {
                    delete this.$content
                }
            }
        }
    },
    _handleInitialDoneResponse: function(data, xhr, smartAjaxResult) {},
    getRequestUrlFromTrigger: function() {
        if (this.$activeTrigger && this.$activeTrigger.length) {
            return this.$activeTrigger.attr("href") || this.$activeTrigger.data("url")
        }
    },
    _getRequestOptions: function() {
        var options = {};
        if (this._getAjaxOptionsObject() === false) {
            return false
        }
        options = AJS.$.extend(true, options, this._getAjaxOptionsObject());
        if (!options.url) {
            options.url = this.getRequestUrlFromTrigger()
        }
        return options
    },
    _getAjaxOptionsObject: function() {
        var ajaxOpts = this.options.ajaxOptions;
        if (AJS.$.isFunction(ajaxOpts)) {
            return ajaxOpts.call(this)
        } else {
            return ajaxOpts
        }
    },
    _contentRetrievers: {
        "element": function(callback) {
            if (!this.$content) {
                this.$content = jQuery(this.options.content).clone(true)
            }
            callback.call(this, this.$content)
        },
        "builder": function(callback) {
            var instance = this;
            if (!this.$content) {
                this._showloadingIndicator();
                this.options.content.call(this, function(content) {
                    instance.$content = AJS.$(content);
                    callback.call(instance, instance.$content)
                })
            }
        },
        "ajax": function(callback) {
            var instance = this, ajaxOptions;
            if (!this.$content) {
                ajaxOptions = this._getRequestOptions();
                this._showloadingIndicator();
                this.serverIsDone = false;
                ajaxOptions.complete = function(xhr, textStatus, smartAjaxResult) {
                    if (smartAjaxResult.successful) {
                        var instructions = instance._detectRedirectInstructions(xhr);
                        instance.serverIsDone = instructions.serverIsDone;
                        if (instructions.redirectUrl) {
                            instance._performRedirect(instructions.redirectUrl)
                        } else {
                            if (ajaxOptions.dataType && ajaxOptions.dataType.toLowerCase() === "json" && instance._buildContentFromJSON) {
                                instance.$content = instance._buildContentFromJSON(smartAjaxResult.data)
                            } else {
                                instance.$content = smartAjaxResult.data
                            }
                            if (instance.serverIsDone) {
                                instance._handleInitialDoneResponse(smartAjaxResult.data, xhr, smartAjaxResult)
                            } else {
                                callback.call(instance, instance.$content)
                            }
                        }
                    } else {
                        var errorContent = JIRA.SmartAjax.buildDialogErrorContent(smartAjaxResult);
                        callback.call(instance, errorContent)
                    }
                }
                ;
                JIRA.SmartAjax.makeRequest(ajaxOptions)
            }
        }
    },
    _detectRedirectInstructions: function(xhr) {
        var instructions = {
            serverIsDone: false,
            redirectUrl: ""
        };
        var doneHeader = xhr.getResponseHeader("X-Atlassian-Dialog-Control");
        if (doneHeader) {
            instructions.serverIsDone = true;
            var idx = doneHeader.indexOf("redirect:");
            if (idx == 0) {
                instructions.redirectUrl = doneHeader.substr("redirect:".length)
            } else {
                if (doneHeader == "permissionviolation") {
                    instructions.redirectUrl = window.location.href
                }
            }
        }
        return instructions
    },
    _performRedirect: function(url) {
        AJS.reloadViaWindowLocation(url)
    },
    _renders: {
        popupHeading: function() {
            var $el = (AJS.DarkFeatures.isEnabled("com.atlassian.jira.config.PDL")) ? jQuery("<div />") : jQuery("<h2 />");
            return $el.addClass("aui-popup-heading")
        },
        popupContent: function() {
            return jQuery("<div />").addClass("aui-popup-content")
        },
        popup: function() {
            return jQuery("<div />").attr("id", this.options.id || "").addClass("aui-popup").hide()
        }
    },
    _events: {
        "trigger": {
            click: function(e, item) {
                if (e.metaKey) {
                    return
                }
                this.$activeTrigger = item;
                //this.show();
                e.preventDefault()
            }
        },
        "container": {
            "keydown": function(e) {
                if (e.which === jQuery.ui.keyCode.ESCAPE) {
                    var aborted = this.handleCancel();
                    if (AJS.$.browser.msie && aborted === false) {
                        e.preventDefault()
                    }
                }
            }
        }
    },
    handleCancel: function() {
        return this.hide(true, {
            reason: JIRA.Dialog.HIDE_REASON.escape
        })
    },
    _showloadingIndicator: function() {
        JIRA.Loading.showLoadingIndicator()
    },
    _hideloadingIndicator: function() {
        JIRA.Loading.hideLoadingIndicator()
    },
    _positionInCenter: function() {
        var $window = AJS.$(window)
          , $popup = this.get$popup()
          , $container = this.getContentContainer()
          , $contentArea = this.getContentArea()
          , cushion = 40
          , windowHeight = $window.height();
        if (typeof this.options.width === "number") {
            $popup.width(this.options.width)
        }
        $popup.css({
            marginLeft: -$popup.outerWidth() / 2,
            marginTop: Math.max(-$popup.outerHeight() / 2, cushion - windowHeight / 2)
        });
        var top = 0;
        var el = $popup[0];
        while (el) {
            top += el.offsetTop;
            el = el.offsetParent
        }
        var popupMaxHeight = windowHeight - top - cushion;
        var padding = parseInt($contentArea.css("padding-top"), 10) + parseInt($contentArea.css("padding-bottom"), 10);
        $contentArea.css("maxHeight", "");
        var contentMaxHeight = popupMaxHeight - ($popup.outerHeight() - $container.outerHeight()) - padding;
        $contentArea.css("maxHeight", contentMaxHeight);
        AJS.$(this).trigger("contentMaxHeightChanged", [contentMaxHeight])
    },
    getContentArea: function() {
        return this.$popup.find(".form-body")
    },
    getContentContainer: function() {
        var $container = this.$popup.find(".content-area-container");
        if ($container.length === 1) {
            return $container
        } else {
            return this.$popup.find(".form-body")
        }
    },
    get$popup: function() {
        if (!this.$popup) {
            this.$popup = this._render("popup").appendTo("body");
            this.$popup.addClass("box-shadow")
        }
        return this.$popup
    },
    bindAnchorsToDialog: function($anchors) {
        var instance = this;
        $anchors.click(function(e) {
            instance.$activeTrigger = AJS.$(this);
            delete instance.$content;
            instance._setContent();
            e.preventDefault()
        })
    },
    get$popupContent: function() {
        if (!this.$popupContent) {
            this.$popupContent = this._render("popupContent").appendTo(this.get$popup())
        }
        return this.$popupContent
    },
    get$popupHeading: function() {
        if (!this.$popupHeading) {
            this.$popupHeading = this._render("popupHeading").prependTo(this.get$popup())
        }
        return this.$popupHeading
    },
    getLoadingIndicator: function() {
        return this.get$popupContent().find(".throbber:last")
    },
    showFooterLoadingIndicator: function() {
        var $throbber = this.getLoadingIndicator();
        if ($throbber.length) {
            $throbber.addClass("loading")
        }
    },
    hideFooterLoadingIndicator: function() {
        var $throbber = this.getLoadingIndicator();
        if ($throbber.length) {
            $throbber.removeClass("loading")
        }
    },
    _watchTab: function(e) {
        var $dialog_selectable, $first_selectable, $last_selectable;
        if (AJS.$(e.target).parents(this.get$popupContent()).length > 0) {
            if (AJS.$("html").hasClass("safari")) {
                $dialog_selectable = AJS.$(":input:visible:enabled, :checkbox:visible:enabled, :radio:visible:enabled", ".aui-popup.aui-dialog-open")
            } else {
                $dialog_selectable = AJS.$("a:visible, :input:visible:enabled, :checkbox:visible:enabled, :radio:visible:enabled", ".aui-popup.aui-dialog-open")
            }
            $first_selectable = $dialog_selectable.first();
            $last_selectable = $dialog_selectable.last();
            if ((e.target == $first_selectable[0] && e.shiftKey) || (e.target == $last_selectable[0] && !e.shiftKey)) {
                if (e.shiftKey) {
                    $last_selectable.focus()
                } else {
                    $first_selectable.focus()
                }
                e.preventDefault()
            }
        }
    },/*
    _show: function(forceReload) {
        if (AJS.InlineLayer.current) {
            AJS.InlineLayer.current.hide()
        }
        if (AJS.dropDown.current) {
            AJS.dropDown.current.hide()
        }
        if (JIRA.Dialog.current) {
            var prev;
            if (JIRA.Dialog.current.options.stacked) {
                prev = JIRA.Dialog.current;
                prev.stacked = true;
                prev.hide(false);
                this.prev = prev
            } else {
                JIRA.Dialog.stackroot = this;
                var current = JIRA.Dialog.current;
                prev = current._removeStackState();
                current.hide(false);
                while (prev) {
                    current = prev;
                    prev = current._removeStackState();
                    current._destroyIfNecessary()
                }
            }
        } else {
            if (this.stacked !== true) {
                JIRA.Dialog.stackroot = this;
                JIRA.Dialog.originalWindowTitle = document.title;
                AJS.dim(false)
            }
        }
        JIRA.Dialog.current = this;
        var $popup = this.get$popup().addClass("aui-dialog-open");
        if (forceReload || (this.options.type !== "blank" && !this.$content && this.stacked !== true)) {
            delete this.$content;
            this._setContent()
        } else {
            $popup.show();
            this._positionInCenter();
            this._onShowContent()
        }
        this.tabWatcher = function(e) {
            if (e.keyCode == 9) {
                JIRA.Dialog.current._watchTab(e)
            }
        }
        ;
        AJS.$(document).bind("keydown", this.tabWatcher);
        AJS.$(this).trigger("Dialog.show", [this.$popup, this, this.id]);
        AJS.$(AJS).trigger("Dialog.show", [this.$popup, this, this.id]);
        AJS.disableKeyboardScrolling();
        this.stacked = false
    },
    show: function(forceReload) {
        var delayShow = this.options.delayShowUntil
          , instance = this;
        if (JIRA.Dialog.current === this) {
            return false
        }
        var myEvent = new AJS.$.Event("beforeShow");
        AJS.$(this).trigger(myEvent);
        JIRA.trigger(myEvent, [this.options.id]);
        if (myEvent.isDefaultPrevented()) {
            return false
        }
        if (delayShow) {
            var promise = delayShow();
            if (promise.isResolved()) {
                instance._show(forceReload)
            } else {
                AJS.dim(false);
                this._showloadingIndicator();
                promise.done(function() {
                    instance._show(forceReload)
                })
            }
        } else {
            instance._show(forceReload)
        }
    },*/
    _setWindowTitle: function() {
        var titleOption = this.options.windowTitle, $container = this.get$popup(), dialogTitle, $heading;
        if (titleOption === false) {
            return
        } else {
            if (typeof titleOption === "string") {
                dialogTitle = titleOption
            } else {
                if (typeof titleOption === "function") {
                    dialogTitle = titleOption.call(this)
                } else {
                    $heading = $container.find(".aui-popup-heading");
                    if ($heading.length) {
                        dialogTitle = $heading.text()
                    }
                }
            }
        }
        if (!dialogTitle) {
            return
        }
        var jiraTitle = JIRA.Settings.ApplicationTitle.get();
        var newTitle = [dialogTitle];
        if (jiraTitle) {
            newTitle.push(jiraTitle)
        }
        document.title = newTitle.join(" - ")
    },
    _onShowContent: function() {
        this._setWindowTitle();
        this._hideloadingIndicator();
        this.get$popup().addClass("aui-dialog-content-ready")
    },
    _resetWindowTitle: function() {
        if (this.stacked !== true && JIRA.Dialog.stackroot === this) {
            if (JIRA.Dialog.originalWindowTitle) {
                if (document.title !== JIRA.Dialog.originalWindowTitle) {
                    document.title = JIRA.Dialog.originalWindowTitle
                }
                delete JIRA.Dialog.originalWindowTitle
            }
        }
    },
    notifyOfNewContent: function() {
        if (this.$content) {
            this.decorateContent();
            this._positionInCenter();
            this._onShowContent();
            jQuery(document).trigger("dialogContentReady", [this])
        }
    },
    destroy: function() {
        this.$popup && this.$popup.remove();
        delete this.$popup;
        delete this.$popupContent;
        delete this.$popupHeading;
        delete this.$content
    },
    _destroyIfNecessary: function() {
        !this.options.cached && this.destroy()
    },
    _removeStackState: function() {
        var prev = this.prev;
        delete this.prev;
        delete this.stacked;
        return prev
    },
    isCurrent: function() {
        return JIRA.Dialog.current === this
    },
    hide: function(undim, options) {
        if (JIRA.Dialog.current !== this) {
            return
        }
        var beforeHideEvent = new jQuery.Event("Dialog.beforeHide");
        options = options || {};
        JIRA.trigger(beforeHideEvent, [this.$popup, options.reason, this.options.id]);
        AJS.$(this).trigger(beforeHideEvent, [this.$popup, options.reason, this.options.id]);
        if (beforeHideEvent.isDefaultPrevented()) {
            return false
        }
        var atlToken = AJS.$(".aui-dialog-open  input[name=atl_token]").attr("value");
        if (atlToken !== undefined) {
            JIRA.XSRF.updateTokenOnPage(atlToken)
        }
        if (undim !== false && !this.prev) {
            AJS.undim()
        }
        this.get$popup().removeClass("aui-dialog-open").removeClass("aui-dialog-content-ready").hide();
        this._hideloadingIndicator();
        this._resetWindowTitle();
        JIRA.Dialog.current = null;
        AJS.$(document).trigger("hideAllLayers", [this.$popup, options.reason, this.options.id]);
        AJS.$(this).trigger("Dialog.hide", [this.$popup, options.reason, this.options.id]);
        JIRA.trigger("Dialog.hide", [this.$popup, options.reason, this.options.id]);
        if (this.options.cached === false && this.stacked !== true) {
            this.destroy()
        }
        AJS.enableKeyboardScrolling();
        if (this.tabWatcher) {
            AJS.$(document).unbind("keydown", this.tabWatcher)
        }
        if (this.stacked !== true) {
            if (this.prev) {
                this.prev.show(!!this.prev.options.reloadOnPop);
                delete this.prev
            } else {
                if (JIRA.Dialog.stackroot === this) {
                    delete JIRA.Dialog.stackroot
                }
            }
        }
    },
    addHeading: function(heading) {
        if (!AJS.DarkFeatures.isEnabled("com.atlassian.jira.config.PDL")) {
            this.get$popupHeading().html(heading);
            return
        }
        var $pieces = (heading && heading.jquery) ? heading : AJS.$(heading);
        var $title = AJS.$("<h2 />");
        var contents = [];
        $pieces.each(function(i) {
            if (this.nodeName.toLowerCase() == "div") {
                contents.push(this)
            } else {
                $title.append(this)
            }
        });
        this.get$popupHeading().html(contents).append($title)
    },
    onContentReady: function(func) {
        if (AJS.$.isFunction(func)) {
            this.onContentReadyCallbacks.push(func)
        }
    }
});
AJS.popup = function(options, width, id) {
    if (typeof options !== "object") {
        options = {
            width: arguments[0],
            height: arguments[1],
            id: arguments[2]
        }
    }
    var popup = new JIRA.Dialog({
        type: "blank",
        id: options.id || id,
        width: options.width,
        cached: true
    });
    return {
        element: popup.get$popup(),
        show: function() {
            popup.show()
        },
        hide: function() {
            popup.hide()
        },
        changeSize: function() {
            popup._positionInCenter()
        },
        remove: function() {
            this.element.remove();
            this.element = null
        },
        disable: function() {},
        enable: function() {}
    }
}
;
JIRA.Dialog.WIDTH_PRESETS = {
    small: 360,
    medium: 540,
    large: 810
};
JIRA.Dialog.HIDE_REASON = {
    cancel: "cancel",
    escape: "esc",
    submit: "submit"
};
AJS.namespace("AJS.FlexiPopup", null, JIRA.Dialog);
JIRA.Dialog.fn.dirtyFormWarning = function() {
    var handler = function(e, popup, hideReason) {
        var dirtyMessage;
        if (!e.isDefaultPrevented() && hideReason === JIRA.Dialog.HIDE_REASON.escape) {
            dirtyMessage = JIRA.DirtyForm.getDirtyWarning();
            if (dirtyMessage && !confirm(dirtyMessage)) {
                e.preventDefault()
            }
        }
    };
    return function() {
        return this.bind("Dialog.beforeHide", handler)
    }
}();
JIRA.FormDialog = JIRA.Dialog.extend({
    _getDefaultOptions: function() {
        return AJS.$.extend(this._super(), {
            autoClose: false,
            targetUrl: "",
            handleRedirect: false,
            onUnSuccessfulSubmit: function() {},
            onSuccessfulSubmit: function() {},
            onDialogFinished: function() {
                var targetUrl = this._getTargetUrlValue();
                this.hide();
                if (targetUrl) {
                    AJS.$(AJS).trigger("page-unload.location-change.from-dialog", [this.$popup]);
                    window.location.href = targetUrl
                } else {
                    AJS.$(AJS).trigger("page-unload.refresh.from-dialog", [this.$popup]);
                    AJS.reloadViaWindowLocation()
                }
            },
            submitAjaxOptions: {
                type: "post",
                data: {
                    inline: true,
                    decorator: "dialog"
                },
                dataType: "html"
            },
            isIssueDialog: false
        })
    },
    _getFormDataAsObject: function() {
        var fieldValues = {};
        AJS.$(this.$form.serializeArray()).each(function() {
            var fieldVal = fieldValues[this.name];
            if (!fieldVal) {
                fieldVal = this.value
            } else {
                if (AJS.$.isArray(fieldVal)) {
                    fieldVal.push(this.value)
                } else {
                    fieldVal = [fieldVal, this.value]
                }
            }
            fieldValues[this.name] = fieldVal
        });
        return fieldValues
    },
    _getRelativePath: function() {
        var ajaxOptions = this._getRequestOptions();
        return parseUri(ajaxOptions.url).directory
    },
    _getPath: function(action) {
        var relPath = this._getRelativePath();
        if (action.indexOf(relPath) == 0) {
            return action
        } else {
            return relPath + action
        }
    },
    _submitForm: function(e) {
        this.cancelled = false;
        this.xhr = null;
        this.redirected = false;
        this.serverIsDone = false;
        var instance = this
          , defaultRequestOptions = AJS.$.extend(true, {}, this.options.submitAjaxOptions)
          , requestOptions = AJS.$.extend(true, defaultRequestOptions, {
            url: this._getPath(this.$form.attr("action")),
            data: this._getFormDataAsObject(),
            complete: function(xhr, textStatus, smartAjaxResult) {
                instance.hideFooterLoadingIndicator();
                if (!instance.cancelled) {
                    if (smartAjaxResult.successful) {
                        instance.$form.trigger("fakesubmit");
                        instance._handleServerSuccess(smartAjaxResult.data, xhr, textStatus, smartAjaxResult);
                        if (!instance.redirected) {
                            instance._handleSubmitResponse(smartAjaxResult.data, xhr, smartAjaxResult)
                        }
                    } else {
                        instance._handleServerError(xhr, textStatus, smartAjaxResult.errorThrown, smartAjaxResult)
                    }
                }
                instance.$form.removeClass("submitting")
            }
        });
        this.showFooterLoadingIndicator();
        this.xhr = JIRA.SmartAjax.makeRequest(requestOptions);
        e.preventDefault()
    },
    _handleServerError: function(xhr, textStatus, errorThrown, smartAjaxResult) {
        if (this.options.onUnSuccessfulSubmit) {
            this.options.onUnSuccessfulSubmit.call(xhr, textStatus, errorThrown, smartAjaxResult)
        }
        var errorContent = JIRA.SmartAjax.buildDialogErrorContent(smartAjaxResult, true);
        var content$ = this.get$popupContent().find(".form-body");
        if (content$.length !== 1) {
            content$ = this.get$popupContent()
        }
        var insertErrMsg = content$.length == 1 && !smartAjaxResult.hasData;
        if (insertErrMsg) {
            content$.prepend(errorContent)
        } else {
            this.setSubmitResponseContent(errorContent)
        }
    },
    setSubmitResponseContent: function(content) {
        if (this.options.formatSubmitResponseContent) {
            content = this.options.formatSubmitResponseContent.call(this, content)
        }
        this._setContent(content)
    },
    isIssueDialog: function() {
        return !!this.options.isIssueDialog
    },
    _handleServerSuccess: function(data, xhr, textStatus, smartAjaxResult) {
        var msgInstructions = this._detectMsgInstructions(xhr);
        if (msgInstructions) {
            JIRA.Messages.showMsgOnReload(msgInstructions.msg, {
                type: msgInstructions.type,
                closeable: msgInstructions.closeable,
                target: msgInstructions.target
            })
        }
        var instructions = this._detectRedirectInstructions(xhr);
        this.serverIsDone = instructions.serverIsDone;
        if (instructions.redirectUrl) {
            if (this.options.onSuccessfulSubmit) {
                this.options.onSuccessfulSubmit.call(this, data, xhr, textStatus, smartAjaxResult)
            }
            this._performRedirect(instructions.redirectUrl)
        } else {
            if (!this.serverIsDone) {
                this.setSubmitResponseContent(data)
            }
        }
    },
    _detectMsgInstructions: function(xhr) {
        var instructions = {
            msg: xhr.getResponseHeader("X-Atlassian-Dialog-Msg-Html")
        };
        if (instructions.msg) {
            instructions.type = xhr.getResponseHeader("X-Atlassian-Dialog-Msg-Type").toUpperCase();
            instructions.closeable = (xhr.getResponseHeader("X-Atlassian-Dialog-Msg-Closeable") === "true");
            instructions.target = xhr.getResponseHeader("X-Atlassian-Dialog-Msg-Target");
            return instructions
        }
    },
    _handleInitialDoneResponse: function(data, xhr, smartAjaxResult) {
        this._handleSubmitResponse(data, xhr, smartAjaxResult)
    },
    _handleSubmitResponse: function(data, xhr, smartAjaxResult) {
        if (this.serverIsDone) {
            if (this.options.onSuccessfulSubmit) {
                this.options.onSuccessfulSubmit.call(this, data, xhr, smartAjaxResult)
            }
            if (this.options.autoClose) {
                this.hide()
            }
            if (this.options.onDialogFinished) {
                this.options.onDialogFinished.call(this, data, xhr, smartAjaxResult)
            }
        }
    },
    _performRedirect: function(url) {
        if (!this.options.stayVisibleOnRedirect) {
            this.hide()
        }
        this.redirected = true;
        this._super(url)
    },
    _hasTargetUrl: function() {
        return this._getTargetUrlHolder().length > 0
    },
    _getTargetUrlHolder: function() {
        return AJS.$(this.options.targetUrl)
    },
    _getTargetUrlValue: function() {
        return this._getTargetUrlHolder().val()
    },
    decorateContent: function() {
        var instance = this, $formHeading, $buttons, $cancel, $buttonContainer, $closeLink;
        this.$form = AJS.$("form", this.get$popupContent());
        $formHeading = AJS.$(":header:first", this.get$popupContent());
        if ($formHeading.length > 0) {
            this.addHeading($formHeading.contents());
            $formHeading.remove()
        }
        this.$form.submit(function(e) {
            var event = new jQuery.Event("before-submit");
            instance.$form.trigger(event, [e, instance]);
            if (!event.isDefaultPrevented()) {
                instance.$form.addClass("submitting");
                var submitButtons = AJS.$(":submit", instance.$form);
                submitButtons.attr("disabled", "disabled");
                if (instance.options.submitHandler) {
                    instance.showFooterLoadingIndicator();
                    instance.options.submitHandler.call(instance, e, function() {
                        if (instance.isCurrent()) {
                            instance.hideFooterLoadingIndicator();
                            instance.$form.removeClass("submitting")
                        }
                    })
                } else {
                    instance._submitForm(e)
                }
            } else {
                e.preventDefault()
            }
        });
        $cancel = AJS.$(".cancel", this.get$popupContent());
        $cancel.click(function(e) {
            if (instance.xhr) {
                instance.xhr.abort()
            }
            instance.xhr = null;
            instance.cancelled = true;
            instance.hide(true, {
                reason: JIRA.Dialog.HIDE_REASON.cancel
            });
            e.preventDefault()
        });
        if (AJS.$.browser.msie) {
            $cancel.focus(function(e) {
                if (e.altKey) {
                    $cancel.click()
                }
            })
        }
        var $popupContent = this.get$popupContent();
        $buttons = AJS.$(".button", $popupContent);
        $buttonContainer = AJS.$("div.buttons", $popupContent);
        if ($cancel.length == 0 && $buttons.length == 0) {
            if ($buttonContainer.length == 0) {
                $buttonContainer = AJS.$('<div class="buttons-container form-footer"><div class="buttons"/></div>').appendTo($popupContent)
            }
            AJS.populateParameters();
            $closeLink = AJS.$("<a href='#' class='cancel' id='aui-dialog-close'>" + "Close" + "</a>");
            AJS.$($popupContent).find(".buttons").append($closeLink);
            $closeLink = AJS.$(".cancel", this.get$popupContent());
            $closeLink.click(function(e) {
                instance.hide(true, {
                    reason: JIRA.Dialog.HIDE_REASON.cancel
                });
                e.preventDefault()
            })
        }
        $buttonContainer.prepend(AJS.$("<span class='icon throbber'/>"));
        AJS.$(".shortcut-tip-trigger", $popupContent).click(function(e) {
            e.preventDefault();
            if (!$popupContent.isDirty() || confirm("You have entered new data in this dialog. If you navigate away from this dialog without first saving your data, the changes will be lost. Click cancel to return to the dialog.")) {
                instance.hide();
                AJS.$("#keyshortscuthelp").click()
            }
        });
        this.$buttonContainer = $buttonContainer
    },
    getButtonsContainer: function() {
        return this.$buttonContainer
    },
    _setContent: function(content, decorate) {
        this._super(content, decorate);
        if (content && JIRA.Dialog.current === this) {
            if (AJS.$.browser.msie) {
                this.$form.bind("keypress", function(e) {
                    if (e.keyCode === 13 && AJS.$(e.target).is("input")) {
                        e.preventDefault();
                        AJS.$(this).submit()
                    }
                })
            }
            if (JIRA.Dialog.current === this) {
                this._focusFirstField()
            }
        }
    },
    _focusFirstField: function(focusElementSelector) {
        var triggerConfig = new JIRA.setFocus.FocusConfiguration();
        if (focusElementSelector) {
            triggerConfig.focusElementSelector = focusElementSelector
        } else {
            if (this.$activeTrigger && this.$activeTrigger.attr("data-field")) {
                triggerConfig.focusElementSelector = "[name='" + this.$activeTrigger.attr("data-field") + "']"
            }
        }
        triggerConfig.parentElementSelectors.unshift(".aui-dialog-content");
        triggerConfig.context = this.get$popup()[0];
        if (AJS.$.browser.msie) {
            var $focusHack = AJS.$(".trigger-hack", triggerConfig.context);
            if ($focusHack.length === 0) {
                $focusHack = AJS.$("<input Class='trigger-hack' type='text' value=''/>").css({
                    position: "absolute",
                    left: -9000
                }).appendTo(triggerConfig.context)
            }
            $focusHack.focus()
        }
        JIRA.setFocus.pushConfiguration(triggerConfig);
        JIRA.setFocus.triggerFocus();
        JIRA.setFocus.triggerFocus()
    },
    hide: function(undim, options) {
        if (this._super(undim, options) === false) {
            return false
        }
        JIRA.setFocus.popConfiguration()
    }
});
AJS.namespace("AJS.FormPopup", null, JIRA.FormDialog);
(function($) {
    JIRA.SmartAjax.handleWebSudoError = function(ajaxOptions, dialogOptions, xhr, statusText, smartAjaxResult) {
        dialogOptions = dialogOptions || {};
        var dialog = new JIRA.FormDialog({
            id: "smart-websudo",
            type: "ajax",
            ajaxOptions: {
                url: contextPath + "/secure/admin/WebSudoAuthenticate!default.jspa?close=true"
            },
            submitHandler: function(e, callback) {
                e.preventDefault();
                var form = $(e.target);
                JIRA.SmartAjax.makeRequest({
                    url: form.attr("action"),
                    data: form.serialize(),
                    type: "POST",
                    complete: function(xhr) {
                        if (xhr.getResponseHeader("X-Atlassian-WebSudo") === "Has-Authentication") {
                            if (dialogOptions.onSuccessfulWebSudo) {
                                dialogOptions.onSuccessfulWebSudo(function() {
                                    callback();
                                    dialog.hide()
                                })
                            } else {
                                callback();
                                dialog.hide()
                            }
                            JIRA.SmartAjax.makeWebSudoRequest(ajaxOptions, dialogOptions)
                        } else {
                            dialog._setContent(xhr.responseText, true)
                        }
                    }
                })
            }
        });
        $(dialog).one("Dialog.hide", function(e, el, reason) {
            if (reason == JIRA.Dialog.HIDE_REASON.cancel || reason == JIRA.Dialog.HIDE_REASON.escape) {
                $.isFunction(ajaxOptions.complete) && ajaxOptions.complete.call(this, xhr, statusText, smartAjaxResult)
            }
        });
        dialog.show()
    }
    ;
    JIRA.SmartAjax.makeWebSudoRequest = function(ajaxOptions, dialogOptions) {
        var webSudoError = false;
        var errorHandler = function(xhr, statusText, errorThrown, smartAjaxResult) {
            if (xhr.status === 401 && xhr.responseText.match(/websudo/i)) {
                webSudoError = true;
                JIRA.SmartAjax.handleWebSudoError(ajaxOptions, dialogOptions, xhr, statusText, smartAjaxResult)
            } else {
                if ($.isFunction(ajaxOptions.error)) {
                    ajaxOptions.error(xhr, statusText, errorThrown, smartAjaxResult)
                }
            }
        };
        var completeHandler = function() {
            if (!webSudoError && $.isFunction(ajaxOptions.complete)) {
                ajaxOptions.complete.apply(this, arguments)
            }
        };
        var ourAjaxOptions = $.extend(true, {}, ajaxOptions);
        ourAjaxOptions.error = errorHandler;
        ourAjaxOptions.complete = completeHandler;
        return JIRA.SmartAjax.makeRequest(ourAjaxOptions)
    }
}
)(AJS.$);
JIRA.Dialogs = {};
JIRA.Dialogs.getDefaultAjaxOptions = function() {
    var $focusRow = JIRA.IssueNavigator.get$focusedRow();
    var linkIssueURI = this.options.url || this.getRequestUrlFromTrigger();
    if (/id=\{0\}/.test(linkIssueURI)) {
        if (!$focusRow.length) {
            return false
        } else {
            linkIssueURI = linkIssueURI.replace(/(id=\{0\})/, "id=" + $focusRow.attr("rel"))
        }
    }
    if (JIRA.IssueNavigator.isNavigator()) {
        var result = /[?&]id=([0-9]+)/.exec(linkIssueURI);
        this.issueId = result && result.length == 2 ? result[1] : null;
        if (this.issueId !== $focusRow.attr("rel")) {
            JIRA.IssueNavigator.Shortcuts.focusRow(this.issueId);
            $focusRow = JIRA.IssueNavigator.get$focusedRow()
        }
        this.issueKey = JIRA.IssueNavigator.getSelectedIssueKey()
    }
    return {
        data: {
            decorator: "dialog",
            inline: "true"
        },
        url: linkIssueURI
    }
}
;
JIRA.Dialogs.waitForSavesToComplete = function() {
    var d = AJS.$.Deferred();
    if (JIRA.Events.INLINE_EDIT_SAVE_COMPLETE) {
        window.setTimeout(function() {
            if (!JIRA.Issues.Api.hasSavesInProgress()) {
                d.resolve()
            } else {
                JIRA.bind(JIRA.Events.INLINE_EDIT_SAVE_COMPLETE, function(e) {
                    console.log(JIRA.Issues.Api.hasSavesInProgress());
                    if (!JIRA.Issues.Api.hasSavesInProgress()) {
                        d.resolve()
                    }
                })
            }
        }, 10)
    } else {
        d.resolve()
    }
    return d.promise()
}
;
JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit = function() {
    if (JIRA.IssueNavigator.isNavigator()) {
        JIRA.IssueNavigator.setIssueUpdatedMsg({
            issueMsg: this.options.issueMsg,
            issueId: this.issueId,
            issueKey: this.issueKey
        })
    }
}
;
JIRA.IssueActionsDialog = JIRA.Dialog.extend({
    _getDefaultOptions: function() {
        return AJS.$.extend(this._super(), {
            cached: false,
            id: "issue-actions-dialog",
            widthClass: "small",
            isIssueDialog: true
        })
    },
    _setContent: function(content, decorate) {
        if (content) {
            this._super(content, decorate)
        } else {
            this._super(AJS.$(["<form id='issue-actions-dialog-form' class='aui ajs-dirty-warning-exempt'>", "<div class='form-body'>", "<div id='issueactions-suggestions' class='aui-list' />", "<div class='description'>", "Begin typing for available operations or press down to see all", "</div>", "</div>", "</form>"].join("")), true)
        }
        if (JIRA.Dialog.current === this) {
            var triggerConfig = new JIRA.setFocus.FocusConfiguration();
            triggerConfig.context = this.get$popup()[0];
            triggerConfig.parentElementSelectors = [".form-body"];
            JIRA.setFocus.pushConfiguration(triggerConfig);
            JIRA.setFocus.triggerFocus()
        }
    },
    _formatActionsResponse: function(response) {
        function addSelected(issueId) {
            var url = window.location.href
              , newUrl = url;
            if (/selectedIssueId=[0-9]*/.test(url)) {
                newUrl = newUrl.replace(/selectedIssueId=[0-9]*/g, "selectedIssueId=" + issueId)
            } else {
                if (JIRA.IssueNavigator.isNavigator()) {
                    if (/\?/.test(url)) {
                        newUrl = newUrl + "&"
                    } else {
                        newUrl = newUrl + "?"
                    }
                    newUrl = newUrl + "selectedIssueId=" + issueId
                }
            }
            return encodeURIComponent(newUrl)
        }
        function formatWorkflowResponse(workflowResponse) {
            var workflows = new AJS.GroupDescriptor({
                label: "Workflow"
            });
            AJS.$(workflowResponse).each(function() {
                workflows.addItem(new AJS.ItemDescriptor({
                    href: contextPath + "/secure/WorkflowUIDispatcher.jspa?id=" + response.id + "&action=" + this.action + "&atl_token=" + response.atlToken + "&returnUrl=" + addSelected(response.id),
                    label: this.name,
                    styleClass: "issueaction-workflow-transition"
                }))
            });
            return workflows
        }
        function formatOperationResonse(operationsResponse) {
            var operations = new AJS.GroupDescriptor({
                label: "Actions"
            });
            AJS.$(operationsResponse).each(function() {
                var _returnUrl;
                if (this.name === "Clone") {
                    if (JIRA.IssueNavigator.isNavigator()) {
                        _returnUrl = addSelected(response.id)
                    } else {
                        _returnUrl = ""
                    }
                } else {
                    _returnUrl = addSelected(response.id)
                }
                operations.addItem(new AJS.ItemDescriptor({
                    href: this.url + "&returnUrl=" + _returnUrl,
                    label: this.name,
                    styleClass: this.styleClass
                }))
            });
            return operations
        }
        var res = [];
        if (response) {
            if (response.actions && response.actions.length != 0) {
                res.push(formatWorkflowResponse(response.actions))
            }
            if (response.operations && response.operations.length != 0) {
                res.push(formatOperationResonse(response.operations))
            }
        }
        return res
    },
    decorateContent: function() {
        var instance = this
          , issueKey = JIRA.IssueNavigator.getSelectedIssueKey()
          , issueId = JIRA.Issue.getIssueId() || JIRA.IssueNavigator.getSelectedIssueId();
        if (issueKey) {
            this.addHeading("Operations" + ": <span>" + issueKey + "</span>")
        } else {
            this.addHeading("Operations")
        }
        this.queryControl = new AJS.QueryableDropdownSelect({
            id: "issueactions",
            element: this.$content.find("#issueactions-suggestions"),
            ajaxOptions: {
                minQueryLength: 0,
                dataType: "json",
                url: AJS.format(contextPath + "/rest/api/1.0/issues/{0}/ActionsAndOperations?atl_token={1}", issueId, atl_token()),
                formatResponse: this._formatActionsResponse,
                error: function(xhr, textStatus, msg, smartAjaxResult) {
                    new JIRA.FormDialog({
                        content: function(ready) {
                            ready(JIRA.SmartAjax.buildDialogErrorContent(smartAjaxResult))
                        }
                    }).show()
                }
            },
            showDropdownButton: true,
            loadOnInit: true
        });
        this.queryControl._handleServerError = function(smartAjaxResult) {
            var errMsg = JIRA.SmartAjax.buildSimpleErrorContent(smartAjaxResult);
            var errorClass = smartAjaxResult.status === 401 ? "warning" : "error";
            instance._setContent(AJS.$('<div class="ajaxerror"><div class="aui-message ' + errorClass + '"><p>' + errMsg + "</p></div></div>"), false);
            instance._addCloseLink()
        }
        ;
        this.timeoutId = undefined;
        this._addCloseLink()
    },
    _addCloseLink: function() {
        var instance = this, $closeLink, $buttonContainer, $buttons;
        $buttonContainer = AJS.$('<div class="buttons-container form-footer"></div>').appendTo(this.get$popupContent());
        $buttons = AJS.$('<div class="buttons"/>').appendTo($buttonContainer);
        $closeLink = AJS.$("<a href='#' class='cancel' id='aui-dialog-close'>" + "Close" + "</a>");
        $closeLink.appendTo($buttons, this.get$popupContent()).click(function(e) {
            instance.hide();
            e.preventDefault()
        });
        this.get$popupContent().append($buttonContainer)
    },
    hide: function(undim) {
        if (this._super(undim) === false) {
            return false
        }
        JIRA.setFocus.popConfiguration()
    }
});
AJS.namespace("AJS.IssueActionsPopup", null, JIRA.IssueActionsDialog);
JIRA.LabelsDialog = JIRA.FormDialog.extend((function() {
    var impl = {};
    impl.init = function(options) {
        this._super(options);
        this.issueId = null;
        this.customFieldId = null;
        this.labelsProvider = this.initLabelsProvider();
        this.labelPicker = null
    }
    ,
    impl.initLabelsProvider = function() {
        if (this.options.labelsProvider && AJS.$.isFunction(this.options.labelsProvider)) {
            return this.options.labelsProvider
        } else {
            if (this.options.labels) {
                return this._getLabelsFromOptions
            } else {
                return this._getLabelsFromTrigger
            }
        }
    }
    ,
    impl._getLabelsFromOptions = function() {
        return AJS.$(this.options.labels)
    }
    ,
    impl._getLabelsFromTrigger = function() {
        return this.$activeTrigger.closest(".labels-wrap")
    }
    ,
    impl.decorateContent = function() {
        this._super();
        var $content = this.get$popupContent();
        this.issueId = $content.find("input[name=id]").val();
        var $customFieldId = $content.find("input[name=customFieldId]");
        if ($customFieldId.length === 1) {
            this.customFieldId = $customFieldId.val()
        } else {
            this.customFieldId = null
        }
    }
    ;
    impl.focusLabelPicker = function() {
        this.get$popupContent().find("textarea").focus()
    }
    ;
    impl.show = function() {
        if (this._super()) {
            this.focusLabelPicker()
        }
    }
    ;
    impl._handleSubmitResponse = function(data, xhr, smartAjaxResult) {
        if (this.serverIsDone) {
            if (this.options.onSuccessfulSubmit) {
                this.options.onSuccessfulSubmit.call(this, data, xhr, smartAjaxResult)
            }
            var issueIdVal = this.get$popupContent().find("input[name=id]").val()
              , noLinkVal = this.get$popupContent().find("input[name=noLink]").val();
            if (this.options.autoClose) {
                this.hide()
            }
            JIRA.IssueNavigator.Shortcuts.flashIssueRow(this.issueId);
            var postData = {
                id: issueIdVal,
                decorator: "none",
                noLink: noLinkVal
            };
            if (this.customFieldId) {
                postData.customFieldId = this.customFieldId
            }
            var instance = this;
            var $labelsWrap = instance.labelsProvider(this);
            jQuery(jQuery.ajax({
                url: contextPath + "/secure/EditLabels!viewLinks.jspa",
                data: postData,
                success: function(html) {
                    var $newLabelsWrap = jQuery("<div>").html(html).find(".labels-wrap");
                    if (JIRA.IssueNavigator.isNavigator()) {
                        $newLabelsWrap.find("a.edit-labels").remove()
                    }
                    $labelsWrap.html($newLabelsWrap.html());
                    if (JIRA.Events.REFRESH_ISSUE_PAGE) {
                        JIRA.trigger(JIRA.Events.REFRESH_ISSUE_PAGE, [JIRA.Issue.getIssueId()])
                    }
                }
            })).throbber({
                target: $labelsWrap
            })
        }
    }
    ;
    impl.handleCancel = function() {
        this._super();
        this.$content = null
    }
    ;
    return impl
}
)());
AJS.namespace("AJS.LabelsPopup", null, JIRA.LabelsDialog);
JIRA.ScreenshotDialog = function(options) {
    var self = this;
    this.$trigger = jQuery(options.trigger);
    this.$trigger.click(function(e) {
        e.preventDefault();
        self.openWindow()
    })
}
;
JIRA.ScreenshotDialog.prototype.openWindow = function() {
    if (JIRA.Dialog.current) {
        JIRA.Dialog.current.hide()
    }
    if (AJS.InlineLayer.current) {
        AJS.InlineLayer.current.hide()
    }
    window.open(this.$trigger.attr("href") + "&decorator=popup", "screenshot", "width=800,height=700,scrollbars=yes,status=yes")
}
;
AJS.namespace("jira.app.attachments.screenshot.ScreenshotWindow", null, JIRA.ScreenshotDialog);
jQuery(document).delegate(".user-hover", {
    "mousemove": function() {
        JIRA.userhover.show(this)
    },
    "mouseleave": function() {
        JIRA.userhover.hide(this)
    },
    "click": function() {
        JIRA.userhover.hide(this, -1)
    }
});
JIRA.userhover = function() {}
;
JIRA.userhover.INLINE_DIALOG_OPTIONS = {
    urlPrefix: contextPath + "/secure/ViewUserHover!default.jspa?decorator=none&username=",
    showDelay: 400,
    closeOthers: false,
    noBind: true,
    hideCallback: function() {
        this.popup.remove()
    }
};
JIRA.userhover.show = function(trigger) {
    clearTimeout(AJS.$.data(trigger, "AJS.InlineDialog.delayId") || 0);
    AJS.$.data(trigger, "AJS.InlineDialog.hasUserAttention", true);
    if (AJS.$.data(trigger, "AJS.InlineDialog") || JIRA.userhover._locked) {
        return
    }
    AJS.$.data(trigger, "AJS.InlineDialog.delayId", setTimeout(function() {
        if (AJS.$(trigger).closest("html").length === 0) {
            JIRA.userhover.hide(trigger);
            return
        }
        AJS.$.data(trigger, "AJS.InlineDialog", AJS.InlineDialog(AJS.$(trigger), "user-hover-dialog-" + new Date().getTime(), function($contents, _, showPopup) {
            JIRA.userhover._fetchDialogContents($contents, trigger, showPopup)
        }, JIRA.userhover.INLINE_DIALOG_OPTIONS)).show()
    }, JIRA.userhover.INLINE_DIALOG_OPTIONS.showDelay))
}
;
JIRA.userhover.hide = function(trigger, showDelay) {
    clearTimeout(AJS.$.data(trigger, "AJS.InlineDialog.delayId") || 0);
    AJS.$.data(trigger, "AJS.InlineDialog.hasUserAttention", false);
    var dialog = AJS.$.data(trigger, "AJS.InlineDialog");
    if (dialog && !JIRA.userhover._locked) {
        if (typeof showDelay !== "number") {
            showDelay = JIRA.userhover.INLINE_DIALOG_OPTIONS.showDelay
        }
        if (showDelay >= 0) {
            AJS.$.data(trigger, "AJS.InlineDialog.delayId", setTimeout(function() {
                dialog.hide();
                AJS.$.data(trigger, "AJS.InlineDialog", null)
            }, showDelay))
        } else {
            dialog.hide();
            AJS.$.data(trigger, "AJS.InlineDialog", null)
        }
    }
}
;
JIRA.userhover._locked = false;
JIRA.userhover._fetchDialogContents = function($contents, trigger, showPopup) {
    AJS.$.get(JIRA.userhover.INLINE_DIALOG_OPTIONS.urlPrefix + trigger.getAttribute("rel"), function(html) {
        if (AJS.$.data(trigger, "AJS.InlineDialog.hasUserAttention")) {
            $contents.html(html);
            $contents.css("overflow", "visible");
            AJS.$(AJS.Dropdown.create({
                trigger: $contents.find(".aui-dd-link"),
                content: $contents.find(".aui-list")
            })).bind({
                "showLayer": function() {
                    JIRA.userhover._locked = true
                },
                "hideLayer": function() {
                    JIRA.userhover._locked = false;
                    if (!AJS.$.data(trigger, "AJS.InlineDialog.hasUserAttention")) {
                        JIRA.userhover.hide(trigger)
                    }
                }
            });
            showPopup();
            AJS.$.data(trigger, "AJS.InlineDialog.delayId", setTimeout(function() {
                $contents.bind({
                    "mousemove": function() {
                        JIRA.userhover.show(trigger)
                    },
                    "mouseleave": function() {
                        JIRA.userhover.hide(trigger)
                    }
                })
            }, JIRA.userhover.INLINE_DIALOG_OPTIONS.showDelay))
        }
    })
}
;
AJS.namespace("jira.app.userhover", null, JIRA.userhover);
AJS.InlineAttach = Class.extend({
    init: function(element) {
        var $element = AJS.$(element);
        if (AJS.InlineAttach.AjaxPresenter.isSupported($element)) {
            new AJS.InlineAttach.AjaxPresenter($element)
        } else {
            new AJS.InlineAttach.FormPresenter($element)
        }
    }
});
AJS.$.extend(AJS.InlineAttach, {
    MAX_UPLOADS: 2,
    DISPLAY_WAIT: 600,
    rescope: function(fn, scope) {
        if (fn) {
            if (scope) {
                return AJS.$.proxy(fn, scope)
            } else {
                return fn
            }
        } else {
            return AJS.$.noop
        }
    },
    copyArrayLike: function(array) {
        return AJS.$.makeArray(array)
    },
    Renderers: {
        container: function() {
            return AJS.$("<div class='field-group'/>")
        }
    }
});
AJS.InlineAttach.Presenter = Class.extend({
    init: function() {
        this.cancelled = false;
        this.running = [];
        this.waiting = []
    },
    _addUpload: function(upload) {
        if (!this.cancelled) {
            if (this.running.length >= AJS.InlineAttach.MAX_UPLOADS) {
                this.waiting.push(upload)
            } else {
                this.running.push(upload);
                upload.upload()
            }
        }
        return this.running.length > 0
    },
    _finishUpload: function(upload) {
        if (!this.cancelled) {
            AJS.InlineAttach.Presenter.removeFromArray(this.waiting, upload);
            if (AJS.InlineAttach.Presenter.removeFromArray(this.running, upload)) {
                if (this.waiting.length > 0) {
                    var next = this.waiting.shift();
                    this.running.push(next);
                    next.upload()
                }
            }
        }
        return this.running.length > 0
    },
    _cancel: function() {
        this.cancelled = true;
        var i;
        var wait = AJS.InlineAttach.copyArrayLike(this.waiting);
        for (i = 0; i < wait.length; i++) {
            wait[i].abort()
        }
        var run = AJS.InlineAttach.copyArrayLike(this.running);
        for (i = 0; i < run.length; i++) {
            run[i].abort()
        }
        this.waiting = [];
        this.running = []
    }
});
AJS.$.extend(AJS.InlineAttach.Presenter, {
    removeFromArray: function(array, element) {
        var index = AJS.$.inArray(element, array);
        if (index >= 0) {
            return array.splice(index, 1)
        } else {
            return null
        }
    }
});
AJS.InlineAttach.FormPresenter = AJS.InlineAttach.Presenter.extend({
    init: function($element) {
        this._super();
        this.form = new AJS.InlineAttach.Form(new AJS.InlineAttach.FileInput($element,false));
        this.form.fileSelector.onChange(AJS.$.proxy(this._attach, this));
        this.form.onCancel(AJS.$.proxy(this._cancel, this))
    },
    _attach: function(fileName) {
        this.form.clearErrors();
        if (this.cancelled) {
            return
        }
        var form = this.form
          , data = this._createSubmitData();
        var $oldInput = form.cloneFileInput();
        form.fileSelector.clear();
        var progress = form.addStaticProgress(fileName);
        var timer = new AJS.InlineAttach.Timer(function() {
            !this.cancelled && progress.show()
        }
        ,this);
        var upload = new AJS.InlineAttach.FormUpload({
            $input: $oldInput,
            url: AJS.InlineAttach.FormPresenter.DEFAULT_URL,
            params: data,
            scope: this,
            before: function() {
                !this.cancelled && progress.start()
            },
            success: function(val) {
                if (this.cancelled) {
                    return
                }
                if (val.id && val.name) {
                    form.addTemporaryFileCheckbox(val.id, val.name, progress)
                } else {
                    if (val.errorMsg) {
                        form.addErrorWithFileName(val.errorMsg, fileName, progress)
                    } else {
                        form.addError(AJS.InlineAttach.Text.tr("upload.error.bad.response", fileName), progress)
                    }
                }
            },
            error: function(text) {
                if (this.cancelled) {
                    return
                }
                if (text.indexOf("SecurityTokenMissing") >= 0) {
                    form.addError(AJS.InlineAttach.Text.tr("upload.xsrf.timeout", fileName), progress)
                } else {
                    form.addError(AJS.InlineAttach.Text.tr("upload.error.unknown", fileName), progress)
                }
            },
            after: function() {
                timer.cancel();
                progress.remove();
                if (!this.cancelled && !this._finishUpload(upload)) {
                    form.enable()
                }
            }
        });
        progress.onCancel(function() {
            upload.abort()
        });
        if (this._addUpload(upload)) {
            timer.schedule(AJS.InlineAttach.DISPLAY_WAIT);
            form.disable()
        }
        form.fileSelector.focus()
    },
    _cancel: function() {
        this._super();
        this.form.enable()
    },
    _createSubmitData: function() {
        var data = {
            atl_token: this.form.getAtlToken()
        };
        if (this.form.issueId) {
            data.id = this.form.issueId
        } else {
            if (this.form.projectId) {
                data.create = true;
                data.projectId = this.form.projectId
            } else {
                throw "Unable to find either an issueId or projectId to submit the attachment to."
            }
        }
        return data
    }
});
AJS.InlineAttach.FormPresenter.DEFAULT_URL = contextPath + "/secure/AttachTemporaryFile.jspa?decorator=none";
AJS.InlineAttach.AjaxPresenter = AJS.InlineAttach.Presenter.extend({
    init: function($element) {
        this._super();
        this.form = new AJS.InlineAttach.Form(new AJS.InlineAttach.FileInput($element,true));
        this.form.fileSelector.onChange(AJS.$.proxy(this._attach, this));
        this.form.onCancel(AJS.$.proxy(this._cancel, this))
    },
    _attach: function(files) {
        this.form.clearErrors();
        if (this.cancelled) {
            return
        }
        if (files && files.length > 0) {
            files = this._checkAndFilterFiles(files);
            if (files) {
                this._uploadFiles(files)
            }
        }
        this.form.fileSelector.clear().focus()
    },
    _checkAndFilterFiles: function(files) {
        if (files.length > AJS.InlineAttach.AjaxPresenter.MAX_SELECTED_FILES) {
            this.form.addError(AJS.InlineAttach.Text.tr("upload.error.too.many.files", files.length, AJS.InlineAttach.AjaxPresenter.MAX_SELECTED_FILES));
            return null
        }
        var maxSize = this.form.maxSize;
        var newFiles = [];
        for (var i = 0; i < files.length; i++) {
            try {
                var file = files[i];
                if (file.size == 0) {
                    this.form.addError(AJS.InlineAttach.Text.tr("upload.empty.file", file.name))
                } else {
                    if (maxSize > 0 && file.size > maxSize) {
                        var sizes = AJS.InlineAttach.Text.fileSize(maxSize, file.size);
                        this.form.addError(AJS.InlineAttach.Text.tr("upload.too.big", file.name, sizes[1], sizes[0]))
                    } else {
                        newFiles.push({
                            name: file.name,
                            size: file.size,
                            file: file
                        })
                    }
                }
            } catch (e) {
                this.form.addError(AJS.InlineAttach.AjaxUpload.getClientErrorMessage(e, file))
            }
        }
        return newFiles.length == 0 ? null : newFiles
    },
    _createSubmitData: function() {
        var data = {
            atl_token: this.form.getAtlToken()
        };
        if (this.form.issueId) {
            data.issueId = this.form.issueId
        } else {
            if (this.form.projectId) {
                data.projectId = this.form.projectId
            } else {
                throw "Unable to find either an issueId or projectId to submit the attachment to."
            }
        }
        return data
    },
    _uploadFiles: function(files) {
        var form = this.form
          , data = this._createSubmitData()
          , that = this
          , running = false;
        AJS.$.each(files, function() {
            var progress = form.addProgress(this)
              , file = this;
            var timer = new AJS.InlineAttach.Timer(function() {
                if (!that.cancelled) {
                    progress.show()
                }
            }
            );
            var upload = new AJS.InlineAttach.AjaxUpload({
                file: file.file,
                params: AJS.$.extend({
                    filename: file.name,
                    size: file.size
                }, data),
                scope: that,
                url: AJS.InlineAttach.AjaxPresenter.DEFAULT_URL,
                before: function() {
                    !this.cancelled && progress.start()
                },
                progress: function(val) {
                    !this.cancelled && progress.update(val)
                },
                success: function(val, status) {
                    if (this.cancelled) {
                        return
                    }
                    if (status === 201) {
                        if (val.id !== undefined && val.name !== undefined) {
                            form.addTemporaryFileCheckbox(val.id, val.name, progress, file.file)
                        } else {
                            form.addError(AJS.InlineAttach.Text.tr("upload.error.bad.response", file.name), progress)
                        }
                    } else {
                        if (val.token) {
                            form.setAtlToken(val.token)
                        }
                        if (val.errorMessage) {
                            form.addErrorWithFileName(val.errorMessage, file.name, progress)
                        } else {
                            form.addError(this._getErrorFromStatus(status, file), progress)
                        }
                    }
                },
                error: function(text, status) {
                    if (this.cancelled) {
                        return
                    }
                    if (status < 0) {
                        form.addError(text, progress)
                    } else {
                        var statusError = this._getErrorFromStatus(status, file);
                        if (statusError) {
                            form.addError(statusError, progress)
                        } else {
                            form.addError(AJS.InlineAttach.Text.tr("upload.error.unknown", file.name), progress)
                        }
                    }
                },
                after: function() {
                    timer.cancel();
                    progress.finish().remove();
                    if (!this.cancelled && !this._finishUpload(upload)) {
                        form.enable()
                    }
                }
            });
            progress.onCancel(function() {
                upload.abort()
            });
            if (that._addUpload(upload)) {
                running = true;
                timer.schedule(AJS.InlineAttach.DISPLAY_WAIT)
            }
        });
        if (running) {
            this.form.disable()
        }
    },
    _getErrorFromStatus: function(status, file) {
        var error;
        if (status === 0) {
            error = AJS.InlineAttach.Text.tr("upload.error.server.no.reply", file.name)
        } else {
            if (status === 400) {
                error = AJS.InlineAttach.Text.tr("upload.error.badrequest", file.name)
            } else {
                if (status === 401) {
                    error = AJS.InlineAttach.Text.tr("upload.error.auth", file.name)
                } else {
                    error = AJS.InlineAttach.Text.tr("upload.error.unknown.status", file.name, status)
                }
            }
        }
        return error
    },
    _cancel: function() {
        this._super();
        this.form.enable()
    }
});
AJS.$.extend(AJS.InlineAttach.AjaxPresenter, {
    DEFAULT_URL: contextPath + "/rest/internal/1.0/AttachTemporaryFile",
    MAX_SELECTED_FILES: 100,
    isSupported: function($element) {
        if (!$element || !$element[0] || !$element[0].files) {
            return false
        } else {
            return AJS.InlineAttach.AjaxUpload.isSupported()
        }
    }
});
AJS.InlineAttach.FileInput = Class.extend({
    init: function($fileInput, testMultiple) {
        this.$element = $fileInput;
        this.$container = $fileInput.parent();
        if (testMultiple && this.$element[0].files !== undefined) {
            this.$element.attr("multiple", "multiple");
            this.multiple = true
        } else {
            this.multiple = false
        }
    },
    clear: function() {
        this.$element.val("");
        return this
    },
    getFiles: function() {
        return this.$element[0].files
    },
    hasFiles: function() {
        return this.getFiles().length > 0
    },
    onChange: function(callback) {
        var that = this;
        this.$element.change(function() {
            if (that.multiple) {
                callback.call(that, this.files)
            } else {
                callback.call(that, that.getFileName())
            }
        });
        return this
    },
    focus: function() {
        if (this._isIE()) {
            var $e = this.$element;
            setTimeout(function() {
                $e.focus()
            }, 0)
        } else {
            this.$element.focus()
        }
        return this
    },
    cloneInput: function() {
        var oldElement = this.$element;
        oldElement.replaceWith(this.$element = oldElement.clone(true));
        oldElement.unbind();
        return oldElement
    },
    getFileName: (function() {
        var fakepath = /^c:\\fakepath\\(?!$)/i;
        return function() {
            var fileName = this.$element.val();
            fileName = fileName.replace(fakepath, "");
            if (this._isIE() && fileName.indexOf("\\") >= 0) {
                fileName = fileName.substring(fileName.lastIndexOf("\\") + 1)
            }
            return fileName
        }
    }
    )(),
    _isIE: function() {
        return AJS.$.browser.msie
    },
    before: function(el) {
        if (el) {
            if (el.$element) {
                el = el.$element
            }
            this.$container.before(el)
        }
    }
});
AJS.InlineAttach.ProgressBar = (function() {
    var options = {
        showPercentage: false,
        height: "2px"
    }
      , count = 0;
    return Class.extend({
        init: function() {
            var $container = this.$element = this._renderers.container();
            this.$progress = this._renderers.progress().appendTo($container);
            this.$progress.progressBar(0, options);
            this.hidden = true;
            this.old = 0
        },
        value: function(value) {
            if (value > 100) {
                value = 100
            } else {
                if (value < 0) {
                    value = 0
                }
            }
            if (this.hidden) {
                this.$progress.show();
                this.hidden = false
            }
            if (this.old !== value) {
                this.$progress.progressBar(value, options);
                if (value >= 100) {
                    this.$progress.fadeOut()
                }
                this.old = value
            }
        },
        _renderers: {
            container: function() {
                return AJS.$("<div>").addClass("file-progress")
            },
            progress: function() {
                return AJS.$("<div>").attr("id", "upload-progress-" + (count++)).hide()
            }
        }
    })
}
)();
AJS.InlineAttach.UploadProgress = Class.extend({
    init: function(file) {
        var $container = this.$element = AJS.InlineAttach.Renderers.container().hide();
        var progress = this.progress = new AJS.InlineAttach.ProgressBar();
        var content = this._renders.content(file.name);
        this.$content = content.$content;
        this.$cancel = content.$cancel;
        $container.append(content.$element).append(progress.$element);
        this.total = file.size;
        this.current = 0;
        this.name = file.name;
        this.timer = new AJS.InlineAttach.Timer(this._update,this);
        this.rateNumerator = 0;
        this.rateDenominator = 0;
        this._title(AJS.InlineAttach.Text.tr("upload.progress.title.waiting"))
    },
    start: function() {
        this.started = this._now();
        this.startedSize = 0;
        return this
    },
    update: function(current) {
        this.timer.cancel();
        return this._update(current)
    },
    _update: function(current) {
        var now = this._now();
        if (current === undefined) {
            current = this.current
        } else {
            if (current !== this.current) {
                this.lastUpdate = now;
                this.current = current
            }
        }
        var text = AJS.InlineAttach.Text;
        var percentage = Math.min(100, Math.round(current / this.total * 100));
        var partSize = text.currentOutOfTotalSize(current, this.total);
        var rateDisplay, remainingDisplay;
        this.progress.value(percentage);
        var timeDiff = (now - this.started) / 1000;
        if (timeDiff >= 2) {
            if (this.startedSize > 0) {
                this._addRate((current - this.startedSize) / timeDiff)
            }
            this.started = now;
            this.startedSize = current
        }
        var rate = this._calcRate();
        if (current >= AJS.InlineAttach.UploadProgress.DATA_MIN && rate > 0) {
            var remaining = Math.max(1, (this.total - current) / rate);
            rateDisplay = text.rate(rate);
            remainingDisplay = text.time(remaining)
        }
        if (now - this.lastUpdate >= AJS.InlineAttach.UploadProgress.STALLED_TIMEOUT) {
            this._content(text.tr("upload.file.stalled", this.name));
            if (rateDisplay) {
                this._title(text.tr("upload.progress.title.known.stalled", rateDisplay, partSize))
            } else {
                this._title(text.tr("upload.progress.title.unknown.stalled", partSize))
            }
        } else {
            if (rateDisplay) {
                this._title(text.tr("upload.progress.title.known", rateDisplay, partSize, remainingDisplay));
                this._content(text.tr("upload.file.remaining", this.name, remainingDisplay))
            } else {
                this._title(partSize);
                this._content(this.name)
            }
        }
        if (current < this.total) {
            this.timer.schedule(AJS.InlineAttach.UploadProgress.UPLOAD_REFRESH)
        }
        return this
    },
    finish: function() {
        this.progress.value(100);
        this.timer.cancel();
        return this
    },
    onCancel: function(callback) {
        var that = this;
        this.$cancel.click(function(e) {
            e.preventDefault();
            callback.call(that)
        });
        return this
    },
    remove: function() {
        this.$element.remove();
        return this
    },
    hide: function() {
        this.$element.hide();
        return this
    },
    show: function() {
        this.$element.fadeIn();
        return this
    },
    _title: function(title) {
        this.$element.attr("title", title);
        return this
    },
    _content: function(rem) {
        this.$content.text(rem);
        return this
    },
    _addRate: function(rate) {
        var weight = AJS.InlineAttach.UploadProgress.WEIGHT;
        this.rateNumerator = this.rateNumerator * weight + rate;
        this.rateDenominator = this.rateDenominator * weight + 1
    },
    _calcRate: function() {
        if (this.rateDenominator == 0) {
            return 0
        }
        var value = this.rateNumerator / this.rateDenominator;
        if (Math.abs(value) < 0.005) {
            return 0
        } else {
            return value
        }
    },
    _now: function() {
        return new Date().getTime()
    },
    _renders: {
        content: function(fileName) {
            var text = AJS.InlineAttach.Text.tr("upload.file.waiting", fileName);
            var $container = AJS.$("<div class='loading file'>");
            var $content = AJS.$("<span>").text(text);
            var $cancel = AJS.$("<a href='#'/>").text(AJS.InlineAttach.Text.tr("upload.cancel"));
            $container.append($content).append(" ").append($cancel);
            return {
                $element: $container,
                $content: $content,
                $cancel: $cancel
            }
        }
    }
});
AJS.$.extend(AJS.InlineAttach.UploadProgress, {
    STALLED_TIMEOUT: 10000,
    UPLOAD_REFRESH: 2000,
    DATA_MIN: 20 * 1024,
    WEIGHT: 0.7
});
AJS.InlineAttach.UnknownProgress = Class.extend({
    init: function(fileName) {
        var content = this._renders.content(fileName);
        this.$element = content.$element;
        this.$cancel = content.$cancel;
        this.$content = content.$content;
        this.fileName = fileName;
        this._title(AJS.InlineAttach.Text.tr("upload.progress.title.waiting"))
    },
    remove: function() {
        this.$element.remove();
        return this
    },
    hide: function() {
        this.$element.hide();
        return this
    },
    show: function() {
        this.$element.fadeIn();
        return this
    },
    start: function() {
        this._title(AJS.InlineAttach.Text.tr("upload.progress.title.running"));
        this._content(this.fileName);
        return this
    },
    onCancel: function(callback) {
        var that = this;
        this.$cancel.click(function(e) {
            e.preventDefault();
            callback.call(that)
        });
        return this
    },
    _title: function(title) {
        this.$element.attr("title", title);
        return this
    },
    _content: function(text) {
        this.$content.text(text);
        return this
    },
    _renders: {
        content: function(fileName) {
            var text = AJS.InlineAttach.Text.tr("upload.file.waiting", fileName);
            var $cancel = AJS.$("<a href='#'/>").text(AJS.InlineAttach.Text.tr("upload.cancel"));
            var $loading = AJS.$("<div class='loading file'>");
            var $content = AJS.$("<span>").text(text);
            $loading.append($content).append(" ").append($cancel);
            var $container = AJS.InlineAttach.Renderers.container().append($loading);
            return {
                $element: $container,
                $cancel: $cancel,
                $content: $content
            }
        }
    }
});
AJS.InlineAttach.Form = Class.extend({
    init: function(fileInput) {
        this.fileSelector = fileInput;
        this.$form = fileInput.$element.closest("form");
        this.maxSize = parseInt(this.$form.find("#attach-max-size").text() || AJS.$("#attach-max-size").text());
        if (isNaN(this.maxSize)) {
            throw "Unable to find maximum upload size on form."
        }
        var assigned = false;
        var val = parseInt(this.$form.find(":input[name=id]").val());
        if (!isNaN(val)) {
            assigned = true;
            this.issueId = val
        }
        val = parseInt(this.$form.find(":input[name=pid]").val());
        if (!isNaN(val)) {
            assigned = true;
            this.projectId = val
        }
        if (!assigned) {
            throw "Unable to find either an issueId or projectId to submit the attachment to."
        }
    },
    getAtlToken: function() {
        var $atlToken = this.$form.find("input[name='atl_token']");
        if ($atlToken.length > 0) {
            return $atlToken.val()
        } else {
            return atl_token()
        }
    },
    setAtlToken: function(token) {
        var $token = this.$form.find("input[name='atl_token']");
        if ($token.length > 0) {
            $token.val(token)
        } else {
            JIRA.XSRF.updateTokenOnPage(token)
        }
        return this
    },
    disable: function() {
        this._getFormSubmits().attr("disabled", "disabled");
        return this
    },
    enable: function() {
        this._getFormSubmits().removeAttr("disabled");
        return this
    },
    addProgress: function(file) {
        var prog = new AJS.InlineAttach.UploadProgress(file);
        this._addElement(prog.$element);
        return prog
    },
    addStaticProgress: function(fileName) {
        var prog = new AJS.InlineAttach.UnknownProgress(fileName);
        this._addElement(prog.$element);
        return prog
    },
    addTemporaryFileCheckbox: function(value, name, replaceObj, file) {
        var $thumbNail = this.addLocalThumbnailImage(name, file);
        var $element = AJS.InlineAttach.Renderers.container();
        var $label = AJS.$("<label>").text(name);
        var $check = AJS.$("<input type='checkbox' class='checkbox' name='filetoconvert' checked='checked'>").attr({
            "value": value,
            "title": AJS.InlineAttach.Text.tr("upload.checkbox.title")
        });
        $element.append($check).append($label);
        if ($thumbNail) {
            $element.append(AJS.$("<br/>")).append($thumbNail)
        }
        $element.hide();
        this._replaceElement($element, replaceObj);
        return this
    },
    addLocalThumbnailImage: function(name, file) {
        var $thumbNail = null;
        window.URL = window.webkitURL || window.URL;
        if (file && window.URL && window.URL.createObjectURL) {
            var imageType = /image.*/;
            if (file.type.match(imageType)) {
                var that = this;
                var title = name + " - " + AJS.InlineAttach.Text.fileSize(file.size) + " - " + file.type;
                var img = document.createElement("img");
                img.title = title;
                img.alt = title;
                img.onload = function(e) {
                    var aspectRatio = that.getAspectRatio(100, 100, img.width, img.height);
                    img.width = Math.round(img.width / aspectRatio);
                    img.height = Math.round(img.height / aspectRatio);
                    $thumbNail.show();
                    window.URL.revokeObjectURL(img.src)
                }
                ;
                img.src = window.URL.createObjectURL(file);
                $thumbNail = jQuery(img).hide()
            }
        }
        return $thumbNail
    },
    getAspectRatio: function(maxWidth, maxHeight, origWidth, origHeight) {
        if (origWidth > maxWidth) {
            return Math.round(origWidth / maxWidth)
        } else {
            if (origHeight > maxHeight) {
                return Math.round(origHeight / maxHeight)
            } else {
                return 1
            }
        }
    },
    addErrorWithFileName: function(error, fileName, replaceObj) {
        if (error.indexOf(fileName) == -1) {
            error = AJS.InlineAttach.Text.tr("upload.error.server", fileName, error)
        }
        return this.addError(error, replaceObj)
    },
    addError: function(error, replaceObj) {
        var $element = AJS.InlineAttach.Renderers.container();
        $element.addClass("error").append(AJS.$("<div>").text(error)).hide();
        this._replaceElement($element, replaceObj);
        return $element
    },
    clearErrors: function() {
        this.$form.find("div.error").remove();
        return this
    },
    cloneFileInput: function() {
        return this.fileSelector.cloneInput()
    },
    onCancel: function(callback) {
        var $cancel = this.$form.find("a.cancel");
        $cancel.click(AJS.$.proxy(callback, this));
        return this
    },
    _getFormSubmits: function() {
        return this.$form.find("input[type=submit]")
    },
    _addElement: function(el) {
        this.fileSelector.before(el)
    },
    _replaceElement: function($element, replaceObj) {
        if (replaceObj && replaceObj.$element) {
            replaceObj.$element.replaceWith($element)
        } else {
            this._addElement($element)
        }
        $element.fadeIn()
    }
});
AJS.InlineAttach.FormUpload = Class.extend({
    init: function(options) {
        var scope = options.scope || null;
        var rescope = AJS.InlineAttach.rescope;
        this.$input = options.$input;
        this.url = options.url;
        this.params = options.params || {};
        this.successcb = rescope(options.success, scope);
        this.errorcb = rescope(options.error, scope);
        this.before = rescope(options.before, scope);
        this.after = rescope(options.after, scope);
        this.abortcb = rescope(options.abort, scope);
        this.aborted = false;
        this.$form = null;
        this.xhr = null
    },
    upload: function() {
        if (this.aborted) {
            return
        }
        var url = this.url;
        var params = AJS.$.param(this.params);
        if (params) {
            url = url + "?" + params
        }
        var $attachForm = this.$form = this._renders.form(url)
          , that = this;
        this._addToBody($attachForm.append(this.$input));
        $attachForm.ajaxForm({
            dataType: "json",
            data: this.params,
            timeout: 0,
            beforeSend: function(xhr) {
                that.xhr = xhr
            },
            beforeSubmit: function() {
                that.before()
            },
            error: function(xhr) {
                if (that.aborted) {
                    that.abortcb()
                } else {
                    var text = (xhr && xhr.responseText) || "";
                    that.errorcb(text)
                }
            },
            success: function(data) {
                that.successcb(data || {})
            },
            complete: function() {
                if (that.$form) {
                    that.$form.remove();
                    that.$form = null
                }
                that.after()
            }
        });
        $attachForm.submit()
    },
    abort: function() {
        if (!this.aborted) {
            this.aborted = true;
            if (this.xhr) {
                this.xhr.abort();
                this.xhr = null
            } else {
                this.abortcb();
                this.after()
            }
        }
    },
    _addToBody: function($form) {
        AJS.$("body").append($form)
    },
    _renders: {
        form: function(postUrl) {
            return AJS.$("<form method='post' enctype='multipart/form-data'/>").attr("action", postUrl).hide()
        }
    }
});
AJS.InlineAttach.AjaxUpload = Class.extend({
    init: function(options) {
        var scope = options.scope || null;
        var rescope = AJS.InlineAttach.rescope;
        this.file = options.file;
        this.url = options.url;
        this.params = options.params || {};
        this.beforecb = rescope(options.before, scope);
        this.progresscb = rescope(options.progress, scope);
        this.errorcb = rescope(options.error, scope);
        this.successcb = rescope(options.success, scope);
        this.abortcb = rescope(options.abort, scope);
        this.finalcb = rescope(options.after, scope);
        this.aborted = false
    },
    upload: function() {
        if (this.aborted || this.xhr) {
            return
        }
        var xhr = this.xhr = AJS.InlineAttach.AjaxUpload.xhr();
        xhr.upload.onprogress = AJS.$.proxy(this._upload, this);
        xhr.onreadystatechange = AJS.$.proxy(this._statechange, this);
        var url = this.url;
        var params = AJS.$.param(this.params);
        if (params) {
            url = url + "?" + params
        }
        this.beforecb();
        try {
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", this.file.type || "application/octet-stream");
            xhr.send(this.file)
        } catch (e) {
            this._clienterror(e, this.file)
        }
    },
    abort: function() {
        if (!this.aborted) {
            this.aborted = true;
            if (this.xhr) {
                this.xhr.abort()
            } else {
                this.abortcb();
                this.finalcb()
            }
        }
    },
    _statechange: function() {
        if (this.xhr.readyState === 4) {
            if (this.aborted) {
                this.abortcb()
            } else {
                try {
                    this.successcb(JSON.parse(this.xhr.responseText), this.xhr.status, this.xhr)
                } catch (e) {
                    this.errorcb(this.xhr.responseText, this.xhr.status, this.xhr)
                }
                this.xhr.upload.onprogress = this.xhr.statechange = null
            }
            this.finalcb()
        }
    },
    _clienterror: function(e, file) {
        this.errorcb(AJS.InlineAttach.AjaxUpload.getClientErrorMessage(e, file), -1, this.xhr);
        this.finalcb()
    },
    _upload: function(event) {
        if (event.lengthComputable) {
            this.progresscb(event.loaded)
        }
    }
});
AJS.$.extend(AJS.InlineAttach.AjaxUpload, {
    isSupported: function() {
        return AJS.InlineAttach.AjaxUpload._fileApiSupport(window) && AJS.InlineAttach.AjaxUpload._xhrSupport()
    },
    xhr: function() {
        var fn = AJS.InlineAttach.AjaxUpload._xhrJquery();
        if (!fn) {
            fn = AJS.InlineAttach.AjaxUpload._xhrDirect
        }
        AJS.InlineAttach.AjaxUpload.xhr = fn;
        return fn()
    },
    getClientErrorMessage: function(e, file) {
        var safeName;
        try {
            safeName = file.name
        } catch (ignored) {
            safeName = "<unknown>"
        }
        if (e.name === "NS_ERROR_FILE_ACCESS_DENIED") {
            return AJS.InlineAttach.Text.tr("upload.error.no.access", safeName)
        } else {
            if (e.name === "NS_ERROR_FILE_NOT_FOUND" || e.name === "NS_ERROR_FILE_TARGET_DOES_NOT_EXIST") {
                return AJS.InlineAttach.Text.tr("upload.error.does.not.exist", safeName)
            } else {
                return AJS.InlineAttach.Text.tr("upload.error.client.unknown", safeName, e.message || e)
            }
        }
    },
    _xhrJquery: function() {
        var settings = AJS.$.ajaxSettings;
        return (settings && settings.xhr) || null
    },
    _xhrDirect: function() {
        try {
            return new XMLHttpRequest()
        } catch (e) {
            return null
        }
    },
    _xhrSupport: function() {
        try {
            var xhr = AJS.InlineAttach.AjaxUpload.xhr();
            if (xhr && xhr.upload) {
                return true
            }
        } catch (e) {}
        return false
    },
    _fileApiSupport: function(window) {
        return window.File && window.FileList && (!AJS.$.browser.mozilla || window.FileReader)
    }
});
AJS.InlineAttach.Timer = Class.extend({
    init: function(callback, scope) {
        this.callback = AJS.InlineAttach.rescope(callback, scope || this);
        this._callback = AJS.$.proxy(this._callback, this);
        this.timeoutId = null
    },
    cancel: function() {
        if (this.timeoutId !== null) {
            this._endTimeout(this.timeoutId);
            this.timeoutId = null
        }
        return this
    },
    schedule: function(timeout) {
        this.cancel();
        this.timeoutId = this._startTimeout(this._callback, timeout);
        return this
    },
    _callback: function() {
        this.timeoutId = null;
        this.callback()
    },
    _startTimeout: function(fn, timeout) {
        return window.setTimeout(fn, timeout)
    },
    _endTimeout: function(id) {
        window.clearTimeout(id)
    }
});
AJS.InlineAttach.Text = (function() {
    var kB = 1024;
    var MB = 1024 * kB;
    var GB = 1024 * MB;
    var bMax = Math.floor(kB * 0.995);
    var kBMax = Math.floor(MB * 0.995);
    var MBMax = Math.floor(GB * 0.995);
    return {
        "upload.empty.file": "Cannot attach empty file {0}.",
        "upload.too.big": "{0} is too large to attach. Attachment is {1} but the largest allowed attachment is {2}.",
        "upload.error.bad.response": "Cannot attach file {0}: Unexpected server response.",
        "upload.error.unknown.status": "Cannot attach file {0}: Unknown server error ({1}).",
        "upload.error.auth": "Cannot attach file {0}: You do not have permission to attach a file to the issue.",
        "upload.error.badrequest": "Cannot attach file {0}. Browser made bad request to the server.",
        "upload.error.server": "Cannot attach file {0}: {1}",
        "upload.cancel": "Cancel",
        "upload.file.remaining": "{0} - {1} left.",
        "upload.file.waiting": "{0} - waiting.",
        "upload.file.stalled": "{0} - stalled.",
        "upload.checkbox.title": "Clear check box to prevent file being attached",
        "upload.xsrf.timeout": "Cannot attach file {0}: Your session has timed out or you were logged out. Please save your work and reload the page.",
        "upload.error.unknown": "Cannot attach file {0}: Unknown server error.",
        "upload.progress.title.waiting": "Waiting for other uploads to complete.",
        "upload.progress.title.running": "Uploading.",
        "upload.progress.title.unknown.stalled": "{0}, stalled.",
        "upload.progress.title.known": "{0} - {1}, {2} left.",
        "upload.progress.title.known.stalled": "{0} - {1}, stalled.",
        "upload.kilobyte": "{0} kB",
        "upload.kilobyte.part": "{0}\/{1} kB",
        "upload.megabyte": "{0} MB",
        "upload.megabyte.part": "{0}\/{1} MB",
        "upload.gigabyte": "{0} GB",
        "upload.gigabyte.part": "{0}\/{1} GB",
        "upload.seconds": "{0} sec",
        "upload.minutes": "{0} min",
        "upload.hours": "{0} hr",
        "upload.hours.minutes": "{0} hr {1} min",
        "upload.bytes.per.second": "{0} B\/sec",
        "upload.kilobytes.per.second": "{0} kB\/sec",
        "upload.megabytes.per.second": "{0} MB\/sec",
        "upload.error.no.access": "Browser does not have permission to access {0}.",
        "upload.error.does.not.exist": "{0} does not exist.",
        "upload.error.client.unknown": "An unknown error occured on the browser while trying to attach {0}: {1}.",
        "upload.error.too.many.files": "You are trying to attach {0} files. Only {1} files can be attached at a time.",
        "upload.error.server.no.reply": "Cannot attach file {0}: Unable to communicate with JIRA.",
        tr: function(key) {
            if (arguments.length == 0) {
                return undefined
            } else {
                if (arguments.length == 1) {
                    return this[key] || key
                } else {
                    if (this[key]) {
                        var args = AJS.InlineAttach.copyArrayLike(arguments);
                        args[0] = this[key];
                        return AJS.format.apply(AJS, args)
                    } else {
                        return key
                    }
                }
            }
        },
        fileSize: function() {
            if (arguments.length == 0) {
                return undefined
            } else {
                var key, b = AJS.InlineAttach.Text._classifySize(arguments[0]);
                if (b.unit === kB) {
                    key = "upload.kilobyte"
                } else {
                    if (b.unit === MB) {
                        key = "upload.megabyte"
                    } else {
                        key = "upload.gigabyte"
                    }
                }
                if (arguments.length == 1) {
                    return this.tr(key, b.convert(arguments[0]))
                } else {
                    var result = new Array(arguments.length);
                    for (var i = 0; i < arguments.length; i++) {
                        result[i] = this.tr(key, b.convert(arguments[i]))
                    }
                    return result
                }
            }
        },
        currentOutOfTotalSize: function(current, total) {
            var b = this._classifySize(total), key;
            if (b.unit === kB) {
                key = "upload.kilobyte.part"
            } else {
                if (b.unit === MB) {
                    key = "upload.megabyte.part"
                } else {
                    key = "upload.gigabyte.part"
                }
            }
            return this.tr(key, b.convert(current), b.convert(total))
        },
        _classifySize: function(size) {
            var base;
            if (size <= kBMax) {
                base = kB
            } else {
                if (size <= MBMax) {
                    base = MB
                } else {
                    base = GB
                }
            }
            return {
                unit: base,
                convert: function(s) {
                    return AJS.InlineAttach.Text._toDisplay(s / base)
                }
            }
        },
        time: function(seconds) {
            if (seconds < 60) {
                return this.tr("upload.seconds", Math.floor(seconds))
            } else {
                var minutes = seconds / 60;
                if (minutes < 60) {
                    return this.tr("upload.minutes", Math.floor(minutes))
                } else {
                    var hours = Math.floor(minutes / 60);
                    minutes = Math.floor(minutes % 60);
                    if (minutes > 0) {
                        return this.tr("upload.hours.minutes", hours, minutes)
                    } else {
                        return this.tr("upload.hours", hours)
                    }
                }
            }
        },
        rate: function(bytesPerSecond) {
            if (bytesPerSecond <= bMax) {
                return this.tr("upload.bytes.per.second", AJS.InlineAttach.Text._toDisplay(bytesPerSecond))
            } else {
                if (bytesPerSecond <= kBMax) {
                    return this.tr("upload.kilobytes.per.second", AJS.InlineAttach.Text._toDisplay(bytesPerSecond / kB))
                } else {
                    return this.tr("upload.megabytes.per.second", AJS.InlineAttach.Text._toDisplay(bytesPerSecond / MB))
                }
            }
        },
        _toDisplay: function(number) {
            if (number < 0.005) {
                return "0"
            } else {
                return (Math.round(number * 100) / 100).toFixed(2)
            }
        }
    }
}
)();
jQuery.fn.inlineAttach = function() {
    var res = [];
    this.each(function() {
        res.push(new AJS.InlineAttach(this))
    });
    return res
}
;
JIRA.Dialogs.createLinkIssueDialog = function() {
    function markSelectedLinkType(activeId, linkTypes) {
        var hasSelected = false;
        jQuery.each(linkTypes, function(i, linkType) {
            if (linkType.id === activeId) {
                linkType.isSelected = true;
                hasSelected = true;
                return false
            }
        });
        if (!hasSelected) {
            linkTypes[0].isSelected = true
        }
        return linkTypes
    }
    function getRemoteIssueLinks(issueId) {
        var deferred = jQuery.Deferred();
        JIRA.SmartAjax.makeRequest({
            url: contextPath + "/rest/viewIssue/1/remoteIssueLink/linkType?issueId=" + issueId,
            complete: function(xhr, textStatus, smartAjaxResult) {
                if (smartAjaxResult.successful) {
                    deferred.resolve(smartAjaxResult.data)
                } else {
                    deferred.reject(JIRA.SmartAjax.buildDialogErrorContent(smartAjaxResult))
                }
            }
        });
        return deferred.promise()
    }
    function getTabContent(dialog) {
        var deferred = jQuery.Deferred()
          , ajaxOptions = JIRA.Dialogs.getDefaultAjaxOptions.call(dialog);
        ajaxOptions.complete = function(xhr, textStatus, smartAjaxResult) {
            if (smartAjaxResult.successful) {
                deferred.resolve(smartAjaxResult.data)
            } else {
                deferred.reject(JIRA.SmartAjax.buildDialogErrorContent(smartAjaxResult))
            }
        }
        ;
        JIRA.SmartAjax.makeRequest(ajaxOptions);
        return deferred.promise()
    }
    function getActiveTabId(dialog) {
        return dialog.$activeTrigger.attr("id")
    }
    return function(trigger) {
        return new JIRA.FormDialog({
            id: "link-issue-dialog",
            isIssueDialog: true,
            trigger: trigger,
            onSuccessfulSubmit: function(data, smartAjaxResponse) {
                if (smartAjaxResponse.getResponseHeader("X-Atlassian-Dialog-Msg-Type") !== "warning") {
                    JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit.apply(this, arguments)
                }
            },
            issueMsg: "thanks_issue_linked",
            widthClass: "large",
            stacked: true,
            content: function(ready) {
                var dialog = this
                  , issueId = JIRA.Issue.getIssueId() || JIRA.IssueNavigator.getSelectedIssueId();
                getTabContent(dialog).done(function(tabContent) {
                    getRemoteIssueLinks(issueId).done(function(linkTypes) {
                        linkTypes = markSelectedLinkType(getActiveTabId(dialog), linkTypes);
                        ready(JIRA.Templates.LinkIssue.dialog({
                            linkTypes: linkTypes,
                            tabContent: tabContent
                        }));
                        jQuery.each(linkTypes, function(i, linkType) {
                            var focusElementSelector;
                            if (linkType.isSelected === true) {
                                focusElementSelector = "[name='" + linkType.focusedFieldName + "']";
                                if (jQuery(focusElementSelector).length === 0) {
                                    focusElementSelector = "#" + linkType.id
                                }
                                dialog._focusFirstField(focusElementSelector)
                            }
                        })
                    }).fail(function(errorContent) {
                        ready(errorContent)
                    })
                }).fail(function(errorContent) {
                    ready(errorContent)
                })
            },
            formatSubmitResponseContent: function(content) {
                this.get$popupContent().find(".dialog-pane").html(content);
                return this.get$popupContent().html()
            },
            onContentRefresh: function() {
                this.bindAnchorsToDialog(this.get$popupContent().find(".dialog-menu-item "))
            }
        })
    }
}();
// This file was automatically generated from linkissue.soy.
// Please don't edit this file by hand.

if (typeof JIRA == 'undefined') {
    var JIRA = {};
}
if (typeof JIRA.Templates == 'undefined') {
    JIRA.Templates = {};
}
if (typeof JIRA.Templates.LinkIssue == 'undefined') {
    JIRA.Templates.LinkIssue = {};
}

JIRA.Templates.LinkIssue.dialog = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<div class="aui-group"><div class="aui-item dialog-menu-group"><ul class="dialog-menu">');
    var linkTypeList4 = opt_data.linkTypes;
    var linkTypeListLen4 = linkTypeList4.length;
    for (var linkTypeIndex4 = 0; linkTypeIndex4 < linkTypeListLen4; linkTypeIndex4++) {
        var linkTypeData4 = linkTypeList4[linkTypeIndex4];
        output.append('<li><button id="', soy.$$escapeHtml(linkTypeData4.id), '" data-url="', soy.$$escapeHtml(linkTypeData4.url), '" class="dialog-menu-item ', (linkTypeData4.isSelected) ? 'selected' : '', '">', soy.$$escapeHtml(linkTypeData4.label), '</button></li>');
    }
    output.append('</ul></div><div class="aui-item dialog-pane">', opt_data.tabContent, '</div></div>');
    return opt_sb ? '' : output.toString();
}
;

JIRA.setFocus = (function() {
    var _defaultExcludeParentSelector = "form.dont-default-focus"
      , _defaultFocusElementSelector = "input:not(#issue-filter-submit), select, textarea, button, a.cancel"
      , _defaultParentElementSelectors = ["div.aui-popup-content", "form.aui", "form"]
      , _configurationStack = [];
    var _focusIn = function(context, parentSelector, excludeParentSelector, elementSelector) {
        var found = false;
        AJS.$(parentSelector, context).not(excludeParentSelector).find(elementSelector).each(function() {
            var elem = AJS.$(this);
            if (elem.is(":enabled, a") && elem.is(":visible")) {
                elem.focus();
                if (elem.is(":text, :password, textarea")) {
                    if (elem.is(".focus-select-end")) {
                        elem.setCaretToPosition(elem[0].value.length)
                    } else {
                        elem.setSelectionRange(0, elem[0].value.length)
                    }
                }
                found = true;
                return false
            }
        });
        return found
    }
      , _defaultFocusNow = function() {
        var i = 0
          , currentConfig = _configurationStack[_configurationStack.length - 1];
        while (!_focusIn(currentConfig.context, currentConfig.parentElementSelectors[i], currentConfig.excludeParentSelector, currentConfig.focusElementSelector) && i < currentConfig.parentElementSelectors.length) {
            i++
        }
    };
    return {
        FocusConfiguration: function() {
            this.context = document;
            this.excludeParentSelector = _defaultExcludeParentSelector;
            this.focusElementSelector = _defaultFocusElementSelector;
            this.parentElementSelectors = _defaultParentElementSelectors.slice(0);
            this.focusNow = _defaultFocusNow
        },
        triggerFocus: function() {
            if (_configurationStack.length == 0) {
                _configurationStack.push(new this.FocusConfiguration())
            }
            _configurationStack[_configurationStack.length - 1].focusNow()
        },
        pushConfiguration: function(configuration) {
            _configurationStack.push(configuration)
        },
        popConfiguration: function() {
            _configurationStack.pop()
        }
    }
}
)();
jQuery(function() {
    JIRA.setFocus.triggerFocus()
});
JIRA.Users = {};
JIRA.Users.LoggedInUser = {};
JIRA.Users.LoggedInUser.userName = function() {
    return AJS.Meta.get("remote-user")
}
;
JIRA.Users.LoggedInUser.isAnonymous = function() {
    return AJS.Meta.get("remote-user") === ""
}
;
JIRA.Settings = {};
JIRA.Settings.ApplicationTitle = {
    get: function() {
        return AJS.Meta.get("app-title")
    }
};
JIRA.ProgressiveDataSet = Backbone.Collection.extend({
    initialize: function(models, options) {
        options || (options = {});
        if (options.matcher) {
            this.matcher = options.matcher
        }
        if (options.model) {
            this.model = options.model
        }
        this._idAttribute = (new this.model()).idAttribute;
        this._maxResults = options.maxResults || 5;
        this._queryData = options.queryData || {};
        this._queryParamKey = options.queryParamKey || "q";
        this._queryEndpoint = options.queryEndpoint || "";
        this.value = null;
        this.queryCache = {};
        this.activeQueryCount = 0;
        _.bindAll(this, "query", "respond")
    },
    url: function() {
        return this._queryEndpoint
    },
    query: function(query) {
        var remote, results;
        this.value = query;
        results = this.getFilteredResults(query);
        this.respond(query, results);
        if (!query || !this._queryEndpoint || this.hasQueryCache(query) || !this.shouldGetMoreResults(results)) {
            return
        }
        remote = this.fetch(query);
        this.activeQueryCount++;
        this.trigger("activity", {
            activity: true
        });
        remote.always(_.bind(function() {
            this.activeQueryCount--;
            this.trigger("activity", {
                activity: !!this.activeQueryCount
            })
        }, this));
        remote.done(_.bind(function(resp, succ, xhr) {
            this.addQueryCache(query, resp, xhr)
        }, this));
        remote.done(_.bind(function() {
            query = this.value;
            results = this.getFilteredResults(query);
            this.respond(query, results)
        }, this))
    },
    getQueryData: function(query) {
        var params = _.isFunction(this._queryData) ? this._queryData(query) : this._queryData;
        var data = _.extend({}, params);
        data[this._queryParamKey] = query;
        return data
    },
    fetch: function(query) {
        var data = this.getQueryData(query);
        var params = {
            add: true,
            data: data
        };
        var remote = Backbone.Collection.prototype.fetch.call(this, params);
        return remote
    },
    respond: function(query, results) {
        this.trigger("respond", {
            query: query,
            results: results
        });
        return results
    },
    matcher: function(item, query) {},
    getFilteredResults: function(query) {
        var results = [];
        if (!query) {
            return results
        }
        results = this.filter(function(item) {
            return (true == this.matcher(item, query))
        }, this);
        if (this._maxResults) {
            results = _.first(results, this._maxResults)
        }
        return results
    },
    addQueryCache: function(query, response, xhr) {
        var cache = this.queryCache;
        var results = this.parse(response, xhr);
        cache[query] = _.pluck(results, this._idAttribute)
    },
    hasQueryCache: function(query) {
        return this.queryCache.hasOwnProperty(query)
    },
    findQueryCache: function(query) {
        return this.queryCache[query]
    },
    shouldGetMoreResults: function(results) {
        return results.length < this._maxResults
    },
    setMaxResults: function(number) {
        this._maxResults = number;
        this.value && this.respond(this.value, this.getFilteredResults(this.value))
    }
});
AJS.UncomplicatedInlineLayer = AJS.InlineLayer.extend({
    init: function(options) {
        options || (options = {});
        options.contentRetriever = new AJS.ContentRetriever();
        AJS.InlineLayer.prototype.init.call(this, options)
    },
    content: function() {
        if (arguments.length) {
            this.$content = arguments[0]
        }
        return this.$content
    },
    refreshContent: function(callback) {
        this.layer().empty().append(this.content());
        if (AJS.$.isFunction(callback)) {
            callback.call(this)
        }
        this.contentChange()
    }
});
AJS.MentionGroup = AJS.Group.extend({
    _makeSelection: function(e) {
        if (this.items && this.items[this.index]) {
            this.items[this.index].trigger("accept");
            e.preventDefault()
        }
    },
    keys: {
        "Up": function(e) {
            this.shiftFocus(-1);
            e.preventDefault()
        },
        "Down": function(e) {
            this.shiftFocus(1);
            e.preventDefault()
        },
        "Return": function(e) {
            this._makeSelection(e)
        },
        "Tab": function(e) {
            this._makeSelection(e)
        }
    }
});
JIRA.MentionUserModel = Backbone.Model.extend({
    idAttribute: "name"
});
JIRA.Mention = AJS.Control.extend({
    CLASS_SIGNATURE: "AJS_MENTION",
    lastInvalidUsername: "",
    lastRequestMatch: true,
    lastValidUsername: "",
    init: function() {
        var instance = this;
        this.listController = new AJS.MentionGroup();
        this.dataSource = new JIRA.ProgressiveDataSet([],{
            model: JIRA.MentionUserModel,
            queryEndpoint: contextPath + "/rest/api/2/user/viewissue/search",
            queryParamKey: "username",
            queryData: _.bind(this._getQueryParams, this)
        });
        this.dataSource.matcher = function(model, query) {
            var matches = false;
            matches = matches || instance._stringPartStartsWith(model.get("name"), query);
            matches = matches || instance._stringPartStartsWith(model.get("displayName"), query);
            return matches
        }
        ;
        this.dataSource.bind("respond", function(response) {
            var results = response.results;
            var username = response.query;
            if (!username) {
                return
            }
            if (!results.length) {
                if (username) {
                    if (instance.dataSource.hasQueryCache(username)) {
                        if (!instance.lastInvalidUsername || username.length <= instance.lastInvalidUsername.length) {
                            instance.lastInvalidUsername = username
                        }
                    }
                }
                instance.lastRequestMatch = false
            } else {
                instance.lastInvalidUsername = "";
                instance.lastValidUsername = username;
                instance.lastRequestMatch = true
            }
            var $suggestions = instance.generateSuggestions(results, username);
            instance.updateSuggestions($suggestions)
        });
        this.dataSource.bind("activity", function(response) {
            if (response.activity) {
                instance.layerController._showLoading()
            } else {
                instance.layerController._hideLoading()
            }
        })
    },
    updateSuggestions: function($suggestions) {
        if (this.layerController) {
            this.layerController.content($suggestions);
            this.layerController.show();
            this.layerController.refreshContent()
        }
    },
    _getQueryParams: function() {
        return this.restParams
    },
    _setQueryParams: function() {
        var params = {
            issueKey: this.$textarea.attr("data-issuekey"),
            projectKey: this.$textarea.attr("data-projectkey"),
            maxResults: 10
        };
        if (JIRA.Dialog.current && JIRA.Dialog.current.options.id === "create-issue-dialog") {
            delete params.issueKey
        }
        this.restParams = params
    },
    textarea: function(textarea) {
        var instance = this;
        if (textarea) {
            this.$textarea = AJS.$(textarea);
            AJS.$("#mentionDropDown").remove();
            this.layerController = new AJS.UncomplicatedInlineLayer({
                offsetTarget: this.textarea(),
                allowDownsize: true,
                width: function() {
                    return instance.$textarea.width()
                }
            });
            this.layerController.bind("showLayer", function() {
                instance.listController.trigger("focus")
            }).bind("hideLayer", function() {
                instance.listController.trigger("blur")
            }).bind("contentChanged", function() {
                if (!instance.layerController.$content) {
                    return
                }
                instance.listController.removeAllItems();
                instance.layerController.$content.find("li").each(function() {
                    var li = AJS.$(this);
                    li.click(function(event) {
                        instance._acceptSuggestion(li);
                        event.preventDefault()
                    });
                    instance.listController.addItem(new AJS.Dropdown.ListItem({
                        element: li,
                        autoScroll: true
                    }))
                });
                instance.listController.prepareForInput();
                instance.listController.shiftFocus(0)
            }).bind("setLayerPosition", function(event, positioning) {
                if (JIRA.Dialog.current && JIRA.Dialog.current.$form) {
                    var buttonRow = JIRA.Dialog.current.$popup.find(".buttons-container:visible");
                    if (buttonRow.length && positioning.top > buttonRow.offset().top) {
                        positioning.top = buttonRow.offset().top
                    }
                }
            });
            this.layerController.layer().attr("id", "mentionDropDown");
            this._assignEvents("textarea", instance.$textarea);
            this._setQueryParams()
        } else {
            return this.$textarea
        }
    },
    generateSuggestions: function(data, username) {
        var regex = new RegExp("(^|.*?(\\s+|\\())(" + RegExp.escape(username) + ")(.*)","i");
        function highlight(text) {
            var result = {
                text: text
            };
            if (text.toLowerCase().indexOf(username.toLowerCase()) > -1) {
                text.replace(regex, function(_, prefix, spaceOrParenthesis, match, suffix) {
                    result = {
                        prefix: prefix,
                        match: match,
                        suffix: suffix
                    }
                })
            }
            return result
        }
        var filteredData = _.map(data, function(model) {
            var user = model.toJSON();
            user.username = user.name;
            user.emailAddress = highlight(user.emailAddress);
            user.displayName = highlight(user.displayName);
            user.name = highlight(user.name);
            return user
        });
        return AJS.$(JIRA.Templates.mentionsSuggestions({
            suggestions: filteredData,
            query: username,
            activity: (this.dataSource.activeQueryCount > 0)
        }))
    },
    _acceptSuggestion: function(li) {
        this._hide();
        this._replaceCurrentUserName(li.find("a").attr("rel"));
        this.listController.removeAllItems()
    },
    _replaceCurrentUserName: function(selectedUserName) {
        var raw = this._rawInputValue()
          , caretPos = this._getCaretPosition()
          , beforeCaret = raw.substr(0, caretPos)
          , wordStartIndex = JIRA.Mention.Matcher.getLastWordBoundaryIndex(beforeCaret, true);
        var before = raw.substr(0, wordStartIndex + 1).replace(/\r\n/g, "\n");
        var username = "[~" + selectedUserName + "]";
        var after = raw.substr(caretPos);
        this._rawInputValue([before, username, after].join(""));
        this._setCursorPosition(before.length + username.length)
    },
    _setCursorPosition: function(index) {
        var input = this.$textarea.get(0);
        if (input.setSelectionRange) {
            input.focus();
            input.setSelectionRange(index, index)
        } else {
            if (input.createTextRange) {
                var range = input.createTextRange();
                range.collapse(true);
                range.moveEnd("character", index);
                range.moveStart("character", index);
                range.select()
            }
        }
    },
    _getCaretPosition: function() {
        var element = this.$textarea.get(0)
          , raw = this._rawInputValue();
        var start = 0;
        var range, len, normalizedValue, textInputRange, endRange;
        if (typeof element.selectionStart == "number") {
            start = element.selectionStart
        } else {
            if (document.selection && element.createTextRange) {
                range = document.selection.createRange();
                start = raw.length;
                if (range && range.parentElement() == element) {
                    len = raw.length;
                    normalizedValue = raw.replace(/\r\n/g, "\n");
                    textInputRange = element.createTextRange();
                    textInputRange.moveToBookmark(range.getBookmark());
                    endRange = element.createTextRange();
                    endRange.collapse(false);
                    if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                        start = len
                    } else {
                        start = -textInputRange.moveStart("character", -len);
                        start += normalizedValue.slice(0, start).split("\n").length - 1
                    }
                }
            }
        }
        return start
    },
    _rawInputValue: function() {
        var el = this.$textarea.get(0);
        if (typeof arguments[0] == "string") {
            el.value = arguments[0]
        }
        return el.value
    },
    fetchUserNames: function(username) {
        this.dataSource.query(username)
    },
    _getCurrentUserName: function() {
        return this.currentUserName
    },
    _hide: function() {
        this.layerController.hide()
    },
    _show: function() {
        this.layerController.show()
    },
    _keyUp: function() {
        var caret = this._getCaretPosition();
        var username = this._getUserNameFromInput(caret);
        username = jQuery.trim(username || "");
        if (this._isNewRequestRequired(username)) {
            this.fetchUserNames(username)
        } else {
            if (!this._keepSuggestWindowOpen(username)) {
                this._hide()
            }
        }
        this.lastQuery = username;
        delete this.willCheck
    },
    _keepSuggestWindowOpen: function(username) {
        if (!username) {
            return false
        }
        if (this.layerController.isVisible()) {
            return this.dataSource.activeQueryCount || this.lastRequestMatch
        }
        return false
    },
    _isNewRequestRequired: function(username) {
        if (!username) {
            return false
        }
        username = jQuery.trim(username);
        if (username === this.lastQuery) {
            return false
        } else {
            if (this.lastInvalidUsername) {
                if (username.indexOf(this.lastInvalidUsername) === 0) {
                    return false
                }
            } else {
                if (!this.lastRequestMatch && username === this.lastValidUsername) {
                    return true
                }
            }
        }
        return true
    },
    _stringPartStartsWith: function(text, startsWith) {
        text = jQuery.trim(text || "").toLowerCase();
        startsWith = (startsWith || "").toLowerCase();
        var nameParts = text.split(/\s+/);
        if (!text || !startsWith) {
            return false
        }
        if (text.indexOf(startsWith) === 0) {
            return true
        }
        return _.any(nameParts, function(word) {
            return word.indexOf(startsWith) === 0
        })
    },
    _getUserNameFromInput: function(caret) {
        if (typeof caret != "number") {
            caret = this._getCaretPosition()
        }
        return this.currentUserName = JIRA.Mention.Matcher.getUserNameFromCurrentWord(this._rawInputValue(), caret)
    },
    _events: {
        textarea: {
            "keydown": function(e) {
                if (!this.willCheck) {
                    this.willCheck = _.defer(_.bind(this._keyUp, this))
                }
                if (e.keyCode === jQuery.ui.keyCode.ESCAPE) {
                    if (this.layerController.isVisible()) {
                        if (JIRA.Dialog.current) {
                            jQuery(AJS).one("Dialog.beforeHide", function(e) {
                                e.preventDefault()
                            })
                        }
                        this.$textarea.one("keyup", function(keyUpEvent) {
                            if (keyUpEvent.keyCode === jQuery.ui.keyCode.ESCAPE) {
                                keyUpEvent.stopPropagation();
                                JIRA.trigger("Mention.afterHide")
                            }
                        })
                    }
                    if (AJS.$.browser.msie) {
                        e.preventDefault()
                    }
                }
            },
            "focus": function() {
                this._keyUp()
            },
            "mouseup": function() {
                this._keyUp()
            },
            "blur": function() {
                this.listController.removeAllItems();
                this.lastQuery = this.lastValidUsername = this.lastInvalidUsername = ""
            }
        }
    }
});
JIRA.Mention.Matcher = {
    AT_USERNAME_START_REGEX: /^@(.*)/i,
    AT_USERNAME_REGEX: /[^\[]@(.*)/i,
    WIKI_MARKUP_REGEX: /\[[~@]+([^~@]*)/i,
    ACCEPTED_USER_REGEX: /\[~[^~\]]*\]/i,
    WORD_LIMIT: 3,
    getUserNameFromCurrentWord: function(text, caretPosition) {
        var before = text.substr(0, caretPosition);
        var lastWordStartIndex = this.getLastWordBoundaryIndex(before, false);
        var prevChar = before.charAt(lastWordStartIndex - 1);
        var currentWord;
        var foundMatch = null;
        if (!prevChar || !/\w/i.test(prevChar)) {
            currentWord = this._removeAcceptedUsernames(before.substr(lastWordStartIndex));
            if (/[\r\n]/.test(currentWord)) {
                return null
            }
            jQuery.each([this.AT_USERNAME_START_REGEX, this.AT_USERNAME_REGEX, this.WIKI_MARKUP_REGEX], function(i, regex) {
                var match = regex.exec(currentWord);
                if (match) {
                    foundMatch = match[1];
                    return false
                }
            })
        }
        return (foundMatch != null && this.lengthWithinLimit(foundMatch, this.WORD_LIMIT)) ? foundMatch : null
    },
    lengthWithinLimit: function(input, length) {
        var parts = jQuery.trim(input).split(/\s+/);
        return parts.length <= ~~length
    },
    getLastWordBoundaryIndex: function(text, strip) {
        var lastAt = text.lastIndexOf("@")
          , lastWiki = text.lastIndexOf("[~");
        if (strip) {
            lastAt = lastAt - 1;
            lastWiki = lastWiki - 1
        }
        return (lastAt > lastWiki) ? lastAt : lastWiki
    },
    _removeAcceptedUsernames: function(phrase) {
        var match = this.ACCEPTED_USER_REGEX.exec(phrase);
        if (match) {
            return phrase.split(match)[1]
        } else {
            return phrase
        }
    }
};
// This file was automatically generated from Mention.soy.
// Please don't edit this file by hand.

if (typeof JIRA == 'undefined') {
    var JIRA = {};
}
if (typeof JIRA.Templates == 'undefined') {
    JIRA.Templates = {};
}

JIRA.Templates.mentionsSuggestions = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<div class="aui-list">');
    if (opt_data.suggestions.length > 0) {
        output.append('<ul>');
        var suggestionList7 = opt_data.suggestions;
        var suggestionListLen7 = suggestionList7.length;
        for (var suggestionIndex7 = 0; suggestionIndex7 < suggestionListLen7; suggestionIndex7++) {
            var suggestionData7 = suggestionList7[suggestionIndex7];
            output.append('<li class="aui-list-item"><a class="aui-list-item-link aui-iconised-link" style="background-image: url(', soy.$$escapeHtml(suggestionData7.avatarUrls['16x16']), '); overflow:hidden; text-overflow: ellipsis" rel="', soy.$$escapeHtml(suggestionData7.username), '" href="#">');
            JIRA.Templates.highlitEntry({
                displayName: suggestionData7.displayName,
                emailAddress: suggestionData7.emailAddress,
                name: suggestionData7.name
            }, output);
            output.append('</a></li>');
        }
        output.append('<ul>');
    } else {
        JIRA.Templates.noSuggestions({
            activity: opt_data.activity,
            query: soy.$$escapeHtml(opt_data.query)
        }, output);
    }
    output.append('</div>');
    return opt_sb ? '' : output.toString();
}
;

JIRA.Templates.noSuggestions = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append((opt_data.query.length == 0) ? '<div class="no-suggestions">' + soy.$$escapeHtml("Type to start searching.") + '</div>' : (opt_data.activity) ? '<div class="no-suggestions searching">' + AJS.format("Searching for {0}{1}{2}...", '<strong>', opt_data.query, '</strong>') + '</div>' : '<div class="no-suggestions">' + AJS.format("Found no matching users for {0}{1}{2}.", '<strong>', opt_data.query, '</strong>') + '</div>');
    return opt_sb ? '' : output.toString();
}
;

JIRA.Templates.highlitEntry = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    JIRA.Templates.highlightMention({
        match: opt_data.displayName
    }, output);
    output.append(' - ');
    JIRA.Templates.highlightMention({
        match: opt_data.emailAddress
    }, output);
    output.append(' (');
    JIRA.Templates.highlightMention({
        match: opt_data.name
    }, output);
    output.append(')');
    return opt_sb ? '' : output.toString();
}
;

JIRA.Templates.highlightMention = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append((!opt_data.match.text) ? soy.$$escapeHtml(opt_data.match.prefix) + '<em>' + soy.$$escapeHtml(opt_data.match.match) + '</em>' + soy.$$escapeHtml(opt_data.match.suffix) : soy.$$escapeHtml(opt_data.match.text));
    return opt_sb ? '' : output.toString();
}
;

AJS.$(function() {
    var mentionsCtr = JIRA.Mention;
    var mentionsController;
    function initMentions() {
        if (!mentionsController) {
            mentionsController = new mentionsCtr()
        }
        mentionsController.textarea(this)
    }
    AJS.$(document).delegate(".mentionable", "focus", initMentions);
    AJS.$(".mentionable").each(initMentions)
});
(function($) {
    function readHtmlMetaTag() {
        try {
            var ajsMeta = JSON.parse(AJS.Meta.get("enabled-dark-features"));
            if (typeof ajsMeta === "object") {
                return ajsMeta
            }
        } catch (err) {}
        return []
    }
    var featuresArray = readHtmlMetaTag();
    var features = {};
    $.each(featuresArray, function() {
        features[this] = true
    });
    AJS.DarkFeatures = {
        isEnabled: function(key) {
            return !!features[key]
        },
        enable: function(key) {
            if (key && !features[key]) {
                features[key] = true
            }
        },
        disable: function(key) {
            if (key && features[key]) {
                delete features[key]
            }
        }
    }
}
)(AJS.$);
// This file was automatically generated from messages.soy.
// Please don't edit this file by hand.

if (typeof JIRA == 'undefined') {
    var JIRA = {};
}
if (typeof JIRA.Templates == 'undefined') {
    JIRA.Templates = {};
}

JIRA.Templates.warningMsg = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<div class="aui-message warning ', (opt_data.closeable) ? 'closeable' : '', '"><span class="aui-icon icon-warning"></span>', opt_data.msg, (opt_data.closeable) ? '<span class="aui-icon icon-close"></span>' : '', '</div>');
    return opt_sb ? '' : output.toString();
}
;

JIRA.Templates.successMsg = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<div class="aui-message success ', (opt_data.closeable) ? 'closeable' : '', '"><span class="aui-icon icon-success"></span>', opt_data.msg, (opt_data.closeable) ? '<span class="aui-icon icon-close"></span>' : '', '</div>');
    return opt_sb ? '' : output.toString();
}
;

JIRA.Templates.errorMsg = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<div class="aui-message error ', (opt_data.closeable) ? 'closeable' : '', '"><span class="aui-icon icon-error"></span>', opt_data.msg, (opt_data.closeable) ? '<span class="aui-icon icon-close"></span>' : '', '</div>');
    return opt_sb ? '' : output.toString();
}
;

JIRA.Templates.infoMsg = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<div class="aui-message info ', (opt_data.closeable) ? 'closeable' : '', '"><span class="aui-icon icon-info"></span>', opt_data.msg, (opt_data.closeable) ? '<span class="aui-icon icon-close"></span>' : '', '</div>');
    return opt_sb ? '' : output.toString();
}
;

jQuery.namespace("JIRA.Messages");
JIRA.Messages.Types = {
    WARNING: JIRA.Templates.warningMsg,
    ERROR: JIRA.Templates.errorMsg,
    SUCCESS: JIRA.Templates.successMsg
};
JIRA.Messages.DefaultTimeout = 10;
JIRA.Messages.buildMsg = function(msg, options) {
    options = options || {};
    var html = options.type({
        msg: msg,
        closeable: options.closeable
    });
    var $container = jQuery("<div>").html(html);
    var timeout = options.timeout != null ? options.timeout : JIRA.Messages.DefaultTimeout;
    var timer;
    if (options.closeable) {
        $container.find(".icon-close").click(function(e) {
            e.preventDefault();
            if (timer != null) {
                window.clearTimeout(timer)
            }
            $container.remove()
        })
    }
    if (timeout > 0) {
        timer = window.setTimeout(function() {
            $container.fadeOut(function() {
                $container.remove()
            })
        }, timeout * 1000)
    }
    return $container
}
;
JIRA.Messages.showMsg = function(msg, options) {
    options = options || {};
    var $container, top;
    jQuery(".global-msg").remove();
    if (!options.type) {
        console.warn("JIRA.Messages.showMsg: Message not shown, invalid type.");
        return jQuery()
    }
    $container = JIRA.Messages.buildMsg(msg, options);
    top = 20;
    $container.addClass("global-msg").appendTo("body").css({
        marginLeft: -$container.outerWidth() / 2,
        top: top
    });
    if (options.id) {
        $container.attr("id", options.id)
    }
    return $container
}
;
JIRA.Messages.showMessageAtTarget = function(msg, options) {
    options = options || {};
    var $msg = JIRA.Messages.buildMsg(msg, options);
    return $msg.prependTo(options.target)
}
;
JIRA.Messages.showMsgOnReload = function() {
    var SESSION_MSG_KEY = "jira.messages.reloadMessageMsg"
      , SESSION_MSG_TYPE_KEY = "jira.messages.reloadMessageType"
      , SESSION_MSG_CLOSEABLE_KEY = "jira.messages.reloadMessageCloseable"
      , SESSION_MSG_TARGET_KEY = "jira.messages.reloadMessageTarget";
    jQuery(function() {
        var msg = JIRA.SessionStorage.getItem(SESSION_MSG_KEY), type, closeable, target;
        if (msg) {
            type = JIRA.SessionStorage.getItem(SESSION_MSG_TYPE_KEY);
            closeable = (JIRA.SessionStorage.getItem(SESSION_MSG_CLOSEABLE_KEY) === "true");
            target = JIRA.SessionStorage.getItem(SESSION_MSG_TARGET_KEY);
            JIRA.SessionStorage.removeItem(SESSION_MSG_KEY);
            JIRA.SessionStorage.removeItem(SESSION_MSG_TYPE_KEY);
            JIRA.SessionStorage.removeItem(SESSION_MSG_CLOSEABLE_KEY);
            JIRA.SessionStorage.removeItem(SESSION_MSG_TARGET_KEY);
            if (!target || jQuery(target).is(document.body)) {
                JIRA.Messages.showMsg(msg, {
                    type: JIRA.Messages.Types[type],
                    closeable: closeable
                })
            } else {
                JIRA.Messages.showMessageAtTarget(msg, {
                    type: JIRA.Messages.Types[type],
                    closeable: closeable,
                    target: jQuery(target)
                })
            }
        }
    });
    return function(msg, options) {
        JIRA.SessionStorage.setItem(SESSION_MSG_KEY, msg);
        JIRA.SessionStorage.setItem(SESSION_MSG_TYPE_KEY, options.type);
        if (options.closeable) {
            JIRA.SessionStorage.setItem(SESSION_MSG_CLOSEABLE_KEY, options.closeable)
        }
        if (options.target) {
            JIRA.SessionStorage.setItem(SESSION_MSG_TARGET_KEY, options.target)
        }
    }
}();
JIRA.Messages.fadeInBackground = function(target, options) {
    var $target = jQuery(target);
    options = options || {};
    $target.css("backgroundColor", "#fff").animate({
        backgroundColor: options.backgroundColor || "#ffd"
    });
    window.setTimeout(function() {
        $target.animate({
            backgroundColor: "#fff"
        }, "slow", function() {
            $target.css("backgroundColor", "")
        })
    }, 3000)
}
;
jQuery.fn.fadeInBackground = function(options) {
    JIRA.Messages.fadeInBackground(this, options);
    return this
}
;
JIRA.Messages.fadeInBackgroundOnReload = function() {
    var BACKGROUND_COLOR_KEY = "jira.messages.fadeInBackground.color"
      , TARGET_KEY = "jira.messages.fadeInBackground.target";
    jQuery(function() {
        var backgroundColor = JIRA.SessionStorage.getItem(BACKGROUND_COLOR_KEY)
          , target = JIRA.SessionStorage.getItem(TARGET_KEY);
        JIRA.SessionStorage.removeItem(BACKGROUND_COLOR_KEY);
        JIRA.SessionStorage.removeItem(TARGET_KEY);
        JIRA.Messages.fadeInBackground(target, {
            backgroundColor: backgroundColor
        })
    });
    return function(target, options) {
        options = options || {};
        var targets = JIRA.SessionStorage.getItem(TARGET_KEY);
        if (targets) {
            targets = targets.split(",");
            targets.push(target);
            targets = targets.join(",")
        } else {
            targets = target
        }
        JIRA.SessionStorage.setItem(TARGET_KEY, targets);
        JIRA.SessionStorage.setItem(BACKGROUND_COLOR_KEY, "#ffd")
    }
}();
jQuery.fn.showErrorMsg = function(msg, options) {
    options = options || {};
    options.target = this;
    options.type = JIRA.Messages.Types.ERROR;
    return JIRA.Messages.showMessageAtTarget(msg, options)
}
;
jQuery.fn.showWarningMsg = function(msg, options) {
    options = options || {};
    options.target = this;
    options.type = JIRA.Messages.Types.WARNING;
    return JIRA.Messages.showMessageAtTarget(msg, options)
}
;
jQuery.fn.showSuccessMsg = function(msg, options) {
    options = options || {};
    options.target = this;
    options.type = JIRA.Messages.Types.SUCCESS;
    return JIRA.Messages.showMessageAtTarget(msg, options)
}
;
JIRA.Messages.showSuccessMsg = function(msg, options) {
    options = options || {};
    options.type = JIRA.Messages.Types.SUCCESS;
    return JIRA.Messages.showMsg(msg, options)
}
;
JIRA.Messages.showWarningMsg = function(msg, options) {
    options = options || {};
    options.type = JIRA.Messages.Types.WARNING;
    return JIRA.Messages.showMsg(msg, options)
}
;
JIRA.Messages.showErrorMsg = function(msg, options) {
    options = options || {};
    options.type = JIRA.Messages.Types.ERROR;
    return JIRA.Messages.showMsg(msg, options)
}
;
JIRA.Messages.showReloadWarningMsg = function(msg, options) {
    options = options || {};
    options.type = "WARNING";
    return JIRA.Messages.showMsgOnReload(msg, options)
}
;
JIRA.Messages.showReloadSuccessMsg = function(msg, options) {
    options = options || {};
    options.type = "SUCCESS";
    return JIRA.Messages.showMsgOnReload(msg, options)
}
;
JIRA.Messages.showReloadErrorMsg = function(msg, options) {
    options = options || {};
    options.type = "ERROR";
    return JIRA.Messages.showMsgOnReload(msg, options)
}
;
(function(jQuery) {
    jQuery.each(["backgroundColor", "borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor", "color", "outlineColor"], function(i, attr) {
        jQuery.fx.step[attr] = function(fx) {
            if (fx.state == 0) {
                fx.start = getColor(fx.elem, attr);
                fx.end = getRGB(fx.end)
            }
            if (!fx.start) {
                return
            }
            fx.elem.style[attr] = "rgb(" + [Math.max(Math.min(parseInt((fx.pos * (fx.end[0] - fx.start[0])) + fx.start[0]), 255), 0), Math.max(Math.min(parseInt((fx.pos * (fx.end[1] - fx.start[1])) + fx.start[1]), 255), 0), Math.max(Math.min(parseInt((fx.pos * (fx.end[2] - fx.start[2])) + fx.start[2]), 255), 0)].join(",") + ")"
        }
    });
    function getRGB(color) {
        var result;
        if (color && color.constructor == Array && color.length == 3) {
            return color
        }
        if (result = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(color)) {
            return [parseInt(result[1]), parseInt(result[2]), parseInt(result[3])]
        }
        if (result = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(color)) {
            return [parseFloat(result[1]) * 2.55, parseFloat(result[2]) * 2.55, parseFloat(result[3]) * 2.55]
        }
        if (result = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(color)) {
            return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]
        }
        if (result = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(color)) {
            return [parseInt(result[1] + result[1], 16), parseInt(result[2] + result[2], 16), parseInt(result[3] + result[3], 16)]
        }
        return colors[jQuery.trim(color).toLowerCase()]
    }
    function getColor(elem, attr) {
        var color;
        do {
            color = jQuery.curCSS(elem, attr);
            if (color != "" && color != "transparent" || jQuery.nodeName(elem, "body")) {
                break
            }
            attr = "backgroundColor"
        } while (elem = elem.parentNode);return getRGB(color)
    }
    var colors = {
        aqua: [0, 255, 255],
        azure: [240, 255, 255],
        beige: [245, 245, 220],
        black: [0, 0, 0],
        blue: [0, 0, 255],
        brown: [165, 42, 42],
        cyan: [0, 255, 255],
        darkblue: [0, 0, 139],
        darkcyan: [0, 139, 139],
        darkgrey: [169, 169, 169],
        darkgreen: [0, 100, 0],
        darkkhaki: [189, 183, 107],
        darkmagenta: [139, 0, 139],
        darkolivegreen: [85, 107, 47],
        darkorange: [255, 140, 0],
        darkorchid: [153, 50, 204],
        darkred: [139, 0, 0],
        darksalmon: [233, 150, 122],
        darkviolet: [148, 0, 211],
        fuchsia: [255, 0, 255],
        gold: [255, 215, 0],
        green: [0, 128, 0],
        indigo: [75, 0, 130],
        khaki: [240, 230, 140],
        lightblue: [173, 216, 230],
        lightcyan: [224, 255, 255],
        lightgreen: [144, 238, 144],
        lightgrey: [211, 211, 211],
        lightpink: [255, 182, 193],
        lightyellow: [255, 255, 224],
        lime: [0, 255, 0],
        magenta: [255, 0, 255],
        maroon: [128, 0, 0],
        navy: [0, 0, 128],
        olive: [128, 128, 0],
        orange: [255, 165, 0],
        pink: [255, 192, 203],
        purple: [128, 0, 128],
        violet: [128, 0, 128],
        red: [255, 0, 0],
        silver: [192, 192, 192],
        white: [255, 255, 255],
        yellow: [255, 255, 0]
    }
}
)(jQuery);
(function() {
    var eventsToListenTo = "input keyup";
    jQuery.fn.expandOnInput = function(maxHeight) {
        var $textareas = this.filter("textarea");
        $textareas.unbind(eventsToListenTo, setHeight).bind(eventsToListenTo, setHeight);
        if (AJS.$.browser.mozilla || AJS.$.browser.msie) {
            $textareas.unbind("paste", triggerKeyup).bind("paste", triggerKeyup)
        }
        $textareas.unbind("refreshInputHeight").bind("refreshInputHeight", function() {
            AJS.$(this).css("height", "");
            setHeight.call(this)
        });
        $textareas.data("expandOnInput_maxHeight", maxHeight);
        $textareas.each(function() {
            var $this = AJS.$(this);
            $this.each(function() {
                var $this = AJS.$(this);
                $this.data("hasFixedParent", !!$this.hasFixedParent())
            });
            if ($this.val() !== "") {
                setHeight.call(this)
            }
        });
        return this
    }
    ;
    function triggerKeyup() {
        var $textarea = AJS.$(this)
          , textarea = this;
        setTimeout(function() {
            $textarea.keyup();
            textarea.scrollTop = textarea.scrollHeight
        }, 0)
    }
    function setHeight() {
        var $textarea = AJS.$(this)
          , borderBox = ($textarea.css("boxSizing") || $textarea.css("-mozBoxSizing") || $textarea.css("-webkitBoxSizing") || $textarea.css("-msBoxSizing")) === "border-box";
        this.scrollHeight;
        var maxHeight = parseInt($textarea.css("maxHeight"), 10) || $textarea.data("expandOnInput_maxHeight") || AJS.$(window).height() - 160, newHeight;
        if (borderBox) {
            var outerHeight = $textarea.outerHeight();
            newHeight = Math.max(outerHeight + this.scrollHeight - this.clientHeight, outerHeight)
        } else {
            var height = $textarea.height();
            newHeight = Math.max(this.scrollHeight - ($textarea.innerHeight() - height), height)
        }
        if (newHeight < maxHeight) {
            $textarea.css({
                "overflow": "hidden",
                "height": newHeight + "px"
            })
        } else {
            var cursorPosition = this.selectionStart;
            $textarea.css({
                "overflow-y": "auto",
                "height": maxHeight + "px"
            });
            $textarea.unbind(eventsToListenTo, setHeight);
            $textarea.unbind("paste", triggerKeyup);
            if (this.selectionStart !== cursorPosition) {
                this.selectionStart = cursorPosition;
                this.selectionEnd = cursorPosition
            }
            newHeight = maxHeight
        }
        $textarea.trigger("expandedOnInput");
        if (!$textarea.data("hasFixedParent")) {
            var $window = AJS.$(window)
              , scrollTop = $window.scrollTop()
              , minScrollTop = $textarea.offset().top + newHeight - $window.height() + 29;
            if (scrollTop < minScrollTop) {
                $window.scrollTop(minScrollTop)
            }
        }
        $textarea.trigger("stalkerHeightUpdated")
    }
}
)();
(function($) {
    var DIRTY_WARNING_EXEMPT = "ajs-dirty-warning-exempt";
    var activeForm = null;
    var defaultDirtyMessage = "You have entered new data on this page. If you navigate away from this page without first saving your data, the changes will be lost.";
    var dirtyMessage = defaultDirtyMessage;
    $.fn.isDirty = function() {
        var $fields = this.find("*").andSelf().filter(":input");
        for (var i = 0; i < $fields.length; i++) {
            if (isElementDirty($fields[i])) {
                return true
            }
        }
        return false
    }
    ;
    $.fn.removeDirtyWarning = function() {
        $(this.form || this).closest("form").addClass(DIRTY_WARNING_EXEMPT);
        return this
    }
    ;
    $(AJS).bind("page-unload.location-change.from-dialog", function() {
        window.onbeforeunload = function() {}
    });
    $(AJS).bind("page-unload.refresh.from-dialog", function() {
        dirtyMessage = "The data in the dialog box was successfully submitted, although this page requires a refresh to display the results.\n\nYou had entered new data on the page before you opened the dialog box. If you continue, your page data will be lost."
    });
    function getDirtyMessage() {
        var msg = dirtyMessage;
        dirtyMessage = defaultDirtyMessage;
        return "***\n\n" + msg + "\n\n***"
    }
    JIRA.DirtyForm = {
        getDirtyWarning: function() {
            var $inputs = $("input[type='text'], textarea[name]");
            for (var i = 0, ii = $inputs.length; i < ii; i++) {
                if ($inputs[i].form !== activeForm && isElementDirty($inputs[i])) {
                    return getDirtyMessage()
                }
            }
        }
    };
    if (!AJS.isSelenium()) {
        window.onbeforeunload = JIRA.DirtyForm.getDirtyWarning
    }
    function isElementDirty(element) {
        var $element = $(element)
          , $form = $(element.form)
          , type = element.type;
        if ($form.hasClass(DIRTY_WARNING_EXEMPT) || $element.hasClass(DIRTY_WARNING_EXEMPT)) {
            return false
        }
        if ($element.is(":hidden")) {
            return false
        }
        if (!$element.parent().length) {
            return false
        }
        if (type === "hidden" || type === "submit" || type === "button") {
            return false
        }
        if (type === "select-one" || type === "select-multiple") {
            var options = element.options;
            for (var i = 0; i < options.length; i++) {
                var option = options[i];
                if (option.selected !== option.defaultSelected) {
                    return true
                }
            }
            return false
        }
        if (type === "checkbox" || type === "radio") {
            return element.checked !== element.defaultChecked
        }
        return element.value !== element.defaultValue
    }
    $(document).delegate("form", "submit cancel", function() {
        activeForm = this
    });
    $(document).delegate(".cancel", "click", cancelForm);
    $(function() {
        $("#cancelButton").bind("mousedown keydown click", cancelForm)
    });
    function cancelForm() {
        $(this.form || this).closest("form").trigger("cancel")
    }
}
)(AJS.$);
jQuery.fn.overlabel = function(targField) {
    this.each(function() {
        var label = AJS.$(this)
          , field = targField || AJS.$("#" + (label.data("target") || label.attr("for")));
        label.removeClass("overlabel").addClass("overlabel-apply").width(field.width()).click(function(e) {
            if (!field.attr("disabled")) {
                field.focus()
            }
            e.preventDefault()
        });
        field.focus(function() {
            label.addClass("hidden")
        }).blur(function() {
            if (AJS.$(this).val() === "") {
                label.removeClass("hidden")
            }
        });
        if (field.val() && field.val() !== "") {
            label.addClass("hidden")
        }
    });
    return this
}
;
/*
 * jQuery Text Overflow v0.7
 *
 * Licensed under the new BSD License.
 * Copyright 2009-2010, Bram Stein
 * All rights reserved.
 */
(function($) {
    var style = document.documentElement.style
      , hasTextOverflow = ("textOverflow"in style || "OTextOverflow"in style)
      , domSplit = function(root, maxIndex) {
        var index = 0
          , result = []
          , rtrim = function(text) {
            return text.replace(/\s+$/g, "")
        }
          , domSplitAux = function(nodes) {
            var i = 0, tmp;
            if (index > maxIndex) {
                return
            }
            for (i = 0; i < nodes.length; i += 1) {
                if (nodes[i].nodeType === 1) {
                    tmp = nodes[i].cloneNode(false);
                    result[result.length - 1].appendChild(tmp);
                    result.push(tmp);
                    domSplitAux(nodes[i].childNodes);
                    result.pop()
                } else {
                    if (nodes[i].nodeType === 3) {
                        if (index + nodes[i].length < maxIndex) {
                            result[result.length - 1].appendChild(nodes[i].cloneNode(false))
                        } else {
                            tmp = nodes[i].cloneNode(false);
                            tmp.textContent = rtrim(tmp.textContent.substring(0, maxIndex - index));
                            result[result.length - 1].appendChild(tmp)
                        }
                        index += nodes[i].length
                    } else {
                        result.appendChild(nodes[i].cloneNode(false))
                    }
                }
            }
        };
        result.push(root.cloneNode(false));
        domSplitAux(root.childNodes);
        return $(result.pop().childNodes)
    };
    $.extend($.fn, {
        textOverflow: function(str, autoUpdate) {
            var more = str || "&#x2026;";
            if (!hasTextOverflow) {
                return this.each(function() {
                    var element = $(this)
                      , clone = element.clone()
                      , originalElement = element.clone()
                      , originalText = element.text()
                      , originalWidth = element.width()
                      , low = 0
                      , mid = 0
                      , high = originalText.length
                      , reflow = function() {
                        if (originalWidth !== element.width()) {
                            element.replaceWith(originalElement);
                            element = originalElement;
                            originalElement = element.clone();
                            element.textOverflow(str, false);
                            originalWidth = element.width()
                        }
                    };
                    element.after(clone.hide().css({
                        "position": "absolute",
                        "width": "auto",
                        "overflow": "visible",
                        "max-width": "inherit"
                    }));
                    if (clone.width() > originalWidth) {
                        while (low < high) {
                            mid = Math.floor(low + ((high - low) / 2));
                            clone.empty().append(domSplit(originalElement.get(0), mid)).append(more);
                            if (clone.width() < originalWidth) {
                                low = mid + 1
                            } else {
                                high = mid
                            }
                        }
                        if (low < originalText.length) {
                            element.empty().append(domSplit(originalElement.get(0), low - 1)).append(more)
                        }
                    }
                    clone.remove();
                    if (autoUpdate) {
                        setInterval(reflow, 200)
                    }
                })
            } else {
                return this
            }
        }
    })
}
)(jQuery);
jQuery.fn.tooltip = function() {
    var defaults = {
        activeClass: "active",
        delay: 0.8
    };
    return function(options) {
        var tts = [];
        options = jQuery.extend(defaults, options);
        this.each(function() {
            var $this = jQuery(this);
            $this.extend($this, {
                showToolTip: function() {
                    if (!$this.hasClass(options.activeClass)) {
                        $this.showToolTip.timer = setTimeout(function() {
                            $this.addClass(options.activeClass);
                            if (options.onShow) {
                                options.onShow.call($this)
                            }
                        }, options.delay * 1000)
                    } else {
                        clearTimeout($this.hideToolTip.timer)
                    }
                },
                hideToolTip: function() {
                    if (!$this.hasClass(options.activeClass)) {
                        clearTimeout($this.showToolTip.timer)
                    } else {
                        $this.hideToolTip.timer = setTimeout(function() {
                            $this.removeClass(options.activeClass);
                            if (options.onHide) {
                                options.onHide.call($this)
                            }
                        }, options.delay * 1000)
                    }
                }
            });
            $this.click(function() {
                clearTimeout($this.showToolTip.timer);
                $this.removeClass(options.activeClass);
                if (options.onHide) {
                    options.onHide.call($this)
                }
            });
            $this.hover($this.showToolTip, $this.hideToolTip);
            tts.push($this)
        });
        return jQuery(tts)
    }
}();
(function() {
    JIRA.Events.REFRESH_TOGGLE_BLOCKS = "refreshToggleBlocks";
    function expand(e) {
        var instance = e.data.instance;
        if (AJS.$(this).hasClass(instance.options.collapsedClass)) {
            instance.expand(this)
        }
    }
    function toggle(e) {
        var instance = e.data.instance;
        if (!(instance.options.originalTargetIgnoreSelector && jQuery(e.originalTarget).is(instance.options.originalTargetIgnoreSelector))) {
            instance.toggle(e.target);
            e.preventDefault()
        }
    }
    function refreshToggleBlocks(e) {
        e.data.instance._collapseTwiciBlocksFromStorage()
    }
    JIRA.ToggleBlock = Class.extend({
        getDefautOptions: function() {
            return {
                blockSelector: ".twixi-block",
                triggerSelector: ".twixi",
                eventType: "click",
                collapsedClass: "collapsed",
                expandedClass: "expanded",
                storageCollectionName: "twixi-blocks",
                autoFocusTrigger: true
            }
        },
        _collapseTwiciBlocksFromStorage: function() {
            var block, val = localStorage.getItem(this.options.storageCollectionName) || "";
            val = val.replace(/\./g, "\\.");
            if (/#\w+/.test(val)) {
                block = AJS.$(val);
                if (block.is(this.options.blockSelector)) {
                    if (!this.isPermlink()) {
                        block.removeClass(this.options.expandedClass).addClass(this.options.collapsedClass)
                    }
                }
            }
            return this
        },
        _updateTwixiBlockIdInStorage: function(blockId) {
            if (!this.isPermlink()) {
                if (!/#\w+/.test(blockId)) {
                    return this
                }
                var val = localStorage.getItem(this.options.storageCollectionName) || ""
                  , blockLength = ("," + val + ",").indexOf("," + blockId + ",") + 1;
                if (blockLength) {
                    if (val.indexOf("," + blockId) + 1) {
                        val = val.replace("," + blockId, "")
                    } else {
                        val = val.replace(blockId, "")
                    }
                } else {
                    val = val.length ? val + "," + blockId : blockId
                }
                localStorage.setItem(this.options.storageCollectionName, val)
            }
            return this
        },
        contract: function(block) {
            block = jQuery(block);
            if (block.is(this.options.blockSelector)) {
                block.removeClass(this.options.expandedClass).addClass(this.options.collapsedClass);
                if (this.options.persist !== false) {
                    this._updateTwixiBlockIdInStorage("#" + block.attr("id"))
                }
            }
            AJS.$(block).trigger("contractBlock");
            return this
        },
        expand: function(block) {
            block = jQuery(block);
            if (block.is(this.options.blockSelector)) {
                block.removeClass(this.options.collapsedClass).addClass(this.options.expandedClass);
                if (this.options.persist !== false) {
                    this._updateTwixiBlockIdInStorage("#" + block.attr("id"))
                }
            }
            AJS.$(block).trigger("expandBlock");
            return this
        },
        toggle: function(twikiBlockChild) {
            var block = AJS.$(twikiBlockChild).closest(this.options.blockSelector);
            if (!block.hasClass(this.options.collapsedClass)) {
                this.contract(block)
            } else {
                this.expand(block)
            }
            if (this.options.autoFocusTrigger) {
                block.find(this.options.triggerSelector + ":visible").focus()
            }
            return this
        },
        isPermlink: function() {
            return this.checkIsPermlink(location.href)
        },
        checkIsPermlink: function(url) {
            var query = parseUri(url).queryKey;
            return (query.hasOwnProperty("focusedCommentId") || query.hasOwnProperty("focusedWorklogId"))
        },
        addTrigger: function(triggerSelector, eventType) {
            var thisInstance = this
              , lastMousedown = 0;
            if (triggerSelector) {
                eventType = eventType || "click";
                if (eventType === "dblclick") {
                    if (document.selection) {
                        AJS.$(document).delegate(triggerSelector, "dblclick", function() {
                            document.selection.empty()
                        })
                    } else {
                        AJS.$(document).delegate(triggerSelector, "mousedown", function() {
                            var now = new Date().getTime()
                              , allowSelection = now - lastMousedown > 750;
                            lastMousedown = now;
                            return allowSelection
                        })
                    }
                }
                AJS.$(document).delegate(triggerSelector, eventType, function() {
                    thisInstance.toggle(this)
                })
            }
            return this
        },
        addCallback: function(methodName, callback) {
            jQuery.aop.after({
                target: this,
                method: methodName
            }, callback);
            return this
        },
        isUnique: function(uid) {
            var uids = AJS.$(document).data("toggleBlockUids") || [];
            return AJS.$.inArray(uid, uids) === -1
        },
        setUid: function(uid) {
            var uids = AJS.$(document).data("toggleBlockUids") || [];
            uids.push(uid);
            AJS.$(document).data("toggleBlockUids", uids)
        },
        init: function(options) {
            var instance = this;
            options = options || {};
            this.options = jQuery.extend(this.getDefautOptions(), options);
            var uid = this.options.triggerSelector;
            if (!this.isUnique(uid)) {
                if (typeof console !== "undefined" && console.warn) {
                    console.warn("Your are trying to create a ToggleBlock with selector '" + this.options.triggerSelector + "'." + "One already exists with this trigger so has been ignored.")
                }
                return
            }
            this.setUid(uid);
            AJS.$(document).delegate(this.options.blockSelector, "reveal", {
                instance: this
            }, expand);
            AJS.$(document).delegate(this.options.triggerSelector, this.options.eventType, {
                instance: this
            }, toggle);
            JIRA.bind(JIRA.Events.REFRESH_TOGGLE_BLOCKS, {
                instance: this
            }, refreshToggleBlocks);
            if (this.options.persist !== false) {
                jQuery(function() {
                    instance._collapseTwiciBlocksFromStorage()
                })
            }
        }
    })
}
)();
(function() {
    JIRA.ToggleList = Class.extend({
        init: function(options) {
            var more = options.more
              , showMoreContainer = options.showMoreContainer || options.showMoreLink
              , showLessContainer = options.showLessContainer || options.showLessLink
              , showMoreLink = options.showMoreLink
              , showLessLink = options.showLessLink;
            if (!more || !more.length) {
                showMoreContainer.hide();
                showLessContainer.hide();
                return
            }
            more.hide();
            showMoreContainer.show();
            showLessContainer.hide();
            var toggle = function(e) {
                e.preventDefault();
                more.toggle();
                showMoreContainer.toggle();
                showLessContainer.toggle()
            };
            showMoreLink.click(toggle);
            showLessLink.click(toggle)
        }
    })
}
)();
JIRA.wikiPreview = function(prefs, ctx) {
    var field, editField, trigger, inPreviewMode = false, origText, setFields = function() {
        field = AJS.$("#" + prefs.fieldId, ctx),
        editField = AJS.$("#" + prefs.fieldId + "-wiki-edit", ctx),
        trigger = AJS.$("#" + prefs.trigger, ctx)
    }, scrollSaver = function() {
        var elem;
        return {
            show: function() {
                if (!elem) {
                    elem = AJS.$("<div>").html("&nbsp;").css({
                        height: "300px"
                    }).insertBefore(editField)
                }
                elem.css({
                    display: "block"
                })
            },
            hide: function() {
                elem.css({
                    display: "none"
                })
            }
        }
    }(), toggleRenderPreview = function() {
        if (!inPreviewMode) {
            editField.find(".content-inner").css({
                maxHeight: field.css("maxHeight")
            });
            this.showPreview()
        } else {
            editField.find(".content-inner").css({
                maxHeight: ""
            });
            this.showInput()
        }
    }, renderData = function(data) {
        editField.originalHeight = editField.height();
        scrollSaver.show();
        editField.addClass("previewClass");
        origText = field.val();
        field.hide();
        trigger.removeClass("loading").addClass("selected");
        editField.find(".content-inner").html(data);
        scrollSaver.hide();
        inPreviewMode = true;
        AJS.$(document).trigger("showWikiPreview", [editField]);
        setTimeout(function() {
            trigger.focus()
        }, 0)
    }, handleError = function(previewer) {
        return function(XMLHttpRequest, textStatus, errorThrown) {
            trigger.removeClass("loading");
            origText = field.val();
            if (textStatus) {
                alert(textStatus)
            }
            if (errorThrown) {
                alert(errorThrown)
            }
            previewer.showInput()
        }
    };
    return {
        showPreview: function() {
            var that = this;
            var pid = AJS.$("#pid", ctx).val()
              , issueType = AJS.$("#issuetype", ctx).val();
            if (AJS.$.isArray(pid)) {
                pid = pid[0]
            }
            if (AJS.$.isArray(issueType)) {
                issueType = issueType[0]
            }
            AJS.$("#" + prefs.trigger, ctx).addClass("loading");
            AJS.$.ajax({
                url: contextPath + "/rest/api/1.0/render",
                contentType: "application/json",
                type: "POST",
                data: JSON.stringify({
                    rendererType: prefs.rendererType,
                    unrenderedMarkup: field.val(),
                    issueKey: prefs.issueKey,
                    projectId: pid,
                    issueType: issueType
                }),
                dataType: "html",
                success: renderData,
                error: handleError(that)
            })
        },
        showInput: function(e) {
            if (editField) {
                scrollSaver.show();
                editField.css({
                    height: ""
                });
                editField.removeClass("previewClass").find(".content-inner").empty();
                field = AJS.$("#" + prefs.fieldId, ctx);
                field.val(origText);
                field.show();
                field.focus();
                trigger.removeClass("selected");
                scrollSaver.hide();
                inPreviewMode = false;
                AJS.$(document).trigger("showWikiInput", [editField])
            }
        },
        init: function() {
            var that = this, $trigger;
            prefs = AJS.$.readData(prefs);
            $trigger = AJS.$("#" + prefs.trigger, ctx);
            $trigger.click(function(e) {
                if (!$trigger.hasClass("loading")) {
                    setFields();
                    toggleRenderPreview.call(that)
                }
                e.preventDefault()
            })
        }
    }
}
;
AJS.namespace("jira.app.wikiPreview", null, JIRA.wikiPreview);
AJS.namespace("JIRA.Issue");
(function() {
    var $keyVal;
    function getKeyVal() {
        if (!$keyVal) {
            $keyVal = jQuery("#key-val")
        }
        return $keyVal
    }
    JIRA.Issue.getStalker = function() {
        return jQuery("#stalker")
    }
    ;
    JIRA.Issue.getSubtaskContent = function() {
        return JIRA.Issue.getSubtaskModule().find(".mod-content")
    }
    ;
    JIRA.Issue.getSubtaskModule = function() {
        return jQuery("#view-subtasks")
    }
    ;
    JIRA.Issue.reload = function() {
        window.location.reload()
    }
    ;
    JIRA.Issue.refreshSubtasks = function() {
        var deferred = jQuery.Deferred()
          , $subtasks = JIRA.Issue.getSubtaskContent();
        if ($subtasks.length === 0) {
            AJS.reloadViaWindowLocation(window.location.href + "#view-subtasks");
            return deferred.promise()
        } else {
            return jQuery.ajax({
                url: contextPath + "/secure/ViewSubtasks.jspa?id=" + JIRA.Issue.getIssueId(),
                success: function(html) {
                    $subtasks.replaceWith(html);
                    JIRA.trigger("Issue.subtasksRefreshed", [JIRA.Issue.getSubtaskContent()])
                }
            })
        }
    }
    ;
    JIRA.Issue.highlightSubtasks = function(issues) {
        jQuery.each(issues, function(i, issue) {
            jQuery(".issuerow[data-issuekey='" + issue.issueKey + "']").fadeInBackground()
        })
    }
    ;
    JIRA.Issue.getIssueId = function() {
        var $keyVal = getKeyVal();
        if ($keyVal.length !== 0) {
            return $keyVal.attr("rel")
        }
        return undefined
    }
    ;
    JIRA.Issue.getIssueKey = function() {
        var $keyVal = getKeyVal();
        if ($keyVal.length !== 0) {
            return $keyVal.text()
        }
        return undefined
    }
    ;
    JIRA.Issue.issueCreatedMessage = function(issue, isSubtask) {
        var issueText = isSubtask ? "Subtask" : "Issue";
        var link = '<a class="issue-created-key" href="' + AJS.contextPath() + "/browse/" + issue.issueKey + '">' + issue.issueKey + " - " + AJS.escapeHTML(issue.summary) + "</a>";
        return AJS.format("{0} {1} has been successfully created.", issueText, link)
    }
}
)(AJS.$);
AJS.namespace("jira.app.issue", null, JIRA.Issue);
JIRA.IssueNavigator = {
    isNavigator: function() {
        return jQuery("#isNavigator").length === 1
    },
    setIssueUpdatedMsg: function(options) {
        options = options || {};
        var sessionStorge = JIRA.SessionStorage
          , issueMsg = options.issueMsg
          , issueId = options.issueId
          , issueKey = options.issueKey;
        if (!issueId) {
            issueId = JIRA.IssueNavigator.getSelectedIssueId();
            issueKey = JIRA.IssueNavigator.getSelectedIssueKey()
        }
        if (issueId) {
            sessionStorge.setItem("selectedIssueId", issueId)
        }
        if (issueKey) {
            sessionStorge.setItem("selectedIssueKey", issueKey)
        }
        if (issueMsg) {
            sessionStorge.setItem("selectedIssueMsg", issueMsg)
        }
    },
    reload: function() {
        AJS.reloadViaWindowLocation()
    },
    isRowSelected: function() {
        return JIRA.IssueNavigator.get$focusedRow().length !== 0
    },
    get$focusedRow: function() {
        return jQuery("#issuetable tr.issuerow.focused")
    },
    getFocsuedIssueIndex: function() {
        var rowIndex = jQuery("#issuetable").find("tr.issuerow").index(JIRA.IssueNavigator.get$focusedRow());
        var searchOffset = parseInt(jQuery(".results-count-start").first().text(), 10) - 1;
        return rowIndex + searchOffset
    },
    getSelectedIssueKey: function() {
        var $focusedRow = JIRA.IssueNavigator.get$focusedRow();
        if ($focusedRow.length !== 0) {
            return $focusedRow.attr("data-issuekey")
        }
        return undefined
    },
    getSelectedIssueId: function() {
        return JIRA.IssueNavigator.get$focusedRow().attr("rel")
    },
    getNextIssueId: function() {
        return JIRA.IssueNavigator.get$focusedRow().next("tr.issuerow").attr("rel")
    }
};
AJS.namespace("jira.app.issuenavigator", null, JIRA.IssueNavigator);
(function($) {
    JIRA.IssueNavigator.Shortcuts = {};
    var $rows, index, $nextPage, $previousPage, helpText, isLoadingNewPage = false;
    var issueIdToRowIndex = {};
    $(document).ready(function() {
        if (JIRA.IssueNavigator.isNavigator()) {
            var $focusedRow;
            var focusedClassName = /(?:^|\s)focused(?!\S)/;
            var preventFocus = function() {
                $(this).attr("tabIndex", -1)
            };
            $rows = $("#issuetable").find("tr.issuerow");
            $rows.each(function(i) {
                var $row = $(this);
                $("a.hidden-link", this).blur(preventFocus);
                if (!$focusedRow && focusedClassName.test(this.className)) {
                    $focusedRow = $row;
                    index = i
                }
                issueIdToRowIndex[$row.attr("rel")] = i
            });
            if (!$focusedRow) {
                $focusedRow = $rows.first().addClass("focused")
            }
            var jqlHasFocus = jQuery("#jqltext").hasClass("focused");
            if (!jqlHasFocus) {
                var triggerConfig = new JIRA.setFocus.FocusConfiguration();
                triggerConfig.focusNow = function() {
                    focusRow(index)
                }
                ;
                JIRA.setFocus.pushConfiguration(triggerConfig)
            }
            $(document).keypress(function(e) {
                if (e.keyCode == "13" && $("div.aui-blanket").length == 0) {
                    var target = e.target;
                    if (target === undefined || target.nodeName === "HTML" || target.nodeName === "BODY" || target == document) {
                        if (hasResults() && $rows[index]) {
                            window.location = contextPath + "/browse/" + $rows.eq(index).data("issuekey")
                        }
                    }
                }
            });
            var $pager = $("div.pagination").first()
              , shouldFocusSearch = $("#focusSearch").attr("content") === "true";
            $nextPage = $pager.find("a.icon-next");
            $previousPage = $pager.find("a.icon-previous");
            if (!shouldFocusSearch) {
                var activeElement = AJS.$(document.activeElement);
                if (activeElement.is(":input")) {
                    activeElement.blur()
                }
            }
            $("#edit-issue").click(updateActionTemplateWithIssueId);
            $("#assign-to-me").click(updateActionTemplateWithIssueId);
            if (hasResults() && !$(document.activeElement).is(":input")) {
                setTimeout(function() {
                    $rows.eq(index).scrollIntoView()
                }, 0)
            }
            if (hasResults()) {
                JIRA.IssueNavigator.Shortcuts.flashIssueRow()
            }
            $(".issue-actions-trigger").click(function() {
                var $row = $(this).closest("tr");
                var issueId = $row.attr("rel");
                if (issueId) {
                    JIRA.IssueNavigator.Shortcuts.focusRow(issueId, 0, true)
                }
            });
            JIRA.bind("QuickCreateSubtask.sessionComplete", function(e, issues) {
                var lastIssue = issues[issues.length - 1]
                  , msg = JIRA.Issue.issueCreatedMessage(lastIssue, true);
                JIRA.IssueNavigator.setIssueUpdatedMsg({
                    issueMsg: msg
                });
                JIRA.IssueNavigator.reload()
            });
            JIRA.bind("QuickEdit.sessionComplete", function(e, issues) {
                JIRA.IssueNavigator.setIssueUpdatedMsg();
                JIRA.IssueNavigator.reload()
            });
            $(document).bind("dialogContentReady", function() {
                if (setSelectedIssueAjax.callback) {
                    setSelectedIssueAjax.callback()
                }
            })
        }
    });
    var inDuration = 1200;
    var flashLifeSpan = 10000;
    var flashTimerId = null;
    var $flashedIssueRow = null;
    function clearFlashTimeout() {
        if (flashTimerId) {
            window.clearTimeout(flashTimerId)
        }
    }
    function removeIssueRowFlash(outDuration) {
        clearFlashTimeout();
        if ($flashedIssueRow) {
            $flashedIssueRow.addClass("issueactioneddissapearing").removeClass("issueactioned");
            $("td:first-child", $flashedIssueRow).removeClass("issueactioned");
            $flashedIssueRow.animate({
                backgroundColor: "#fff"
            }, outDuration, function() {
                $(this).removeAttr("style");
                $(this).removeClass("issueactioneddissapearing")
            })
        }
        $flashedIssueRow = null
    }
    function flashIssueRowWithId(issueId, selectedIssueMsg, selectedIssueKey) {
        if ($flashedIssueRow) {
            removeIssueRowFlash("fast")
        }
        $flashedIssueRow = $("#issuerow" + issueId);
        $flashedIssueRow.animate({
            backgroundColor: "#ffd"
        }, inDuration, function() {
            $(this).css({
                backgroundColor: null
            });
            $(this).addClass("issueactioned")
        });
        clearFlashTimeout();
        flashTimerId = window.setTimeout(function() {
            removeIssueRowFlash("slow");
            $("#affectedIssueMsg").fadeOut(inDuration)
        }, flashLifeSpan);
        if (!selectedIssueKey) {
            selectedIssueKey = $flashedIssueRow.data("issuekey")
        }
        if (!selectedIssueMsg) {
            selectedIssueMsg = "thanks_issue_updated"
        }
        var allMsgTexts = {
            "thanks_issue_updated": "{0} has been updated.",
            "thanks_issue_transitioned": "{0} has been updated.",
            "thanks_issue_assigned": "{0} has been assigned.",
            "thanks_issue_commented": "{0} has been updated with your comment.",
            "thanks_issue_worklogged": "Work has been logged on {0}.",
            "thanks_issue_voted": "Your vote on {0} has been updated.",
            "thanks_issue_watched": "Your watcher status on {0} has been updated.",
            "thanks_issue_moved": "{0} has been moved.",
            "thanks_issue_linked": "The links on {0} have been updated.",
            "thanks_issue_cloned": "{0} has been cloned.",
            "thanks_issue_labelled": "The labels on {0} have been updated.",
            "thanks_issue_deleted": "{0} has been deleted.",
            "thanks_issue_attached": "The file(s) have been attached to {0}."
        };
        var msgText = allMsgTexts[selectedIssueMsg] || selectedIssueMsg;
        if (msgText && selectedIssueKey) {
            msgText = AJS.format(msgText, selectedIssueKey);
            JIRA.Messages.showSuccessMsg(msgText, {
                id: "affectedIssueMsg"
            })
        }
    }
    JIRA.IssueNavigator.Shortcuts.flashIssueRow = function(issueId) {
        var sessionstorage = JIRA.SessionStorage;
        var selectedIssueMsg = null;
        var selectedIssueKey = null;
        if (!issueId) {
            if (!issueId) {
                issueId = sessionstorage.getItem("selectedIssueId")
            }
            if (!issueId) {
                var result = /[?&]selectedIssueId=([0-9]+)/.exec(window.location);
                issueId = result && result.length == 2 ? result[1] : null
            }
        }
        if (issueId) {
            selectedIssueKey = sessionstorage.getItem("selectedIssueKey");
            selectedIssueMsg = sessionstorage.getItem("selectedIssueMsg");
            flashIssueRowWithId(issueId, selectedIssueMsg, selectedIssueKey)
        }
        sessionstorage.removeItem("selectedIssueId");
        sessionstorage.removeItem("selectedIssueKey");
        sessionstorage.removeItem("selectedIssueMsg")
    }
    ;
    JIRA.IssueNavigator.Shortcuts.selectNextIssue = function() {
        if (hasResults() && !isLoadingNewPage) {
            if (index === $rows.length - 1) {
                followLink($nextPage)
            } else {
                unselectRow(index++);
                selectRow(index)
            }
        }
    }
    ;
    JIRA.IssueNavigator.Shortcuts.selectPreviousIssue = function() {
        if (hasResults() && !isLoadingNewPage) {
            if (index === 0) {
                followLink($previousPage)
            } else {
                unselectRow(index--);
                selectRow(index)
            }
        }
    }
    ;
    JIRA.IssueNavigator.Shortcuts.viewSelectedIssue = function() {
        if (hasResults() && $($rows[index]).length) {
            try {
                window.location = contextPath + "/browse/" + $($rows[index]).data("issuekey")
            } catch (err) {}
        }
    }
    ;
    JIRA.IssueNavigator.Shortcuts.focusRow = function(issueId, delay, supressLinkFocus) {
        if (hasResults()) {
            if (issueId) {
                selectRowViaIssueId(issueId, delay, supressLinkFocus)
            } else {
                if (!supressLinkFocus) {
                    $($rows[index]).find("a:first").focus()
                }
            }
        }
    }
    ;
    JIRA.IssueNavigator.Shortcuts.focusSearch = function() {
        var $jqlTextArea = $("#jqltext");
        $("#jira").scrollIntoView();
        if ($jqlTextArea.length > 0) {
            $jqlTextArea.focus()
        } else {
            var $issuenav = $("#issuenav");
            if ($issuenav.hasClass("lhc-collapsed")) {
                $(".toggle-lhc").click()
            }
            var $textSection = $("#navigator-filter-subheading-textsearch-group");
            if ($textSection.hasClass("collapsed")) {
                $("#searcher-pid").focus()
            } else {
                $("#searcher-query").focus()
            }
        }
    }
    ;
    function updateActionTemplateWithIssueId() {
        if (/id=\{0\}/.test(this.href)) {
            var issueId = JIRA.IssueNavigator.getSelectedIssueId();
            var url = this.href;
            url = url.replace(/(id=\{0\})/g, "id=" + issueId);
            url += "?selectedIssueId=" + issueId;
            this.href = url
        }
    }
    function hasResults() {
        return $rows && $rows.length > 0
    }
    function followLink($a) {
        var href = $a.attr("href");
        if (href) {
            isLoadingNewPage = true;
            AJS.nextPage("blurSearch", true);
            window.location = href;
            setTimeout(function() {
                isLoadingNewPage = false
            }, 5000)
        }
    }
    function unselectRow(i) {
        var $td = $($rows[i]).find("td:first");
        $($rows[i]).removeClass("focused");
        helpText = $td.attr("title");
        $td.removeAttr("title")
    }
    function selectRow(i, delay, supressLinkFocus) {
        var $selected = $($rows[i]).addClass("focused").scrollIntoView();
        $selected.find("td").first().attr("title", helpText);
        if (!supressLinkFocus) {
            focusRow(i)
        }
        setSelectedIssueAjax(delay || 250)
    }
    function selectRowViaIssueId(issueId, delay, supressLinkFocus) {
        var newIndex = issueIdToRowIndex[issueId];
        if (newIndex || newIndex === 0) {
            unselectRow(index);
            selectRow(index = newIndex, delay, supressLinkFocus)
        }
    }
    function focusRow(i) {
        var $selected = $($rows[i]);
        $selected.find(".hidden-link").removeAttr("tabIndex").focus()
    }
    function setSelectedIssueAjax(delay) {
        delay = typeof delay === "number" ? delay : 1000;
        clearDelayedTimeout();
        setSelectedIssueAjax.timeout = setTimeout(setSelectedIssueAjax.callback = function() {
            $.get(contextPath + "/secure/SetSelectedIssue.jspa", {
                atl_token: atl_token(),
                selectedIssueId: JIRA.IssueNavigator.getSelectedIssueId(),
                selectedIssueIndex: JIRA.IssueNavigator.getFocsuedIssueIndex(),
                nextIssueId: JIRA.IssueNavigator.getNextIssueId()
            });
            clearDelayedTimeout()
        }
        , delay)
    }
    setSelectedIssueAjax.callback = null;
    setSelectedIssueAjax.timeout = null;
    function clearDelayedTimeout() {
        clearTimeout(setSelectedIssueAjax.timeout);
        setSelectedIssueAjax.callback = null;
        setSelectedIssueAjax.timeout = null
    }
}
)(AJS.$);
AJS.namespace("jira.app.issuenavigator.shortcuts", null, JIRA.IssueNavigator.Shortcuts);
(function($) {
    function initOverlabels() {
        $("label.overlabel").overlabel()
    }
    function initIssueNavContainment() {
        var $issueNav = $("div.results")
          , $issueNavWrapWidth = $issueNav.width();
        $issueNav.bind("resultsWidthChanged", function() {
            var $issueNavWrap = $(this);
            $issueNavWrap.css("width", 100 / $issueNavWrapWidth * ($issueNavWrapWidth - (parseInt($(document.documentElement).prop("scrollWidth"), 10) - $(window).width())) + "%")
        });
        $(window).resize(function() {
            $issueNav.trigger("resultsWidthChanged")
        });
        $issueNav.trigger("resultsWidthChanged");
        $("#issuenav").bind("contractBlock expandBlock", function() {
            $(".results").trigger("resultsWidthChanged")
        })
    }
    function initFieldTabs() {
        $(".fieldTabs li").click(function(e) {
            e.preventDefault();
            e.stopPropagation();
            var $this = $(this);
            if (!$this.hasClass("active")) {
                $(".fieldTabs li.active").removeClass("active");
                $this.addClass("active");
                $(".fieldTabArea.active").removeClass("active");
                $("#" + $this.attr("rel")).addClass("active")
            }
        })
    }
    function initHandleAccessKeys() {
        $("form").handleAccessKeys();
        $(document).bind("dialogContentReady", function() {
            $("form", this.$content).handleAccessKeys({
                selective: false
            })
        })
    }
    function initHandleInlineLayerHide() {
        $(document).keydown(function(e) {
            if (AJS.InlineDialog.current && e.which == 27 && !$(e.target).is(":input")) {
                AJS.InlineDialog.current.hide()
            }
        })
    }
    function initToggleBlocks() {
        new JIRA.ToggleBlock({
            blockSelector: ".twixi-block",
            storageCollectionName: "twixi"
        }).addCallback("toggle", function() {
            $("#stalker").trigger("stalkerHeightUpdated")
        }).addTrigger(".action-details", "dblclick");
        new JIRA.ToggleBlock({
            triggerSelector: ".inverted-twixi",
            blockSelector: ".inverted-twixi-block",
            collapsedClass: "expanded",
            expandedClass: "collapsed",
            storageCollectionName: "inverted-twixi"
        }).addCallback("toggle", function() {
            $("#stalker").trigger("stalkerHeightUpdated")
        });
        new JIRA.ToggleBlock({
            blockSelector: "#issue-filter .toggle-wrap:not(#navigator-filter-subheading-textsearch-group)",
            triggerSelector: ".toggle-trigger",
            collapsedClass: "expanded",
            expandedClass: "collapsed",
            storageCollectionName: "navSimpleSearch"
        });
        new JIRA.ToggleBlock({
            blockSelector: "#navigator-filter-subheading-textsearch-group",
            triggerSelector: ".toggle-trigger",
            storageCollectionName: "navSimpleSearchText"
        });
        new JIRA.ToggleBlock({
            blockSelector: "#queryBoxTable.toggle-wrap",
            triggerSelector: ".toggle-trigger",
            storageCollectionName: "navAdvanced"
        });
        new JIRA.ToggleBlock({
            blockSelector: ".twixi-block",
            triggerSelector: ".twixi-trigger",
            storageCollectionName: "twixi"
        });
        new JIRA.ToggleBlock({
            blockSelector: "#issuenav",
            triggerSelector: "a.toggle-lhc",
            collapsedClass: "lhc-collapsed",
            storageCollectionName: "lhc-state",
            autoFocusTrigger: false
        });
        $("#issue-filter .error").parents(".toggle-wrap").removeClass("collapsed").addClass("expanded");
        $("fieldset.content-toggle input[type='radio']").live("change", function() {
            var $this = $(this);
            $this.closest(".content-toggle").find("input[type='radio']").each(function() {
                $("#" + $(this).attr("name") + "-" + $(this).val() + "-content").hide()
            });
            $("#" + $this.attr("name") + "-" + $this.val() + "-content").show()
        })
    }
    function initLogWork() {
        $("#log-work-adjust-estimate-new-value,#log-work-adjust-estimate-manual-value").attr("disabled", "disabled");
        $("#log-work-adjust-estimate-" + $("input[name=worklog_adjustEstimate]:checked,input[name=adjustEstimate]:checked").val() + "-value").removeAttr("disabled");
        $("input[name=worklog_adjustEstimate],input[name=adjustEstimate]").change(function() {
            $("#log-work-adjust-estimate-new-value,#log-work-adjust-estimate-manual-value").attr("disabled", "disabled");
            $("#log-work-adjust-estimate-" + $(this).val() + "-value").removeAttr("disabled")
        })
    }
    function initLogin() {
        var radio = $("input:checked");
        if (radio.length !== 0) {
            if (radio.attr("id") === "forgot-login-rb-forgot-password") {
                $("#username,#password").addClass("hidden");
                $("#password").removeClass("hidden")
            } else {
                if (radio.attr("id") === "forgot-login-rb-forgot-username") {
                    $("#username,#password").addClass("hidden");
                    $("#username").removeClass("hidden")
                }
            }
        }
        $("#forgot-login-rb-forgot-password").change(function() {
            $("#username,#password").addClass("hidden");
            $("#password").removeClass("hidden")
        });
        $("#forgot-login-rb-forgot-username").change(function() {
            $("#username,#password").addClass("hidden");
            $("#username").removeClass("hidden")
        })
    }
    function initFileRadio() {
        $("input.upfile").each(function() {
            var input = $(this)
              , container = input.closest(".field-group");
            input.change(function() {
                if (input.val().length > 0) {
                    container.next(".field-group").removeClass("hidden")
                }
            })
        })
    }
    function initHandleEnterInTextarea() {
        $(document).on("keypress", "textarea", submitOnCtrlEnter);
        $("#jqltext").keypress(submitOnEnter)
    }
    function initUnsupportedBrowserWarning() {
        var $warning = $("#browser-warning");
        $(".icon-close", $warning).click(function() {
            $warning.slideUp("fast");
            saveCookie("UNSUPPORTED_BROWSER_WARNING", "handled")
        })
    }
    function initHandleFormSubmit() {
        $("form").submit(function(e) {
            var event = new $.Event("before-submit");
            $(this).trigger(event);
            if (event.isDefaultPrevented()) {
                e.preventDefault()
            }
        })
    }
    function initExpandOnInput() {
        var $document = $(document)
          , selector = "#comment, #environment, #description"
          , maxTextareaHeight = 200;
        $document.bind("tabSelect", function(e, data) {
            data.pane.find(selector).expandOnInput()
        });
        $(selector).expandOnInput(maxTextareaHeight);
        $document.bind("dialogContentReady", function(e, dialog) {
            dialog.get$popupContent().bind("tabSelect", function(e, data) {
                data.pane.find(selector).expandOnInput(maxTextareaHeight)
            }).find(selector).expandOnInput(maxTextareaHeight)
        });
        $document.bind("showWikiInput", function(e, $container) {
            $container.find(selector).expandOnInput()
        })
    }
    function initAuiTabHandling() {
        JIRA.bind("dialogContentReady", function() {
            AJS.tabs.setup();
            $(".page-type-admin .content-container.aui-tabs > .content-related .tabs-menu a").unbind("click")
        })
    }
    function initCancelFormHandling() {
        var $auiForm = $("form.aui");
        var $cancel = $("a.cancel", $auiForm);
        if ($.browser.msie && $cancel.attr("accessKey")) {
            $cancel.focus(function(e) {
                if (e.altKey) {
                    $(this).mousedown();
                    window.location.href = $cancel.attr("href")
                }
            })
        }
    }
    function initBulkEditCheckboxes() {
        var checkRow = function(input) {
            $(input).closest(".availableActionRow").find("td:first :checkbox").attr("checked", true)
        };
        var $rows = $("#availableActionsTable tr.availableActionRow");
        $rows.children("td:last-child").find(":input").change(function(e) {
            checkRow(this)
        })
    }
    function initPerformanceMonitor() {
        if (AJS.params.showmonitor) {
            var $div = $("<div class='perf-monitor'/>");
            var slowRequest = AJS.params["jira.request.server.time"] > 2000
              , tooManySql = AJS.params.jiraSQLstatements > 50;
            if (slowRequest) {
                $div.addClass("tooslow")
            }
            if (tooManySql) {
                $div.addClass("toomanysql")
            }
            $("#header-top").append($div);
            AJS.InlineDialog($div, "perf-monitor-dialog", function($contents, control, show) {
                var timingInfo = "<div>Page render time <strong>" + AJS.params["jira.request.server.time"] + " ms</strong>";
                if (AJS.params.jiraSQLstatements) {
                    timingInfo += " / SQL <strong>" + AJS.params.jiraSQLstatements + "@" + AJS.params.jiraSQLtime + " ms</strong></br>";
                    timingInfo += '<a target="_blank" href=' + contextPath + "/sqldata.jsp?requestId=" + AJS.params["jira.request.id"] + ">More...</a>"
                } else {
                    timingInfo += " / No SQL statments"
                }
                timingInfo += "</div>";
                $contents.empty().append(timingInfo);
                show()
            })
        }
    }
    function initShareItem($ctx) {
        $(".shared-item-trigger", $ctx).each(function() {
            var target = $(this).attr("href");
            AJS.InlineDialog(this, target.substring(1), function(contents, trigger, showPopup) {
                contents.html($(target).html());
                contentLoaded = true;
                showPopup()
            }, {
                width: 240
            })
        })
    }
    function initClickables() {
        $(".clickable").click(function() {
            window.location.href = $(this).find("a").attr("href")
        })
    }
    function initProjectsList($ctx) {
        $(".projects-list-trigger", $ctx).each(function() {
            var $trigger = $(this);
            $trigger.click(false);
            var target = $trigger.attr("href");
            AJS.InlineDialog(this, target.substring(1), function(contents, trigger, showPopup) {
                contents.html($(target).html());
                showPopup()
            }, {
                onHover: true,
                hideDelay: 500,
                width: 240
            })
        })
    }
    $(function() {
        initToggleBlocks();
        initOverlabels();
        initIssueNavContainment();
        initFieldTabs();
        initHandleAccessKeys();
        initLogWork();
        initLogin();
        initFileRadio();
        initHandleEnterInTextarea();
        initUnsupportedBrowserWarning();
        initHandleFormSubmit();
        initExpandOnInput();
        initCancelFormHandling();
        initBulkEditCheckboxes();
        initHandleInlineLayerHide();
        initPerformanceMonitor();
        initClickables();
        initProjectsList()
    });
    AJS.describeBrowser();
    initAuiTabHandling();
    JIRA.bind(JIRA.Events.NEW_CONTENT_ADDED, function(e, $ctx) {
        initShareItem($ctx)
    });
    JIRA.bind(JIRA.Events.NEW_CONTENT_ADDED, function(event, $context) {
        $context.find("#filter-edit").on("submit", function(event) {
            if (!event.isDefaultPrevented()) {
                var filterName = AJS.escapeHtml(this.elements.filterName.value);
                JIRA.Messages.showMsgOnReload(AJS.format("Changes to {0} have been saved.", filterName), {
                    type: "SUCCESS",
                    closeable: true,
                    target: "body:not(:has(#filter-edit))"
                })
            }
        });
        $context.find("#filter-subscription").on("submit", function(event) {
            if (!event.isDefaultPrevented()) {
                var recipient = jQuery('select[name="groupName"]').val() || AJS.Meta.get("remote-user-fullname");
                JIRA.Messages.showMsgOnReload(AJS.format("A subscription has been added for \u003cstrong>{0}\u003c\/strong>.", AJS.escapeHtml(recipient)), {
                    type: "SUCCESS",
                    closeable: true,
                    target: "body:not(:has(#filter-subscription))"
                })
            }
        })
    })
}
)(AJS.$);
AJS.$(function() {
    JIRA.Dialogs.keyboardShortcuts = new JIRA.FormDialog({
        id: "keyboard-shortcuts-dialog",
        trigger: "#keyshortscuthelp",
        widthClass: "large",
        onContentRefresh: function() {
            var context = this.get$popupContent();
            AJS.$("a.submit-link", context).click(function(e) {
                e.preventDefault();
                AJS.$("form", context).submit()
            })
        },
        onSuccessfulSubmit: function() {
            AJS.keyboardShortcutsDisabled = !AJS.keyboardShortcutsDisabled
        }
    });
    JIRA.Dialogs.deleteIssueLink = new JIRA.FormDialog({
        type: "ajax",
        id: "delete-issue-link-dialog",
        trigger: "#linkingmodule a.icon-delete",
        ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
        isIssueDialog: true
    });
    if (document.getElementById("dashboard")) {
        JIRA.Dialogs.deleteDashboard = new JIRA.FormDialog({
            type: "ajax"
        });
        AJS.$(document).delegate("#delete_dashboard", "click", function(e) {
            e.stopPropagation();
            e.preventDefault();
            JIRA.Dialogs.deleteDashboard.$activeTrigger = AJS.$("#delete_dashboard");
            JIRA.Dialogs.deleteDashboard.init({
                type: "ajax",
                id: "delete-dshboard",
                ajaxOptions: {
                    url: JIRA.Dialogs.deleteDashboard.$activeTrigger.attr("href")
                },
                targetUrl: "input[name=targetUrl]"
            });
            JIRA.Dialogs.deleteDashboard.show()
        })
    } else {
        JIRA.Dialogs.linkIssue = JIRA.Dialogs.createLinkIssueDialog("a.issueaction-link-issue");
        JIRA.Dialogs.deleteIssue = new JIRA.FormDialog({
            id: "delete-issue-dialog",
            trigger: "a.issueaction-delete-issue",
            targetUrl: "#delete-issue-return-url",
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            issueMsg: "thanks_issue_deleted",
            delayShowUntil: JIRA.Dialogs.waitForSavesToComplete,
            onContentRefresh: function() {
                jQuery(".overflow-ellipsis").textOverflow()
            },
            isIssueDialog: true
        });
        JIRA.Dialogs.cloneIssue = new JIRA.FormDialog({
            id: "clone-issue-dialog",
            trigger: "a.issueaction-clone-issue",
            handleRedirect: true,
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            issueMsg: "thanks_issue_cloned",
            delayShowUntil: JIRA.Dialogs.waitForSavesToComplete,
            onContentRefresh: function() {
                jQuery(".overflow-ellipsis").textOverflow()
            },
            isIssueDialog: true
        });
        JIRA.Dialogs.assignIssue = new JIRA.FormDialog({
            id: "assign-dialog",
            trigger: "a.issueaction-assign-issue",
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            issueMsg: "thanks_issue_assigned",
            delayShowUntil: JIRA.Dialogs.waitForSavesToComplete,
            onContentRefresh: function() {
                jQuery(".overflow-ellipsis").textOverflow()
            },
            isIssueDialog: true
        });
        JIRA.Dialogs.assignIssueToMe = new JIRA.FormDialog({
            id: "assign-dialog",
            trigger: "a.issueaction-assign-to-me",
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            issueMsg: "thanks_issue_assigned",
            delayShowUntil: JIRA.Dialogs.waitForSavesToComplete,
            onContentRefresh: function() {
                jQuery(".overflow-ellipsis").textOverflow()
            },
            isIssueDialog: true
        });
        JIRA.Dialogs.logWork = new JIRA.FormDialog({
            id: "log-work-dialog",
            trigger: "a.issueaction-log-work",
            handleRedirect: true,
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            issueMsg: "thanks_issue_worklogged",
            delayShowUntil: JIRA.Dialogs.waitForSavesToComplete,
            onContentRefresh: function() {
                jQuery(".overflow-ellipsis").textOverflow();
                var context = this.get$popupContent()
            },
            isIssueDialog: true
        });
        JIRA.Dialogs.attachFile = new JIRA.FormDialog({
            id: "attach-file-dialog",
            trigger: "a.issueaction-attach-file",
            handleRedirect: true,
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            issueMsg: "thanks_issue_attached",
            onContentRefresh: function() {
                jQuery(".overflow-ellipsis").textOverflow()
            },
            isIssueDialog: true
        });
        JIRA.Dialogs.attachScreenshot = new JIRA.ScreenshotDialog({
            id: "attach-screenshot-window",
            trigger: "a.issueaction-attach-screenshot"
        });
        JIRA.Dialogs.manageAttachment = new JIRA.FormDialog({
            id: "manage-attachment-dialog",
            trigger: "#manage-attachment-link",
            stacked: true,
            reloadOnPop: true,
            isIssueDialog: true
        });
        JIRA.Dialogs.comment = new JIRA.FormDialog({
            id: "comment-add-dialog",
            trigger: "a.issueaction-comment-issue:not(.inline-comment)",
            handleRedirect: true,
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            issueMsg: "thanks_issue_commented",
            onContentRefresh: function() {
                jQuery(".overflow-ellipsis").textOverflow()
            },
            isIssueDialog: true
        });
        JIRA.Dialogs.editLabels = new JIRA.LabelsDialog({
            id: "edit-labels-dialog",
            trigger: "a.issueaction-edit-labels,a.edit-labels",
            autoClose: true,
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            issueMsg: "thanks_issue_labelled",
            delayShowUntil: JIRA.Dialogs.waitForSavesToComplete,
            labelsProvider: labelsProvider,
            onContentRefresh: function() {
                jQuery(".overflow-ellipsis").textOverflow()
            },
            isIssueDialog: true
        });
        JIRA.Dialogs.watchIssue = new JIRA.FormDialog({
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            delayShowUntil: JIRA.Dialogs.waitForSavesToComplete,
            trigger: ".issueaction-watch-issue",
            isIssueDialog: true
        });
        JIRA.Dialogs.stopWatchingIssue = new JIRA.FormDialog({
            ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
            onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
            delayShowUntil: JIRA.Dialogs.waitForSavesToComplete,
            trigger: ".issueaction-unwatch-issue",
            isIssueDialog: true
        });
        new JIRA.FormDialog({
            type: "ajax",
            id: "delete-attachment-dialog",
            trigger: "#attachmentmodule .attachment-delete a, #issue-attachments-table a.delete",
            isIssueDialog: true
        });
        JIRA.Dialogs.issueActions = new JIRA.IssueActionsDialog;
        AJS.namespace("jira.app.issueActionsPopup", null, JIRA.Dialogs.issueActions);
        AJS.$(document).delegate("a.issueaction-workflow-transition", "click", function(event) {
            event.preventDefault();
            var action = parseUri(AJS.$(event.target).attr("href")).queryKey.action;
            if (action) {
                var id = "workflow-transition-" + action + "-dialog";
                var $trigger = AJS.$(this);
                if (!JIRA.Dialogs[id]) {
                    JIRA.Dialogs[id] = new JIRA.FormDialog({
                        id: id,
                        trigger: ['a[href*="action=' + action + '&"].issueaction-workflow-transition', 'a[href$="action=' + action + '"].issueaction-workflow-transition'],
                        widthClass: "large",
                        handleRedirect: true,
                        ajaxOptions: JIRA.Dialogs.getDefaultAjaxOptions,
                        onSuccessfulSubmit: JIRA.Dialogs.storeCurrentIssueIdOnSucessfulSubmit,
                        delayShowUntil: JIRA.Dialogs.waitForSavesToComplete,
                        issueMsg: "thanks_issue_transitioned",
                        onContentRefresh: function() {
                            AJS.tabs.setup()
                        },
                        isIssueDialog: true
                    });
                    JIRA.Dialogs[id].$activeTrigger = $trigger;
                    JIRA.Dialogs[id].show()
                }
            }
        });
        AJS.$.each(JIRA.Dialogs, function(name, dialog) {
            if (dialog instanceof JIRA.Dialog) {
                AJS.$(dialog).bind("beforeShow", function() {
                    if (name !== "keyboardShortcuts") {
                        return JIRA.IssueNavigator.isRowSelected() || JIRA.Issue.getIssueId() !== undefined
                    }
                })
            }
        })
    }
    new JIRA.FormDialog({
        type: "ajax",
        id: "create-project-dialog",
        trigger: ".add-project-trigger",
        autoClose: true,
        widthClass: AJS.DarkFeatures.isEnabled("addproject.project.sample") ? "large" : "medium"
    });
    new JIRA.FormDialog({
        id: "credits-dialog",
        trigger: "#view_credits",
        widthClass: "creditsContainer",
        onContentRefresh: function() {
            if (!jQuery("html").hasClass("safari")) {
                function center() {
                    jQuery.each(arguments, function() {
                        this.show().css({
                            marginLeft: -this.outerWidth() / 2,
                            marginTop: -this.outerHeight() / 2
                        }).hide()
                    })
                }
            }
        }
    });
    jQuery("a.trigger-dialog").each(function() {
        new JIRA.FormDialog({
            trigger: this,
            id: this.id + "-dialog",
            ajaxOptions: {
                url: this.href,
                data: {
                    decorator: "dialog",
                    inline: "true"
                }
            }
        })
    });
    function labelsProvider(labelsPopup) {
        var $trigger = labelsPopup.$activeTrigger
          , $labelsContainer = $trigger.closest(".labels-wrap")
          , isSubtaskForm = $trigger.parents("#view-subtasks").length !== 0;
        if (isSubtaskForm) {
            $labelsContainer = $trigger.parents("tr").find(".labels-wrap")
        } else {
            if ($trigger.hasClass("issueaction-edit-labels")) {
                if (JIRA.IssueNavigator.isNavigator()) {
                    $labelsContainer = jQuery("#issuetable tr.issuerow.focused td.labels .labels-wrap")
                } else {
                    $labelsContainer = jQuery("#wrap-labels .labels-wrap")
                }
            }
        }
        if ($labelsContainer.length > 0) {
            return $labelsContainer
        }
        return false
    }
});
JIRA.Dropdowns = {};
JIRA.Dropdowns.bindGenericDropdowns = function(ctx) {
    AJS.$(".js-default-dropdown", ctx).each(function() {
        var $trigger = AJS.$(this)
          , $content = $trigger.next(".aui-list")
          , alignment = $trigger.attr("data-alignment") || AJS.RIGHT;
        if ($content.length == 0) {
            console.warn("Dropdown init failied. Could not find content. Printing culprit...");
            console.log($trigger)
        }
        new AJS.Dropdown({
            trigger: $trigger,
            content: $content,
            alignment: alignment
        })
    })
}
;
JIRA.Dropdowns.bindIssueActionsDds = function(ctx) {
    return AJS.Dropdown.create({
        trigger: AJS.$(".issue-actions-trigger", ctx),
        ajaxOptions: {
            dataType: "json",
            cache: false,
            formatSuccess: JIRA.FRAGMENTS.issueActionsFragment
        }
    })
}
;
JIRA.Dropdowns.bindNavigatorOptionsDds = function() {
    var $navigatorOptions = AJS.$("#navigator-options");
    AJS.Dropdown.create({
        trigger: $navigatorOptions.find(".aui-dd-link"),
        content: $navigatorOptions.find(".aui-list"),
        alignment: AJS.RIGHT
    });
    $navigatorOptions.find("a.aui-dd-link").linkedMenu()
}
;
JIRA.Dropdowns.bindConfigDashboardDds = function() {
    AJS.$("#dashboard").find(".aui-dd-parent").dropDown("Standard", {
        trigger: "a.aui-dd-link"
    })
}
;
JIRA.Dropdowns.bindHeaderDds = function() {
    AJS.$("#main-nav li").each(function() {
        var $this = AJS.$(this)
          , trigger = $this.hasClass("admin-menu-link") ? $this : AJS.$(".drop", this);
        if ($this.hasClass("lazy")) {
            AJS.Dropdown.create({
                alignment: AJS.LEFT,
                offsetTarget: $this,
                trigger: trigger,
                styleClass: "main-nav-dropdown",
                ajaxOptions: {
                    url: contextPath + "/rest/api/1.0/menus/" + trigger.attr("rel"),
                    dataType: "json",
                    cache: false,
                    formatSuccess: JIRA.FRAGMENTS.menuFragment
                }
            })
        } else {
            if ($this.hasClass("nonlazy")) {
                AJS.Dropdown.create({
                    alignment: AJS.LEFT,
                    offsetTarget: $this,
                    styleClass: "main-nav-dropdown",
                    trigger: trigger,
                    content: $this.find(".aui-list")
                })
            }
        }
    });
    AJS.Dropdown.create({
        alignment: AJS.RIGHT,
        trigger: AJS.$("#header-details-user .drop"),
        content: AJS.$("#user-options-list")
    });
    AJS.$("#main-nav.admin-menu-bar").find("li.admin-menu-link").linkedMenu({
        onFocusRemoveClass: "#main-nav .selected"
    });
    AJS.$("#main-nav.standard-menu-bar").find("a.aui-dd-link").linkedMenu({
        reflectFocus: "#main-nav .lnk",
        onFocusRemoveClass: "#main-nav .selected"
    })
}
;
AJS.$(function() {
    JIRA.Dropdowns.bindNavigatorOptionsDds();
    JIRA.Dropdowns.bindConfigDashboardDds();
    JIRA.Dropdowns.bindHeaderDds()
});
JIRA.bind("Issue.subtasksRefreshed", function(e, ctx) {
    JIRA.Dropdowns.bindIssueActionsDds(ctx)
});
JIRA.bind(JIRA.Events.NEW_CONTENT_ADDED, function(e, ctx) {
    JIRA.Dropdowns.bindIssueActionsDds(ctx);
    JIRA.Dropdowns.bindGenericDropdowns(ctx)
});
JIRA.AssigneePicker = AJS.SingleSelect.extend({
    init: function(options) {
        var element = options.element;
        function data(query) {
            AJS.populateParameters();
            return {
                username: query,
                projectKeys: AJS.params.projectKeys,
                issueKey: AJS.params.assigneeEditIssueKey,
                actionDescriptorId: AJS.params.actionDescriptorId,
                maxResults: 1000
            }
        }
        function formatResponse(response) {
            var ret = [];
            if (response.length) {
                var groupDescriptor = new AJS.GroupDescriptor({
                    weight: 1,
                    id: "assignee-group-search",
                    uniqueItemScope: "container",
                    replace: true,
                    label: "All Users"
                });
                for (var i = 0, len = response.length; i < len; i++) {
                    var user = response[i];
                    var username = user.name;
                    var displayName = user.displayName;
                    var emailAddress = user.emailAddress;
                    var label = displayName + " - " + emailAddress + " (" + username + ")";
                    groupDescriptor.addItem(new AJS.ItemDescriptor({
                        value: username,
                        fieldText: displayName,
                        label: label,
                        allowDuplicate: false,
                        icon: user.avatarUrls["16x16"]
                    }))
                }
                ret.push(groupDescriptor)
            }
            return ret
        }
        AJS.$.extend(options, {
            submitInputVal: true,
            showDropdownButton: !!element.data("show-dropdown-button"),
            errorMessage: "User \'\'{0}\'\' cannot be assigned this issue",
            localDataGroupId: "assignee-group-suggested",
            content: "mixed",
            removeDuplicates: true,
            ajaxOptions: {
                url: function() {
                    AJS.params.assigneeEditIssueKey = undefined;
                    AJS.populateParameters();
                    var path = AJS.params.assigneeEditIssueKey ? "search" : "multiProjectSearch";
                    return contextPath + "/rest/api/latest/user/assignable/" + path
                },
                query: true,
                data: data,
                formatResponse: formatResponse
            }
        });
        this._super(options);
        this.suggestionsHandler = new JIRA.AssigneeSuggestHandler(this.options,this.model)
    },
    handleFreeInput: function(value) {
        if ("" === AJS.$.trim(value || this.$field.val())) {
            this.setSelection(this.model.getDescriptor("-1"))
        } else {
            this._super(value)
        }
    },
    cleanUpModel: function() {}
});
(function($) {
    function getHashedLinkTarget(url) {
        var hashIndex = url.indexOf("#");
        return (hashIndex != -1) ? url.substring(hashIndex) : url
    }
    function wireAssignToMeLink(context) {
        $("#assign-to-me-trigger", context).click(function(e) {
            e.preventDefault();
            var assigneeId = getHashedLinkTarget(jQuery(this).attr("href"));
            var loggedInUser = JIRA.Meta.getLoggedInUser();
            var assigneeSelect = $(assigneeId, context);
            if ($(assigneeId + "-single-select", context).length) {
                assigneeSelect.trigger("set-selection-value", loggedInUser.name)
            } else {
                assigneeSelect.val(loggedInUser.name).change()
            }
        })
    }
    function wireAssigneeEditGroup(context) {
        $(".assignee-edit-group", context).each(function() {
            var $this = $(this);
            var assigneeFieldId = $this.attr("rel");
            $("#assignee_userpicker_dummy_" + assigneeFieldId + "_container", context).click(function() {
                $("#assignee_radio_picker_" + assigneeFieldId, context).attr("checked", "checked")
            });
            $this.parents("form[name=jiraform]").submit(function() {
                $this.find("input[name=assignee_radio]:checked").each(function() {
                    if (this.id == "assignee_radio_picker_" + assigneeFieldId) {
                        $("#" + assigneeFieldId, context).val($("#assignee_userpicker_dummy_" + assigneeFieldId, context).val())
                    } else {
                        $("#" + assigneeFieldId, context).val($(this).val())
                    }
                })
            })
        })
    }
    function createAssigneePicker(ctx) {
        $(".js-assignee-picker", ctx).each(function() {
            var $this = $(this)
              , editValue = $this.data("editValue");
            var control = new JIRA.AssigneePicker({
                element: $this,
                editValue: editValue
            });
            $(document).trigger("ready.single-select.assignee", control)
        })
    }
    JIRA.bind(JIRA.Events.NEW_CONTENT_ADDED, function(e, context, reason) {
        if (reason !== JIRA.CONTENT_ADDED_REASON.panelRefreshed) {
            createAssigneePicker(context);
            wireAssignToMeLink(context);
            wireAssigneeEditGroup(context)
        }
    })
}
)(AJS.$);
AJS.$(function() {
    function dropWebSudo(successCallback) {
        AJS.$.ajax({
            type: "DELETE",
            url: contextPath + "/rest/auth/1/websudo",
            contentType: "application/json",
            success: successCallback
        })
    }
    AJS.$("#websudo-drop-from-protected-page").click(function(event) {
        dropWebSudo(function() {
            window.location = contextPath + "/secure/MyJiraHome.jspa"
        });
        event.preventDefault()
    });
    AJS.$("#websudo-drop-from-normal-page").click(function(event) {
        dropWebSudo(function() {
            AJS.$("#websudo-banner").slideUp();
            AJS.$("#websudo-banner").addClass("dropped")
        });
        event.preventDefault()
    })
});
jQuery.fn.toggleField = function(field) {
    var that = this
      , field = jQuery(field)
      , setFieldAttr = function() {
        field.prop("disabled", function() {
            if (that.prop("checked") === false) {
                that.parent().addClass("disabled");
                return true
            } else {
                that.parent().removeClass("disabled");
                return false
            }
        }());
        return arguments.callee
    }();
    jQuery(document[this.attr("name")]).click(setFieldAttr).change(setFieldAttr);
    return this
}
;
(function() {
    var IGNORED_WORDS = ["THE", "A", "AN", "AS", "AND", "OF", "OR"];
    var CHARACTER_MAP = {};
    CHARACTER_MAP[199] = "C";
    CHARACTER_MAP[231] = "c";
    CHARACTER_MAP[252] = "u";
    CHARACTER_MAP[251] = "u";
    CHARACTER_MAP[250] = "u";
    CHARACTER_MAP[249] = "u";
    CHARACTER_MAP[233] = "e";
    CHARACTER_MAP[234] = "e";
    CHARACTER_MAP[235] = "e";
    CHARACTER_MAP[232] = "e";
    CHARACTER_MAP[226] = "a";
    CHARACTER_MAP[228] = "a";
    CHARACTER_MAP[224] = "a";
    CHARACTER_MAP[229] = "a";
    CHARACTER_MAP[225] = "a";
    CHARACTER_MAP[239] = "i";
    CHARACTER_MAP[238] = "i";
    CHARACTER_MAP[236] = "i";
    CHARACTER_MAP[237] = "i";
    CHARACTER_MAP[196] = "A";
    CHARACTER_MAP[197] = "A";
    CHARACTER_MAP[201] = "E";
    CHARACTER_MAP[230] = "ae";
    CHARACTER_MAP[198] = "Ae";
    CHARACTER_MAP[244] = "o";
    CHARACTER_MAP[246] = "o";
    CHARACTER_MAP[242] = "o";
    CHARACTER_MAP[243] = "o";
    CHARACTER_MAP[220] = "U";
    CHARACTER_MAP[255] = "Y";
    CHARACTER_MAP[214] = "O";
    CHARACTER_MAP[241] = "n";
    CHARACTER_MAP[209] = "N";
    function getTotalLength(words) {
        return words.join("").length
    }
    function removeIgnoredWords(words) {
        return _.reject(words, function(word) {
            return AJS.$.inArray(word, IGNORED_WORDS) !== -1
        })
    }
    function createAcronym(words) {
        var result = "";
        AJS.$.each(words, function(i, word) {
            result += word.charAt(0)
        });
        return result
    }
    function getFirstSyllable(word) {
        var pastVowel = false;
        var i;
        for (i = 0; i < word.length; i++) {
            if (isVowelOrY(word[i])) {
                pastVowel = true
            } else {
                if (pastVowel) {
                    return word.substring(0, i + 1)
                }
            }
        }
        return word
    }
    function isVowelOrY(c) {
        return c && c.length === 1 && c.search("[AEIOUY]") !== -1
    }
    JIRA.ProjectKeyGenerator = Class.extend({
        init: function(options) {
            options = jQuery.extend({}, options);
            this.desiredKeyLength = (typeof options.desiredKeyLength == "number") ? options.desiredKeyLength : 4;
            this.maxKeyLength = (typeof options.maxKeyLength == "number") ? options.maxKeyLength : 0
        },
        generateKey: function(name) {
            name = AJS.$.trim(name);
            if (!name) {
                return ""
            }
            var filtered = [];
            for (var i = 0, ii = name.length; i < ii; i++) {
                var sub = CHARACTER_MAP[name.charCodeAt(i)];
                filtered.push(sub ? sub : name[i])
            }
            name = filtered.join("");
            var words = [];
            AJS.$.each(name.split(/\s+/), function(i, word) {
                if (word) {
                    word = word.replace(/[^a-zA-Z]/g, "");
                    word = word.toUpperCase();
                    word.length && words.push(word)
                }
            });
            if (this.desiredKeyLength && getTotalLength(words) > this.desiredKeyLength) {
                words = removeIgnoredWords(words)
            }
            var key;
            if (words.length == 0) {
                key = ""
            } else {
                if (words.length == 1) {
                    var word = words[0];
                    if (this.desiredKeyLength && word.length > this.desiredKeyLength) {
                        key = getFirstSyllable(word)
                    } else {
                        key = word
                    }
                } else {
                    key = createAcronym(words)
                }
            }
            if (this.maxKeyLength && key.length > this.maxKeyLength) {
                key = key.substr(0, this.maxKeyLength)
            }
            return key
        }
    })
}
)();
JIRA.ProjectSample = Class.extend({
    init: function(options) {
        this.defaultName = "My Project";
        this.defaultKey = "MP";
        this.defaultAvatarSrc = "";
        this.nameValue = "";
        this.keyValue = "";
        this.avatarSrc = "";
        this.$container = options.element;
        this.$container.html(JIRA.Templates.CreateProject.projectSample({
            projectName: this.defaultName,
            projectKey: this.defaultKey,
            issueName: options.issueName
        }));
        this.$sampleElement = this.$container.find(".sample-project");
        this.$sampleElementName = this.$sampleElement.find("#project-name-val");
        this.$sampleElementKey = this.$sampleElement.find("#key-val");
        this.$sampleElementAvatar = this.$sampleElement.find("#project-avatar");
        this.events = options.events;
        this.events.bind("updated.Name", AJS.$.proxy(function() {
            this.updateSampleName(arguments[1])
        }, this));
        this.events.bind("updated.Key", AJS.$.proxy(function() {
            this.updateSampleKey(arguments[1])
        }, this));
        this.events.bind("updated.Avatar", AJS.$.proxy(function() {
            this.updateSampleAvatar(arguments[1])
        }, this))
    },
    _render: function() {
        var name = this.nameValue || this.defaultName;
        var key = this.keyValue || this.defaultKey;
        var avatar = this.avatarSrc || this.defaultAvatarSrc;
        key = (key || "") + "-1";
        key = key.toUpperCase();
        this.$sampleElementName.text(name);
        this.$sampleElementKey.text(key);
        this.$sampleElementAvatar.attr("src", avatar)
    },
    updateSampleName: function(name) {
        this.nameValue = jQuery.trim(name);
        this._render()
    },
    updateSampleKey: function(key) {
        this.keyValue = jQuery.trim(key);
        this._render()
    },
    updateSampleAvatar: function(src) {
        this.avatarSrc = src;
        this._render()
    }
});
JIRA.CreateProjectField = Class.extend({
    TIMEOUT_MS: 100,
    projectNames: [],
    maxNameLength: 80,
    init: function(options) {
        this.$element = options.element;
        this.$nameElement = this.$element.find("input.text[name='name']");
        this.$keyElement = this.$element.find("input.text[name='key']");
        this.$keyEditedElement = this.$element.find("input[name='keyEdited']");
        this.$avatarElement = this.$element.find(".jira-inline-avatar-picker-trigger");
        this.eventBus = {
            src: AJS.$(this),
            trigger: function(name, args) {
                this.src.trigger(name, args)
            },
            bind: function(name, func) {
                this.src.bind(name, func)
            }
        };
        var maxKeyLength = this.$keyElement.attr("maxlength");
        if (!maxKeyLength) {
            maxKeyLength = 10
        }
        this.keygen = new JIRA.ProjectKeyGenerator({
            desiredKeyLength: 4,
            maxKeyLength: maxKeyLength
        });
        this.lastKeyValidated = "";
        if (AJS.DarkFeatures.isEnabled("addproject.project.sample")) {
            this.sample = new JIRA.ProjectSample({
                element: this.$element.find("#sample-project-container"),
                events: this.eventBus
            })
        }
        this.$keyElement.attr("style", "text-transform: uppercase");
        this.initialName = this.$nameElement.val();
        this.initialKey = this.$keyElement.val();
        this.$element.find(".error").addClass("description initial-error");
        this.showInitialError(this.$nameElement);
        this.showInitialError(this.$keyElement);
        this.$nameElement.focus(AJS.$.proxy(this._bindNameHook, this));
        this.$nameElement.blur(AJS.$.proxy(this._unbindHook, this));
        this.$keyElement.focus(AJS.$.proxy(this._bindKeyHook, this));
        this.$keyElement.blur(AJS.$.proxy(this._unbindHook, this));
        this.$keyElement.blur(AJS.$.proxy(this.autofillKeyIfNeeded, this));
        var $keyHelpElement = this.$keyElement.parent().find(".icon-help");
        if ($keyHelpElement.length) {
            new AJS.InlineDialog($keyHelpElement,"project-key-help-popup",function(contents, trigger, show) {
                contents.html(JIRA.Templates.CreateProject.keyHelp());
                show()
            }
            ,{
                width: 330,
                offsetX: -30
            })
        }
        if (this.$avatarElement.size()) {
            this.eventBus.trigger("updated.Avatar", this.$avatarElement.attr("src"));
            this.$avatarElement.bind("AvatarSelected", AJS.$.proxy(function() {
                this.eventBus.trigger("updated.Avatar", this.$avatarElement.attr("src"))
            }, this))
        }
        this._loadExistingProjects()
    },
    _loadExistingProjects: function() {
        var instance = this;
        AJS.$.ajax({
            url: contextPath + "/rest/api/latest/project",
            success: function(projects) {
                for (var x in projects) {
                    instance.projectNames.push(projects[x].name.toUpperCase())
                }
            }
        })
    },
    _bindNameHook: function(e) {
        this._bindHook(e, this.onNameTimeout)
    },
    _bindKeyHook: function(e) {
        var el = AJS.$(e.target);
        el.data("lastValue", el.val());
        this._bindHook(e, this.onKeyTimeout)
    },
    _bindHook: function(e, func) {
        var instance = this, el = AJS.$(e.target), hook;
        hook = function() {
            instance._unbindHook(e);
            func.apply(instance);
            if (el.is(":visible")) {
                el.data("checkHook", setTimeout(hook, instance.TIMEOUT_MS))
            }
        }
        ;
        if (!el.data("checkHook")) {
            el.data("checkHook", setTimeout(hook, 0))
        }
    },
    _unbindHook: function(e) {
        var el = AJS.$(e.target);
        clearTimeout(el.data("checkHook"));
        el.removeData("checkHook")
    },
    shouldUpdateKey: function() {
        return (this.$keyEditedElement.val() != "true")
    },
    setKeyEdited: function(key) {
        if (this.$keyElement.data("lastValue") !== key) {
            this.$keyEditedElement.val((key) ? "true" : "false")
        }
        this.$keyElement.data("lastValue", key)
    },
    updateKey: function(key) {
        this.$keyElement.val(key);
        this.validateKey(key);
        this.eventBus.trigger("updated.Key", key)
    },
    autofillKeyIfNeeded: function() {
        if (this.shouldUpdateKey()) {
            var key = this.keygen.generateKey(this.$nameElement.val());
            if (key.length > 1) {
                this.updateKey(key)
            } else {
                this.$keyElement.val("")
            }
        }
    },
    onNameTimeout: function() {
        var name = this.$nameElement.val();
        this.validateName(name);
        this.eventBus.trigger("updated.Name", name);
        this.autofillKeyIfNeeded()
    },
    onKeyTimeout: function() {
        var key = this.$keyElement.val();
        this.setKeyEdited(key);
        this.validateKey(key);
        this.eventBus.trigger("updated.Key", key)
    },
    validateName: function(name) {
        if (name == this.initialName && this.$nameElement.parent().find(".error").size()) {
            return
        } else {
            if (name.length > this.maxNameLength) {
                this.showInlineError(this.$nameElement, this.initialName, AJS.format("The project name must not exceed {0} characters in length.", this.maxNameLength));
                return
            }
            var x;
            for (x in this.projectNames) {
                if (name.toUpperCase() == this.projectNames[x]) {
                    this.showInlineError(this.$nameElement, this.initialName, "A project with that name already exists.");
                    return
                }
            }
        }
        this.hideInlineError(this.$nameElement)
    },
    validateKey: function(key) {
        var instance = this;
        var changed = (instance.lastKeyValidated !== key);
        this.lastKeyValidated = key;
        if (!changed) {
            return
        }
        if (key) {
            AJS.$.ajax({
                url: contextPath + "/rest/api/latest/projectvalidate/key?key=" + key.toUpperCase(),
                success: function(errors) {
                    if (errors.errors && errors.errors["projectKey"]) {
                        instance.showInlineError(instance.$keyElement, instance.initialKey, errors.errors["projectKey"])
                    } else {
                        instance.hideInlineError(instance.$keyElement)
                    }
                }
            })
        } else {
            instance.hideInlineError(instance.$keyElement)
        }
    },
    showInlineError: function($element, initialVal, msg) {
        var $initialErrorElement = $element.parent().find(".initial-error");
        if ($element.val() === initialVal && $initialErrorElement.length) {
            this.showInitialError($element)
        } else {
            var $errorElement = $element.parent().find(".error.description");
            if (!$errorElement.length) {
                $errorElement = AJS.$("<div class='error description'></div>");
                $element.parent().append($errorElement)
            }
            $errorElement.text(msg);
            $element.parent().find(".description").hide();
            $initialErrorElement.hide();
            $errorElement.show()
        }
    },
    hideInlineError: function($element) {
        $element.parent().find(".description").show();
        $element.parent().find(".error.description").hide()
    },
    showInitialError: function($element) {
        var $initialErrorElement = $element.parent().find(".initial-error");
        if ($initialErrorElement.length) {
            $element.parent().find(".description").hide();
            $element.parent().find(".error.description").hide();
            $initialErrorElement.show()
        }
    }
});
JIRA.bind(JIRA.Events.NEW_CONTENT_ADDED, function(e, context, reason) {
    if (reason !== JIRA.CONTENT_ADDED_REASON.panelRefreshed) {
        context.find("#add-project-fields").each(function() {
            new JIRA.CreateProjectField({
                element: AJS.$(this)
            })
        })
    }
});
// This file was automatically generated from createProject.soy.
// Please don't edit this file by hand.

if (typeof JIRA == 'undefined') {
    var JIRA = {};
}
if (typeof JIRA.Templates == 'undefined') {
    JIRA.Templates = {};
}
if (typeof JIRA.Templates.CreateProject == 'undefined') {
    JIRA.Templates.CreateProject = {};
}

JIRA.Templates.CreateProject.keyHelp = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<div class="project-key-help"><p><b>', soy.$$escapeHtml("What\x27s a project key?"), '</b></p><ul><li>', soy.$$escapeHtml("It prefixes each issue in the project"), '</li><li>', soy.$$escapeHtml("It cannot be changed once the project is created"), '</li></ul></div>');
    return opt_sb ? '' : output.toString();
}
;

// This file was automatically generated from projectSample.soy.
// Please don't edit this file by hand.

if (typeof JIRA == 'undefined') {
    var JIRA = {};
}
if (typeof JIRA.Templates == 'undefined') {
    JIRA.Templates = {};
}
if (typeof JIRA.Templates.CreateProject == 'undefined') {
    JIRA.Templates.CreateProject = {};
}

JIRA.Templates.CreateProject.projectSample = function(opt_data, opt_sb) {
    var output = opt_sb || new soy.StringBuilder();
    output.append('<div class="aui-message hint sample-project-container"><span class="aui-icon icon-hint"></span><p class="title">', soy.$$escapeHtml("Project preview"), '</p><p>', soy.$$escapeHtml("With the values you\x27ve set, an issue in your project might look like this:"), '</p><div class="aui-panel sample-project"><div class="item-header"><div class="avatar"><img id="project-avatar" alt="" class="project-avatar-48" height="48" src="', soy.$$escapeHtml(opt_data.avatarUrl), '" width="48"/></div><ul class="breadcrumbs"><li><a id="project-name-val">', soy.$$escapeHtml(opt_data.projectName), '</a></li><li><a id="key-val">', soy.$$escapeHtml(opt_data.projectKey), '</a></li></ul><h1 class="item-summary"><a>', (opt_data.issueTitle) ? soy.$$escapeHtml(opt_data.issueTitle) : soy.$$escapeHtml("Example"), '</a></h1><div class="command-bar"></div></div></div></div>');
    return opt_sb ? '' : output.toString();
}
;

(function() {
    var NONCHARACTER_KEYS = {
        8: "Backspace",
        9: "Tab",
        13: "Return",
        16: "Shift",
        17: "Control",
        18: "Alt",
        27: "Esc",
        32: "Spacebar",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "Left",
        38: "Up",
        39: "Right",
        40: "Down",
        46: "Del"
    };
    var MODIFIER_KEYS = {
        16: "Shift",
        17: "Control",
        18: "Alt"
    };
    var lastModifierKey = 0;
    pipe("keydown", function(event) {
        if (event.which in MODIFIER_KEYS) {
            if (event.which === lastModifierKey) {
                return null
            }
            lastModifierKey = event.which
        } else {
            lastModifierKey = 0
        }
        return NONCHARACTER_KEYS[event.which] || null
    }, "aui:keydown");
    pipe("keypress", function(event) {
        var altGr = (event.altKey && event.ctrlKey);
        lastModifierKey = 0;
        switch (event.which) {
        case 0:
        case 8:
        case 9:
        case 27:
            break;
        default:
            if (altGr || (!event.ctrlKey && !event.metaKey)) {
                return String.fromCharCode(event.which)
            }
        }
        return null
    }, "aui:keypress");
    pipe("keyup", function(event) {
        if (event.which === lastModifierKey) {
            lastModifierKey = 0
        }
        return NONCHARACTER_KEYS[event.which] || null
    }, "aui:keyup");
    function pipe(inType, getKey, outType) {
        var listenerCount = 0;
        jQuery.event.special[outType] = {
            setup: function() {
                if (listenerCount === 0) {
                    jQuery(document).bind(inType, dispatchKeyEvent)
                }
                listenerCount++
            },
            teardown: function() {
                listenerCount--;
                if (listenerCount === 0) {
                    jQuery(document).unbind(inType, dispatchKeyEvent)
                }
            }
        };
        function dispatchKeyEvent(event) {
            var key = getKey(event);
            if (key) {
                var $event = new jQuery.Event(outType);
                $event.key = key;
                if (outType !== "aui:keypress") {
                    $event.shiftKey = event.shiftKey;
                    $event.ctrlKey = event.ctrlKey;
                    $event.altKey = event.altKey
                }
                var target = event.target;
                var ownerDocument = (target.nodeType === 9) ? target : target.ownerDocument;
                if (ownerDocument !== document) {
                    $event.target = target;
                    arguments[0] = $event;
                    jQuery.event.trigger($event, arguments, document, true)
                } else {
                    jQuery(target).trigger($event)
                }
                if ($event.isDefaultPrevented()) {
                    event.preventDefault()
                }
            }
        }
    }
    jQuery(document).bind("iframeAppended", function(event) {
        jQuery(event.target).contents().bind("keydown keypress keyup", function(event) {
            jQuery.event.trigger(event, arguments, document, true)
        })
    })
}
)();
(function() {
    var SHORTCUTS = {};
    var KEY_STREAM = [];
    var MAX_LENGTH = 0;
    var resetTimerId = 0;
    var nonCharacterKeyPressed = false;
    var $document = jQuery(document);
    jQuery.event.special.shortcut = {
        setup: function() {
            $document.bind("keydown", keydown);
            $document.bind("aui:keypress", keypress);
            $document.bind("keyup", keyup)
        },
        teardown: function() {
            $document.unbind("keydown", keydown);
            $document.unbind("aui:keypress", keypress);
            $document.unbind("keyup", keyup)
        },
        add: function(config) {
            if (this !== document) {
                throw new TypeError('"shortcut" event handlers must be bound at the document')
            }
            if (config.data === undefined) {
                throw new Error('No data argument supplied in call to jQuery.fn.bind("shortcut", ' + (config.handler.name || "function") + ")")
            }
            if (typeof config.data !== "string") {
                throw new TypeError("Object " + config.data + " is not a string")
            }
            if (config.data.length === 0) {
                throw new Error("Shortcut sequence must not be empty")
            }
            for (var shortcut in SHORTCUTS) {
                if (hasConflict(shortcut, config.data)) {
                    throw new Error('Cannot bind new shortcut "' + config.data + '" due to conflict with existing shortcut "' + shortcut + '"')
                }
            }
            if (config.data.length > MAX_LENGTH) {
                MAX_LENGTH = config.data.length
            }
            SHORTCUTS[config.data] = config.handler
        },
        remove: function(config) {
            if (this !== document) {
                throw new TypeError('"shortcut" event handlers must be bound at the document')
            }
            delete SHORTCUTS[config.data]
        }
    };
    function keydown(event) {
        if (nonCharacterKeyPressed) {
            resetKeyStream()
        }
        nonCharacterKeyPressed = (event.which !== 16)
    }
    function keypress(event) {
        if (jQuery(event.target).is(":input")) {
            resetKeyStream();
            return
        }
        KEY_STREAM.push(event.key);
        clearTimeout(resetTimerId);
        resetTimerId = setTimeout(resetKeyStream, 2000);
        if (KEY_STREAM.length > MAX_LENGTH) {
            KEY_STREAM.shift()
        }
        var keyStream = KEY_STREAM.join("");
        for (var i = 0; i < keyStream.length; i++) {
            var shortcut = keyStream.slice(i);
            if (shortcut in SHORTCUTS) {
                event.preventDefault();
                event = new jQuery.Event("shortcut");
                event.data = shortcut;
                SHORTCUTS[shortcut].call(document, event);
                KEY_STREAM.length = 0;
                break
            }
        }
        nonCharacterKeyPressed = false
    }
    function keyup() {
        if (nonCharacterKeyPressed) {
            resetKeyStream()
        }
    }
    function resetKeyStream() {
        KEY_STREAM.length = 0
    }
    function hasConflict(shortcut1, shortcut2) {
        var len1 = shortcut1.length;
        var len2 = shortcut2.length;
        if (len1 === len2) {
            return shortcut1 === shortcut2
        }
        var i, d;
        if (len1 < len2) {
            i = shortcut2.indexOf(shortcut1);
            d = len2 - len1
        } else {
            i = shortcut1.indexOf(shortcut2);
            d = len1 - len2
        }
        return i >= 0 && i < d
    }
}
)();
AJS.whenIType = function(shortcut) {
    return new AJS.KeyboardShortcut(shortcut)
}
;
AJS.disableKeyboardShortcuts = function() {
    AJS.keyboardShortcutsDisabled = true
}
;
AJS.enableKeyboardShortcuts = function() {
    AJS.keyboardShortcutsDisabled = false
}
;
AJS.KeyboardShortcut = function(shortcut) {
    this._executer = null;
    this.shortcuts = [shortcut];
    this._bindShortcut(shortcut)
}
;
AJS.KeyboardShortcut.prototype._bindShortcut = function(shortcut) {
    if (typeof shortcut !== "string") {
        throw new TypeError("AJS.KeyboardShortcut expects string; received " + typeof shortcut)
    }
    if (/^(?:ctrl|alt|shift|meta)+/i.test(shortcut)) {
        throw new SyntaxError('AJS.KeyboardShortcut cannot bind the shortcut "' + shortcut + '" because it uses a modifier')
    }
    var self = this;
    jQuery(document).bind("shortcut", shortcut, function(event) {
        if (self._executer && !AJS.popup.current && !AJS.dropDown.current && !JIRA.Dialog.current && !AJS.keyboardShortcutsDisabled) {
            if (AJS.InlineDialog.current) {
                AJS.InlineDialog.current.hide()
            }
            self._executer(event);
            event.preventDefault()
        }
    })
}
;
AJS.KeyboardShortcut.prototype._addShortcutTitle = function(selector) {
    var elem = jQuery(selector);
    var title = elem.attr("title") || "";
    var typeStr = "Type";
    var thenStr = "then";
    var orStr = "OR";
    var shortcuts = jQuery.map(this.shortcuts, function(shortcut) {
        return " '" + shortcut.split("").join("' " + thenStr + " '") + "'"
    });
    title += " ( " + typeStr + shortcuts.join(" " + orStr + " ") + " )";
    elem.attr("title", title)
}
;
AJS.KeyboardShortcut.prototype.moveToNextItem = function(selector) {
    this._executer = function() {
        var index, items = jQuery(selector), focusedElem = jQuery(selector + ".focused");
        if (!this._executer.blurHandler) {
            jQuery(document).one("keypress", function(e) {
                if (e.keyCode === 27 && focusedElem) {
                    focusedElem.removeClass("focused")
                }
            })
        }
        if (focusedElem.length === 0) {
            focusedElem = jQuery(selector).eq(0)
        } else {
            focusedElem.removeClass("focused");
            index = jQuery.inArray(focusedElem.get(0), items);
            if (index < items.length - 1) {
                index = index + 1;
                focusedElem = items.eq(index)
            } else {
                focusedElem.removeClass("focused");
                focusedElem = jQuery(selector).eq(0)
            }
        }
        if (focusedElem && focusedElem.length > 0) {
            focusedElem.addClass("focused");
            focusedElem.scrollIntoView();
            focusedElem.find("a:first").focus()
        }
    }
}
;
AJS.KeyboardShortcut.prototype.moveToPrevItem = function(selector) {
    this._executer = function() {
        var index, items = jQuery(selector), focusedElem = jQuery(selector + ".focused");
        if (!this._executer.blurHandler) {
            jQuery(document).one("keypress", function(e) {
                if (e.keyCode === 27 && focusedElem) {
                    focusedElem.removeClass("focused")
                }
            })
        }
        if (focusedElem.length === 0) {
            focusedElem = jQuery(selector + ":last")
        } else {
            focusedElem.removeClass("focused");
            index = jQuery.inArray(focusedElem.get(0), items);
            if (index > 0) {
                index = index - 1;
                focusedElem = items.eq(index)
            } else {
                focusedElem.removeClass("focused");
                focusedElem = jQuery(selector + ":last")
            }
        }
        if (focusedElem && focusedElem.length > 0) {
            focusedElem.addClass("focused");
            focusedElem.scrollIntoView();
            focusedElem.find("a:first").focus()
        }
    }
}
;
AJS.KeyboardShortcut.prototype.click = function(selector) {
    this._addShortcutTitle(selector);
    this._executer = function() {
        jQuery(selector).click()
    }
}
;
AJS.KeyboardShortcut.prototype.goTo = function(location) {
    this._executer = function() {
        window.location.href = contextPath + location
    }
}
;
AJS.KeyboardShortcut.prototype.followLink = function(selector) {
    this._addShortcutTitle(selector);
    this._executer = function() {
        var elem = jQuery(selector);
        if (elem.length > 0 && (elem.prop("nodeName").toLowerCase() === "a" || elem.prop("nodeName").toLowerCase() === "link")) {
            elem.click();
            window.location.href = elem.attr("href")
        }
    }
}
;
AJS.KeyboardShortcut.prototype.moveToAndClick = function(selector) {
    this._addShortcutTitle(selector);
    this._executer = function() {
        var elem = jQuery(selector);
        if (elem.length > 0) {
            elem.click();
            elem.scrollIntoView()
        }
    }
}
;
AJS.KeyboardShortcut.prototype.moveToAndFocus = function(selector) {
    this._addShortcutTitle(selector);
    this._executer = function(e) {
        var $elem = jQuery(selector);
        if ($elem.length > 0) {
            $elem.focus();
            $elem.scrollIntoView();
            if ($elem.is(":input")) {
                e.preventDefault()
            }
        }
    }
}
;
AJS.KeyboardShortcut.prototype.evaluate = function(command) {
    if (typeof command !== "function") {
        command = new Function(command)
    }
    command.call(this)
}
;
AJS.KeyboardShortcut.prototype.execute = function(func) {
    var self = this;
    this._executer = function() {
        if (typeof func !== "function") {
            func = new Function(func)
        }
        func.call(self)
    }
}
;
AJS.KeyboardShortcut.prototype.or = function(shortcut) {
    this.shortcuts.push(shortcut);
    this._bindShortcut(shortcut);
    return this
}
;
AJS.$(function() {
    AJS.keyboardShortcutsDisabled = !AJS.Meta.get("keyboard-shortcuts-enabled")
});
AJS.whenIType.fromJSON = function(json) {
    if (json) {
        jQuery(document).bind("aui:keyup", function(event) {
            var $target = jQuery(event.target);
            if (event.key === "Esc" && $target.is(":input:not(button[type='button'])")) {
                var beforeBlurInput = new jQuery.Event("beforeBlurInput");
                AJS.$(event.target).trigger(beforeBlurInput, [{
                    reason: "escPressed"
                }]);
                if (!beforeBlurInput.isDefaultPrevented()) {
                    $target.blur()
                }
            }
        });
        jQuery.each(json, function() {
            var keys = Function.prototype.call.apply(Array.prototype.concat, this.keys);
            var shortcut = keys.join("");
            if (keys.length < shortcut.length) {
                throw new Error("Shortcut sequence [" + keys.join(",") + "] contains invalid keys")
            }
            AJS.whenIType(shortcut)[this.op](this.param)
        })
    }
}
;
jQuery(function() {
    if (AJS.keys) {
        AJS.whenIType.fromJSON(AJS.keys.shortcuts)
    }
});
AJS.$(function() {
    var adminSummaryLink = AJS.$("#admin_summary");
    if (adminSummaryLink) {
        adminSummaryLink.parent().click(function() {
            window.location = adminSummaryLink.attr("href")
        })
    }
});
JIRA.bind("QuickCreateIssue.sessionComplete", function(e, issues) {
    var html;
    if (issues && issues.length === 1) {
        html = JIRA.Issue.issueCreatedMessage(issues[0]);
        JIRA.Messages.showSuccessMsg(html, {
            closeable: true
        })
    } else {
        html = JIRA.Issue.issueCreatedMessage(issues[issues.length - 1]);
        JIRA.Messages.showSuccessMsg(html, {
            closeable: true
        })
    }
});
JIRA.FRAGMENTS.menuFragment = function(response) {
    var html = AJS.$("<div class='aui-list' />");
    var isFirst = true;
    var listNode;
    AJS.$(response.sections).each(function() {
        listNode = AJS.$("<ul class='aui-list-section' />");
        var listItemNode, linkNode;
        if (this.id) {
            listNode.attr("id", this.id)
        }
        if (this.style) {
            listNode.addClass(this.style)
        }
        if (this.items && this.items.length != 0) {
            if (isFirst) {
                listNode.addClass("first");
                isFirst = false
            }
            if (this.label) {
                html.append(AJS.$("<h5/>").text(this.label))
            }
            AJS.$(this.items).each(function() {
                listItemNode = AJS.$("<li class='aui-list-item' />");
                if (this.id) {
                    listItemNode.attr("id", this.id)
                }
                if (this.style) {
                    listItemNode.addClass(this.style)
                }
                linkNode = AJS.$("<a class='aui-list-item-link' />").attr("href", this.url);
                if (this.id) {
                    linkNode.attr("id", this.id + "_lnk")
                }
                if (this.title) {
                    linkNode.attr("title", this.title)
                }
                if (this.iconUrl) {
                    linkNode.addClass("aui-iconised-link").css("background-image", "url('" + this.iconUrl + "')")
                }
                if (this.label) {
                    linkNode.text(this.label)
                }
                listItemNode.append(linkNode);
                listNode.append(listItemNode)
            });
            html.append(listNode)
        }
    });
    listNode.addClass("aui-last");
    return html
}
;
